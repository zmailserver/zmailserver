/*
 * ***** BEGIN LICENSE BLOCK *****
 * Zimbra Collaboration Suite Web Client
 * Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010, 2012 VMware, Inc.
 * 
 * The contents of this file are subject to the Zimbra Public License
 * Version 1.3 ("License"); you may not use this file except in
 * compliance with the License.  You may obtain a copy of the License at
 * http://www.zimbra.com/license.
 * 
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.
 * ***** END LICENSE BLOCK *****
 */

ZmChat = function(id, chatName, chatList) {
//	if (id == null) id = rosterItem.getAddress() + "_chat";
	if (chatList == null) chatList = appCtxt.getApp(ZmApp.IM).getRoster().getChatList();
	ZmItem.call(this, ZmItem.CHAT, id, chatList);
	this._sendMessageCallbackObj = new AjxCallback(this, this._sendMessageCallback);
	this.messages = [];
	this._rosterItemList = new ZmRosterItemList();
	this._isGroupChat = false;
	this._chatName = chatName;
	this._thread = null;
	this._unread = 0;
	this._historyIndex = 0;
};

ZmChat.prototype = new ZmItem;
ZmChat.prototype.constructor = ZmChat;

ZmChat.F_MESSAGE = "ZmChat.message";
ZmChat.F_TYPING = "ZmChat.typing";

ZmChat.prototype.toString =
function() {
	return "ZmChat: id = " + this.id;
};

ZmChat.prototype._getRosterItemList = function() {
        return this._rosterItemList;
};

ZmChat.prototype.addRosterItem = function(item, skipNotify, index) {
        this._rosterItemList.addItem(item, skipNotify, index);
        this._isGroupChat = this._isGroupChat || (this.getRosterSize() > 1);
};

ZmChat.prototype.removeRosterItem = function(item, skipNotify) {
        this._rosterItemList.removeItem(item);
};

ZmChat.prototype.getRosterSize = function() {
        return this._rosterItemList.size();
};

ZmChat.prototype.getName = function() {
        return this._chatName;
};

ZmChat.prototype.getConfThread = function() {
	if (this._thread)
		// return this._thread.replace(/[^a-zA-Z0-9]/g, "");
		return this._thread;
	// XXX: useless attempt; we need a real thread generated by XMPP :(
	return AjxDispatcher.run("GetRoster").getMyAddress() + new Date().getTime();
};

ZmChat.prototype.getThread = function() {
        return this._thread;
};

ZmChat.prototype.setThread = function(thread) {
        this._thread = thread;
};

// TODO: listeners
ZmChat.prototype.setName = function(chatName) {
        this._chatName = chatName;
};

ZmChat.prototype.setTyping = function(item, typing) {
	var fields = {};
	fields[ZmChat.F_TYPING] = typing;
	this._notify(ZmEvent.E_MODIFY, { item	: item,
					 fields	: fields });
};

// get the display name for a roster item on the list
ZmChat.prototype.getDisplayName = function(addr, isMe) {
	
	if (!addr) return ZmMsg.imSystem;
	var rosterItem = AjxDispatcher.run("GetRoster").getRosterItem(addr);
	var displayName;
	if(rosterItem){
	 	displayName = rosterItem.getDisplayName();
	}else{
		var ri = isMe ? null : this._rosterItemList.getByAddr(addr);
		var displayName = ri ? ri.getDisplayName() : addr;
		if (isMe || this._rosterItemList.size() == 1) {
			var i = displayName.indexOf("@");
			if (i != -1) displayName = displayName.substring(0, i);
		}
	}
	return displayName;	
};

ZmChat.prototype.isGroupChat = function() {
	return this._isGroupChat;
};

ZmChat.prototype.hasRosterAddr = function(addr) {
	return this._rosterItemList.getByAddr(addr);
};

// TODO: remove suport for index being null!
ZmChat.prototype.getRosterItem = function(index) {
	if (index == null) index = 0;
	return this._rosterItemList.getArray()[index];
};

ZmChat.prototype.getIcon = function() {
	return this.getRosterItem().getPresence().getIcon();
};

ZmChat.prototype.getTitle = function() {
	// return this.getRosterItem(0).getDisplayName(); // XXX
	return [ZmMsg.zimbraTitle, AjxMessageFormat.format(ZmMsg.chatWith, [ this.getRosterItem(0).getDisplayName() ])].join(": ");
};

ZmChat.prototype.getStatusTitle = function() {

};

// add message from notification...
ZmChat.prototype.addMessage = function(msg) {
	this.messages.push(msg);
	this._historyIndex = this.messages.length;
	var fields = {};
	fields[ZmChat.F_MESSAGE] = msg;
	this._notify(ZmEvent.E_MODIFY, {fields: fields});
	// list notify as well?
};

ZmChat.prototype.resetUnread = function() {
	this._unread = 0;
	if (this.getRosterSize() == 1) {
		this.getRosterItem(0).setUnread(0);
	}
};

ZmChat.prototype.getUnread = function() {
	return this._unread;
};

// can't increment in addMessage because this chat might be visible
// and active, so the message is "instantly read".
ZmChat.prototype.incUnread = function() {
	++this._unread;
	if (this.getRosterSize() == 1) {
		this.getRosterItem(0).setUnread(this._unread);
	}
	return this._unread;
};

ZmChat.prototype.sendClose = function() {
	if (this._thread) {
		ZmImApp.INSTANCE.getService().closeChat(this);
	}
};

ZmChat.prototype.sendMessage = function(text, html, typing) {
	var args = {
		callback: this._sendMessageCallbackObj,
		noBusyOverlay: true
	};
	ZmImApp.INSTANCE.getService().sendMessage(this, text, html, typing, args);
	// TODO: error handling
	if (text || html) {
		var bodyJson = html ? { _content: html, html: true } : { _content: text, html: false } 
		var jsonObj = {
			thread	: this._thread,
			from 	: AjxDispatcher.run("GetRoster").getMyAddress(),
			to		: this.getRosterItem(0).getAddress(),
			ts		: new Date().getTime(),
			body	: [bodyJson]
		};
		var msg = new ZmChatMessage(jsonObj, true, false);
	}
	return msg;
};

ZmChat.prototype.sendByEmail = function(mode) {
	var emails = this._rosterItemList.getVector()
		.map("getContact")
		.map("getEmail")
		.join(AjxEmailAddress.SEPARATOR);
        var text, messages = AjxVector.fromArray(this.messages);
        if (mode == DwtHtmlEditor.HTML) {
                text = messages.map("toHtml").join("<br/>");
        } else {
                text = messages.map("toText").join("\n");
        }
	AjxDispatcher.run("Compose", { action	     : ZmOperation.NEW_MESSAGE,
				       toOverride    : emails,
				       subjOverride  : this.getTitle(),
                                       composeMode   : mode,
				       extraBodyText : text
				     });
};

ZmChat.prototype.getHistory = function(dir) {
	while (true) {
		this._historyIndex += dir;
		if (this._historyIndex < 0)
			this._historyIndex = -1;
		if (this._historyIndex >= this.messages.length)
			this._historyIndex = this.messages.length;
		var msg = this.messages[this._historyIndex];
		if (!msg || msg.fromMe)
			break;
	}
	return msg && msg.body;
};

// stash the thread
ZmChat.prototype._sendMessageCallback = function(result) {
	try {
		var response = result.getResponse();
		this.setThread(response.IMSendMessageResponse.thread);
	} catch (ex) {
		// TODO: better handling
		appCtxt.setStatusMsg(ex, ZmStatusView.LEVEL_CRITICAL);
	}
};
