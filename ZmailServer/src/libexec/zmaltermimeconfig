#!/usr/bin/perl
# 
# ***** BEGIN LICENSE BLOCK *****
# Zimbra Collaboration Suite Server
# Copyright (C) 2009, 2010, 2011, 2012 VMware, Inc.
# 
# The contents of this file are subject to the Zimbra Public License
# Version 1.3 ("License"); you may not use this file except in
# compliance with the License.  You may obtain a copy of the License at
# http://www.zimbra.com/license.
# 
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.
# ***** END LICENSE BLOCK *****
# 
use strict;
use lib qw(/opt/zmail/zmailmon/lib /opt/zmail/libexec/scripts);
use Net::DNS;
use Socket;
use Net::LDAP;
use Getopt::Long;

my (%c,%loaded,%saved,$rc);
my ($help, $verbose, $force);

my (undef, undef,$uid,$gid) = getpwnam('zmail');
if ($> ne $uid) {
  print "Must be run as user zmail.\n";
  &usage
}

my $opts_good = GetOptions("help" => \$help, 
    "force" => \$force,
    "verbose+" => \$verbose);

if (!$opts_good) {
  print STDERR "\n";
  usage();
}

&usage if ($help);

$c{zmlocalconfig}="/opt/zmail/bin/zmlocalconfig";
$c{zmail_home} = getLocalConfig("zmail_home");
$c{zmprov}="$c{zmail_home}/bin/zmprov -l --";

# ***** Main *****
my $ldappass = `$c{zmlocalconfig} -s -m nokey zmail_ldap_password`;
my $ldapdn  = `$c{zmlocalconfig} -s -m nokey zmail_ldap_userdn`;
my $ldapurl  = `$c{zmlocalconfig} -s -m nokey ldap_url`;
chop($ldappass);
chop($ldapdn);
chop($ldapurl);

my $ldap = Net::LDAP->new( $ldapurl ) or die "Error connecting to LDAP server: $ldapurl";
my $mesg = $ldap->bind( $ldapdn, password => $ldappass );
$mesg->code && die "Error binding to LDAP server: $mesg->error";

my $ldapquery = "(objectClass=zmailGlobalConfig)";
$mesg = $ldap->search(
                  base => '',
                  filter => $ldapquery,
                  attrs => [
                      'zmailDomainMandatoryMailSignatureEnabled',
                      'zmailDomainMandatoryMailSignatureText',
                      'zmailDomainMandatoryMailSignatureHTML'
                  ]
              );
my $i = 0;
my $enabled = $mesg->entry($i)->get_value('zmailDomainMandatoryMailSignatureEnabled');
print "Getting global config zmailDomainMandatoryMailSignatureEnabled=$enabled\n";

if (lc($enabled) eq "true") {
  my $text = $mesg->entry($i)->get_value('zmailDomainMandatoryMailSignatureText');
  my $html = $mesg->entry($i)->get_value('zmailDomainMandatoryMailSignatureHTML');
  writeFile("$c{zmail_home}/data/altermime/global-default.txt", "$text");
  writeFile("$c{zmail_home}/data/altermime/global-default.html", "$html");
}

exit 0;
# ***** End Main *****


# ***** Subroutines *****
sub usage {
  print "\n";
  print "Usage: $0 [-h] [-f] [-v]\n";
  print " -h|--help: print this usage statement.\n";
  print " -f|--force: Force the rename, bypassing safety checks.\n";
  print " -v|--verbose: Set the verbosity level.\n";
  print "\n";
  exit 1; 
}

sub writeFile($$) {
  my ($file, $content) = @_;
  open(DATA, ">$file");
  print DATA "$content";
  print DATA "\n";
  close(DATA);
}

sub getLocalConfig {
  my ($key,$force) = @_;

  return $loaded{lc}{$key}
    if (exists $loaded{lc}{$key} && !$force);
  print "Getting local config $key=";
  my $val = `$c{zmlocalconfig} -x -s -m nokey ${key} 2> /dev/null`;
  chomp $val;
  $loaded{lc}{$key} = $val;
  print "$val\n"; 
  return $val;
}

