#!/usr/bin/perl
# 
# ***** BEGIN LICENSE BLOCK *****
# Zimbra Collaboration Suite Server
# Copyright (C) 2011, 2012 VMware, Inc.
# 
# The contents of this file are subject to the Zimbra Public License
# Version 1.3 ("License"); you may not use this file except in
# compliance with the License.  You may obtain a copy of the License at
# http://www.zimbra.com/license.
# 
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.
# ***** END LICENSE BLOCK *****
# 
use strict;
use lib '/opt/zmail/zmailmon/lib';
use Net::LDAP;
use XML::Simple;
use Getopt::Long;
use File::Copy qw/ cp /;
use File::Path;

if ( ! -d "/opt/zmail/openldap/etc" ) {
  print "ERROR: openldap does not appear to be installed - exiting\n";
  exit(1);
}

my $id = getpwuid($<);
chomp $id;
if ($id ne "zmail") {
    print STDERR "Error: must be run as zmail user\n";
    exit (1);
}
my ($help,$masterURI,$rid,$tls,$replEntry,$entryURI,$entryRID);
$rid=0;
$masterURI=0;
$tls=0;

my $opts_good = GetOptions(
        'h|help' => \$help,
        'm|master=s' => \$masterURI,
        'r|rid=i' => \$rid,
        't|tls=s' => \$tls,
);

if (!$opts_good) {
        print STDERR "\n";
        usage();
}
if ($help) {
        usage(0);
}

if ($masterURI && $masterURI !~ /^ldaps?:\/\//) {
  usage(0);
}

if ($masterURI && $masterURI !~ /\/$/) {
  usage(0);
}

if ($tls && $tls ne "critical" && $tls ne "off") {
  usage(0);
}

my $localxml = XMLin("/opt/zmail/conf/localconfig.xml");
my $ldap_root_password = $localxml->{key}->{ldap_root_password}->{value};
chomp($ldap_root_password);
my $ldap_is_master = $localxml->{key}->{ldap_is_master}->{value};
chomp($ldap_is_master);
my $zmail_home = $localxml->{key}->{zmail_home}->{value};
my $ldap_replication_password = $localxml->{key}->{ldap_replication_password}->{value};
my $ldap_starttls_supported = $localxml->{key}->{ldap_starttls_supported}->{value};
my $zmail_require_interprocess_security = $localxml->{key}->{zmail_require_interprocess_security}->{value};

if(lc($ldap_is_master) eq "true") {
  usage(0);
}

if ($zmail_home eq "") {
   $zmail_home = "/opt/zmail";
}

if(lc($ldap_is_master) ne "true") {
  my $ldap = Net::LDAP->new('ldapi://%2fopt%2fzmail%2fopenldap%2fvar%2frun%2fldapi/') or die "$@";
  my $mesg = $ldap->bind("cn=config", password=>"$ldap_root_password");
  $mesg->code && die "Bind: ". $mesg->error . "\n"; 

  my $bdn="olcDatabase={2}mdb,cn=config";
  $mesg = $ldap->search(
            base => "$bdn",
            filter => "(olcSyncrepl=*)",
            attrs => ['olcSyncrepl']
  );
  my $size = $mesg->count;
  if ($size > 0) {
    my $entry=$mesg->entry(0);
    $replEntry= $entry->get_value('olcSyncRepl');
    my $junk;
    ($junk, $entryRID) = split (/rid=/, $replEntry, 2);
    ($junk, $entryURI) = split (/provider=/, $entryRID, 2);
    ($entryRID, $junk) = split (/ /, $entryRID, 2);
    ($entryURI, $junk) = split (/ /, $entryURI, 2);
  }

  if ($tls) {
    if ($masterURI && $masterURI !~ /^ldaps/) {
      if ($tls eq "critical") {
        $tls="starttls=critical";
      }
    } else {
      if ($tls eq "critical" && $entryURI !~ /^ldaps/) {
        $tls="starttls=critical";
      }
    }
  } else {
    if ($masterURI && $masterURI !~ /^ldaps/) {
      if ($ldap_starttls_supported && $zmail_require_interprocess_security) {
        $tls="starttls=critical";
      }
    } else {
      if ($entryURI !~ /^ldaps/) {
        if ($ldap_starttls_supported && $zmail_require_interprocess_security) {
          $tls="starttls=critical";
        }
      }
    }
  }

  if ($tls =~ /starttls/ && $replEntry !~ /starttls/) {
    $replEntry =~ s/filter=/$tls filter=/;
  } elsif ($tls !~ /starttls/ && $replEntry =~ /starttls/) {
    $replEntry =~ s/starttls=critical //;
  }

  if ($masterURI) {
    $replEntry =~ s/provider=$entryURI/provider=$masterURI/;
  }

  if ($rid) {
    $replEntry =~ s/rid=$entryRID/rid=$rid/;
  }

  my $err;

  $mesg = $ldap->modify(
    $bdn,
    replace=>{olcSyncrepl=>"$replEntry"},
  );
  $err=$mesg->code;

  if ($masterURI) {
    $mesg = $ldap->modify(
      $bdn,
      replace=>{olcUpdateRef=>"$masterURI"},
    );
    if ($err == 0) {
      $err=$mesg->code;
    }
  }
  $ldap->unbind;
  exit($err);
}

sub usage {

        my ($msg) = (@_);

        $msg && print STDERR "\nERROR: $msg\n";
        print STDERR <<USAGE;
  zmldapreplicatool [-r RID] [-m masterURI] [-t critical|off]

  Where:
  -r: RID is a unique Integer Replication ID for this replication instance.  It must be unique inside this server.  Example: 100 Default: 100.  Generally no need to change this.
  -m: masterURI is the LDAP URI for the master.  Example: ldap://ldap-master.example.com:389/
  -t: set startTLS to critical (required) or off (disabled)

USAGE
        exit (1);
}

