#!/bin/bash
# 
# ***** BEGIN LICENSE BLOCK *****
# Zimbra Collaboration Suite Server
# Copyright (C) 2011, 2012 VMware, Inc.
# 
# The contents of this file are subject to the Zimbra Public License
# Version 1.3 ("License"); you may not use this file except in
# compliance with the License.  You may obtain a copy of the License at
# http://www.zimbra.com/license.
# 
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.
# ***** END LICENSE BLOCK *****
# 

if [ x`whoami` != "xroot" ]; then
  echo "$0 must be run as user root"
  exit 1
fi
umask 027

platform=$(/opt/zimbra/libexec/get_plat_tag.sh 2> /dev/null := UNKNOWN)
source /opt/zimbra/bin/zmshutil || exit 1
zmsetvars -f \
  zimbra_home \
  zimbra_log_directory \
  zimbra_server_hostname \
  zimbra_tmp_directory \
  zimbra_java_home \
  zimbra_uid \
  zimbra_gid \
  zimbra_zmcertmgr_expiration_threshold \
  ldap_is_master \
  ldap_host \
  mailboxd_directory \
  mailboxd_server \
  mailboxd_keystore \
  mailboxd_keystore_password \
  mailboxd_truststore_password \
  postfix_smtpd_tls_cert_file \
  postfix_smtpd_tls_key_file
  
export JAVA_HOME=${zimbra_java_home}

java_version=$(${zimbra_java_home}/bin/java -version 2>&1 | grep "java version" | sed -e 's/"//g' | awk '{print $NF}' | awk -F_ '{print $1}')
if [ x"$java_version" = "x1.6.0" ]; then
  java_options="-XX:ErrorFile=${zimbra_home}/log"
else
  java_options=""
fi

zimbra_home=${zimbra_home:=/opt/zimbra}
zimbra_conf_directory=${zimbra_home}/conf
exp_thres_days=${zimbra_zmcertmgr_expiration_threshold:=30}
exp_thres_secs=$(($exp_thres_days*24*60*60))

zimbra_domain_cert_directory=${zimbra_conf_directory}/domaincerts

if [ -x "${zimbra_home}/openssl/bin/openssl" ]; then
  openssl=${zimbra_home}/openssl/bin/openssl
else
  openssl=openssl
fi

# this avoid "unable to write 'random state' errors from openssl
export RANDFILE=${zimbra_home}/ssl/.rnd

#OUTPUT_PREFIX="##### OUTPUT:"
ERROR_PREFIX="XXXXX ERROR:"

isLdapRunning() {

  su - zimbra -c "/opt/zimbra/bin/ldap status > /dev/null 2>&1"
  LDAP_IS_RUNNING=$?
  
}

saveConfigKey() {
  local key=$1
  local file=$2
  local location=$3
  local content=`cat ${file}`
  if [ $location = "global" ]; then
    local zmprov_opts="mcf"
  elif [ $location = "server" ]; then
    local zmprov_opts="ms ${zimbra_server_hostname}"
  elif [ $location = "domain" ]; then
    local domain=$4
    local zmprov_opts="md ${domain}"
  else 
    echo "Unknown config section $location"
    return
  fi

  echo -n "** Saving $location config key $key..."
  su - zimbra -c "${zimbra_home}/bin/zmprov -m -l -- ${zmprov_opts} ${key} \"$content\" 2> /dev/null"
  if [ $? = 0 ]; then
    echo "done."
  else
    echo "failed."
  fi
}

cleanConfigKey() {
  local key=$1
  local location=$2
  if [ $location = "global" ]; then
    local zmprov_opts="mcf"
  elif [ $location = "server" ]; then
    local zmprov_opts="ms ${zimbra_server_hostname}"
  elif [ $location = "domain" ]; then
    local domain=$3
    local zmprov_opts="md ${domain}"
  else 
    echo "Unknown config section $location"
    return
  fi

  echo -n "** Clean $location config key $key..."
  su - zimbra -c "${zimbra_home}/bin/zmprov -m -l -- ${zmprov_opts} ${key} \"\" 2> /dev/null"
  if [ $? = 0 ]; then
    echo "done."
  else
    echo "failed."
  fi
}


loadConfigKey() {
  local key=$1
  local file=$2
  local location=$3
  if [ $location = "global" ]; then
    local zmprov_opts="gacf"
  elif [ $location = "server" ]; then
    local server=$4
    if [ x"${server}" = "x" ]; then
      server=${zimbra_server_hostname}
    fi
    local zmprov_opts="gs ${server}"
  elif [ $location = "domain" ]; then
    local domain=$4
    local zmprov_opts="gd ${domain}"
  else 
    echo "Unknown config section $location"
    return
  fi
  TMPDIR=${zimbra_tmp_directory}
  local tmpfile=`mktemp -t zmcertmgr.XXXXXX 2> /dev/null` || (echo "Failed to create tmpfile" && exit 1)
  chown ${zimbra_uid} ${tmpfile}
  if [ ! -s ${file} ]; then
    echo -n "** Retrieving $location config key $key..."
    su - zimbra -c "${zimbra_home}/bin/zmprov -m -l -- ${zmprov_opts} ${key} | sed  -e 's/^${key}: //' > ${tmpfile} 2> /dev/null" 2>/dev/null && mv -f ${tmpfile} ${file} 2> /dev/null
    if [ $? = 0 -a -s "${file}" ]; then
      chown ${zimbra_uid} ${file} 2> /dev/null
      chmod 400 ${file} 2> /dev/null
      echo "done."
    else
      echo "failed."
    fi
  fi
  rm -f ${tmpfile} 2> /dev/null
}

deployCerts() {
  if [ "x$1" = "x-force" ]; then
    rm -rf ${zimbra_domain_cert_directory} > /dev/null 2>&1
  fi
  
  DOMAINS=$(su - zimbra -c "${zimbra_home}/bin/zmprov -m -l -- garpd | awk '{print \$1}'")
  if [ $? != 0 ]; then
    echo "Unable to retrieve list of domains with SSL certificates";
    exit 1
  fi
  
  for i in ${DOMAINS}; do
    echo -n "** Deploying cert for ${i}..."
    getClientCertFromLdap $i > /dev/null 2>&1
    if [ $? = 0 ]; then
      echo "done."
    else
      echo "failed."
    fi
    
  done
}

saveClientCertToLdap() {
  target=$1
  current_crt=$2
  if [ ! -e ${current_crt} ]; then
    echo "$ERROR_PREFIX Certificate file ${current_crt} does not exist."
    return
  fi
  
  if [ x"$target" = "xglobal" ]; then
    saveConfigKey "zimbraReverseProxyClientCertCA" ${current_crt} "global"
    return
  fi

  if [ x"$target" = "xserver" ]; then
    saveConfigKey "zimbraReverseProxyClientCertCA" ${current_crt} "server"
    return
  fi

  domain=$target
  
  if [ x"$domain" = "x" ]; then
    echo "$ERROR_PREFIX Domain must be specified."
    return
  fi

  saveConfigKey "zimbraReverseProxyClientCertCA" ${current_crt} "domain" ${domain}
}

cleanClientCertFromLdap() {
  target=$1
  if [ x"$target" = "xglobal" ]; then
    cleanConfigKey "zimbraReverseProxyClientCertCA" "global"
    return
  fi

  if [ x"$target" = "xserver" ]; then
    cleanConfigKey "zimbraReverseProxyClientCertCA" "server"
    return
  fi

  domain=$target
  
  if [ x"$domain" = "x" ]; then
    echo "$ERROR_PREFIX Domain must be specified."
    return
  fi

  cleanConfigKey "zimbraReverseProxyClientCertCA" "domain" ${domain}
}


getClientCertFromLdap() {
  domain=$1
  if [ x"$domain" = "x" ]; then
    echo "$ERROR_PREFIX Domain must be specified"
  fi
  if [ ! -d ${zimbra_domain_cert_directory} ]; then
    mkdir -p ${zimbra_domain_cert_directory}
  fi
  chown ${zimbra_uid}:${zimbra_gid} ${zimbra_domain_cert_directory} 2> /dev/null
  chmod 755 ${zimbra_domain_cert_directory} 2> /dev/null
  current_crt=${zimbra_domain_cert_directory}/${domain}.client.crt

  loadConfigKey "zimbraReverseProxyClientCertCA" ${current_crt} "domain" ${domain}
}

###Main Execution###

usage () {
  echo "Usage: "
  echo "  $0 -h | --help"
  echo "  $0 savecrt <domain> <cert file>"
  echo "  $0 savecrt server <cert file>"
  echo "  $0 savecrt global <cert file>"
  echo "  $0 cleancrt <domain>"
  echo "  $0 cleancrt server"
  echo "  $0 cleancrt global"
  echo
  
  exit 1;
}


if [ $# = 0 ]; then
  usage
fi

ACTION=$1
shift

# check for valid usage
if [ x"$ACTION" = "xsavecrt" ]; then
  saveClientCertToLdap $@
elif [ x"$ACTION" = "xcleancrt" ]; then
  cleanClientCertFromLdap $@
elif [ x"$ACTION" = "x-help" -o x"$ACTION" = "xhelp" -o x"$ACTION" = "x-h" -o x"$ACTION" = "x--help" ]; then
  usage 
else
  usage
fi

exit 0 

