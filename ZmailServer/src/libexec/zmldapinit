#!/usr/bin/perl
# 
# ***** BEGIN LICENSE BLOCK *****
# Zimbra Collaboration Suite Server
# Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012 VMware, Inc.
# 
# The contents of this file are subject to the Zimbra Public License
# Version 1.3 ("License"); you may not use this file except in
# compliance with the License.  You may obtain a copy of the License at
# http://www.zimbra.com/license.
# 
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.
# ***** END LICENSE BLOCK *****
# 

# Add entries to or update master LDAP server
#
# Exit values
#
# 0 - success
# 1 - ldap start failed
# 2 - ldapmodify failed

use strict;
use lib "/opt/zmail/zmailmon/lib";
use Zmail::Util::Common;
use Getopt::Std;
use Net::LDAP;
use Net::LDAP::LDIF;
use Net::LDAP::Entry;
use Crypt::SaltedHash;
use MIME::Base64;
use File::Grep qw (fgrep);

our %options=();
our %loaded=();
our %saved=();

my $zmail_home=getLocalConfig("zmail_home");
my $zmail_user=getLocalConfig("zmail_user");
my $zmail_tmp_directory=getLocalConfig("zmail_tmp_directory");
my $ldap_master_url=getLocalConfig("ldap_master_url");
my $ldap_starttls_supported=getLocalConfig("ldap_starttls_supported");
my $source_config_dir="/opt/zmail/openldap/etc/openldap";
my $config_dir="/opt/zmail/conf";
my $ldap_config_dir="/opt/zmail/data/ldap/config/cn\=config";

if ($#ARGV== -1) {
	setLocalConfigRandom("ldap_root_password");
	setLocalConfigRandom("zmail_ldap_password");
} elsif ($#ARGV == 1) {
	my $ldap_root_pw = shift;
	my $ldap_admin_pw = shift;
	setLocalConfig("ldap_root_password", "$ldap_root_pw");
	setLocalConfig("zmail_ldap_password", "$ldap_admin_pw");
} else {
	print "Wrong number of arguments, exiting\n";
	exit;
}

setLocalConfig("ldap_is_master","true");

my $zmail_ldap_userdn=getLocalConfig("zmail_ldap_userdn");
my $zmail_ldap_password=getLocalConfig("zmail_ldap_password");
my $ldap_root_password=getLocalConfig("ldap_root_password");
my $zmail_server_hostname=getLocalConfig("zmail_server_hostname");

# Get the SHA password.
my $ctx = Crypt::SaltedHash->new(algorithm => 'SHA-1');
$ctx->add("$ldap_root_password");
my $root_ssha_password = $ctx->generate;

$ctx = Crypt::SaltedHash->new(algorithm => 'SHA-1');
$ctx->add("$zmail_ldap_password");
my $zmail_ssha_password = $ctx->generate;

# Update config database
#
my $infile="$ldap_config_dir/olcDatabase\=\{0\}config.ldif";
my $outfile="$zmail_tmp_directory/olcDatabase\=\{0\}config.ldif.$$";
my $mime_root_passwd=MIME::Base64::encode($root_ssha_password);
chomp ($mime_root_passwd);
open(IN,"<$infile");
open(OUT,">$outfile");
while (<IN>) {
  if ($_ =~ /^olcRootPW/) {
    $_ =~ s|^olcRootPW.*|olcRootPW:: $mime_root_passwd|;
    print OUT $_;
  } else {
    print OUT $_;
  }
}
close IN;
close OUT;
if ( -s $outfile ) {
  my $rc=0xffff & system("/bin/mv -f $outfile $infile");
  if ($rc != 0) {
    print "Warning: failed to write $infile\n";
  }
  `chown $zmail_user:$zmail_user $infile`;
  `chmod 600 $infile`;
} else {
  print "Warning: Failed to update root password.\n";
}

# Update zmail.ldif
$infile = "$source_config_dir/zmail.ldif";
$outfile = "$config_dir/zmail.ldif";
my $ldifin = Net::LDAP::LDIF->new( "$infile", "r", onerror => 'undef' );
my $ldifout = Net::LDAP::LDIF->new("$outfile", "w", onerror => 'undef' );
while( not $ldifin->eof()) {
  my $entry = $ldifin->read_entry ( );
  if ( $ldifin->error ( ) ) {
    print "Error msg: ", $ldifin->error ( ), "\n";
    print "Error lines:\n", $ldifin->error_lines ( ), "\n";
  } elsif ( $entry ) {
      if ($entry->dn() eq "uid=zmail,cn=admins,cn=zmail") {
        $entry->replace (
          userPassword => "$zmail_ssha_password",
        );
      }
    $ldifout->write($entry);
  }
}
$ldifin->done ( );
$ldifout->done ( );

# Start ldap

my $rc=`${zmail_home}/bin/ldap start`;

if ( $rc eq 0 ) {
	exit 1;
}

my $ldap = Net::LDAP->new("$ldap_master_url")  or  die "$@";

# startTLS Operation
my $mesg;
if ($ldap_master_url !~ /^ldaps/i) {
  if ($ldap_starttls_supported) {
    $mesg = $ldap->start_tls(
         verify => 'none',
         capath => "$zmail_home/conf/ca",
         ) or die "start_tls: $@";
    $mesg->code && die "TLS: " . $mesg->error . "\n";
  }
}

$mesg = $ldap->bind("cn=config", password=>"$ldap_root_password");

$infile = "$config_dir/zmail.ldif";
$ldifin = Net::LDAP::LDIF->new("$infile", "r", onerror => 'undef' );
while ( not $ldifin->eof() ) {
    my $entry = $ldifin->read_entry();
    if ( $ldifin->error() ) {
      print "Error msg: ", $ldifin->error ( ), "\n";
      print "Error lines:\n", $ldifin->error_lines ( ), "\n";
    } elsif ( $entry ) {
      $entry->changetype("add");
      $entry->update($ldap);
    }
}

$infile = "$source_config_dir/zmail_globalconfig.ldif";
$ldifin = Net::LDAP::LDIF->new("$infile", "r", onerror => 'undef' );
while ( not $ldifin->eof() ) {
    my $entry = $ldifin->read_entry();
    if ( $ldifin->error() ) {
      print "Error msg: ", $ldifin->error ( ), "\n";
      print "Error lines:\n", $ldifin->error_lines ( ), "\n";
    } elsif ( $entry ) {
      $entry->changetype("add");
      $entry->update($ldap);
    }
}

$infile = "$source_config_dir/zmail_defaultcos.ldif";
$ldifin = Net::LDAP::LDIF->new("$infile", "r", onerror => 'undef' );
while ( not $ldifin->eof() ) {
    my $entry = $ldifin->read_entry();
    if ( $ldifin->error() ) {
      print "Error msg: ", $ldifin->error ( ), "\n";
      print "Error lines:\n", $ldifin->error_lines ( ), "\n";
    } elsif ( $entry ) {
      $entry->changetype("add");
      $entry->update($ldap);
    }
}

$infile = "$source_config_dir/zmail_defaultexternalcos.ldif";
$ldifin = Net::LDAP::LDIF->new("$infile", "r", onerror => 'undef' );
while ( not $ldifin->eof() ) {
    my $entry = $ldifin->read_entry();
    if ( $ldifin->error() ) {
      print "Error msg: ", $ldifin->error ( ), "\n";
      print "Error lines:\n", $ldifin->error_lines ( ), "\n";
    } elsif ( $entry ) {
      $entry->changetype("add");
      $entry->update($ldap);
    }
}

if (-f "/opt/zmail/conf/ldap/zmail_mimehandlers.ldif") {
  $infile = "/opt/zmail/conf/ldap/zmail_mimehandlers.ldif";
} else {
  $infile = "$source_config_dir/zmail_mimehandlers.ldif";
}
$ldifin = Net::LDAP::LDIF->new("$infile", "r", onerror => 'undef' );
while ( not $ldifin->eof() ) {
    my $entry = $ldifin->read_entry();
    if ( $ldifin->error() ) {
      print "Error msg: ", $ldifin->error ( ), "\n";
      print "Error lines:\n", $ldifin->error_lines ( ), "\n";
    } elsif ( $entry ) {
      $entry->changetype("add");
      $entry->update($ldap);
    }
}

if ( -d "/opt/zmail/lib/conf/" ) {
    opendir(DIR, "/opt/zmail/lib/conf") || die "can't opendir /opt/zmail/lib/conf: $!";
    while (my $file = readdir(DIR)) {
       next unless (-f "/opt/zmail/lib/conf/$file");
       next unless ( $file =~ m/ldif$/);
       $infile = "/opt/zmail/lib/conf/$file";
       $ldifin = Net::LDAP::LDIF->new("$infile", "r", onerror => 'undef' );
       while ( not $ldifin->eof() ) {
            my $entry = $ldifin->read_entry();
            if ( $ldifin->error() ) {
              print "Error msg: ", $ldifin->error ( ), "\n";
              print "Error lines:\n", $ldifin->error_lines ( ), "\n";
            } elsif ( $entry ) {
              $entry->update($ldap);
            }
       }
    }
    closedir DIR;
}

exit 0;

sub setLocalConfig {
  my $key = shift;
  my $val = shift;

  if (exists $main::saved{lc}{$key} && $main::saved{lc}{$key} eq $val) {
    return;
  }
  $main::saved{lc}{$key} = $val;
  `/opt/zmail/bin/zmlocalconfig -f -e ${key}=\'${val}\' 2> /dev/null`;
}

sub setLocalConfigRandom {
  my $key = shift;
  `/opt/zmail/bin/zmlocalconfig -f -e -r ${key} 2> /dev/null`;
}

sub getLocalConfig {
  my $key = shift;

  return $main::loaded{lc}{$key}
    if (exists $main::loaded{lc}{$key});

  my $val = `/opt/zmail/bin/zmlocalconfig -x -s -m nokey ${key} 2> /dev/null`;
  chomp $val;
  $main::loaded{lc}{$key} = $val;
  return $val;
}
