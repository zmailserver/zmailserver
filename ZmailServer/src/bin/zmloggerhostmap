#!/usr/bin/perl
# 
# ***** BEGIN LICENSE BLOCK *****
# Zimbra Collaboration Suite Server
# Copyright (C) 2009, 2010, 2012 VMware, Inc.
# 
# The contents of this file are subject to the Zimbra Public License
# Version 1.3 ("License"); you may not use this file except in
# compliance with the License.  You may obtain a copy of the License at
# http://www.zimbra.com/license.
# 
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.
# ***** END LICENSE BLOCK *****
# 
use strict;
use warnings;
use lib qw(/opt/zmail/zmailmon/lib /opt/zmail/zmailmon/rrdtool/lib/perl);
use DBI;
use Zmail::Mon::Zmstat;
use Getopt::Std;

Zmail::Mon::Zmstat::getLocalConfig();
my $logger_directory     = $Zmail::Mon::Zmstat::LC{'logger_data_directory'};
my $logger_rrd_directory = "$logger_directory/rrds";

sub list_hosts($) {
    my $dbh = shift @_;
    my $sth = $dbh->prepare("SELECT dns_hostname, zm_hostname FROM hosts");
    $sth->execute;
    die $sth->err if $sth->err;
    my $ref = $sth->fetchall_hashref('dns_hostname');
    my ($host, $zmhost);
    format STDOUT_TOP =
Zmail Logger Service Hostname Map

---------------------    --------------------- 
DNS Hostname             Zmail Hostname
---------------------    ---------------------
.
    format STDOUT =
@<<<<<<<<<<<<<<<<<<<<    @<<<<<<<<<<<<<<<<<<<<   
$host,                   $zmhost
.
    foreach $host (keys %$ref) {
        $zmhost = $ref->{$host}->{'zm_hostname'};
        write;
    }
    exit;
}

sub usage() {
    print STDERR <<'EOF';
Usage: zmloggerhostmap [-adh] <dns_hostname> <zm_hostname>
  -a        - create a new host mapping
  -d        - delete a host mapping (specify both names to prevent accidents)
  -h        - show this help
EOF
    exit(1);
}

sub map_host($$$) {
    my ($dbh, $dns_hostname, $zm_hostname) = @_;
    my $sth = $dbh->prepare(q{
        UPDATE hosts SET zm_hostname = ? WHERE dns_hostname = ?
    });
    my $rows = $sth->execute($zm_hostname, $dns_hostname);
    die $sth->err if $sth->err;
    die "Hostname $dns_hostname does not exist" if ($rows != 1);
    print "Mapped $dns_hostname to $zm_hostname\n";
}

sub insert_host($$$) {
    my ($dbh, $dns_hostname, $zm_hostname) = @_;
    my $sth = $dbh->prepare(q{
            INSERT INTO hosts (dns_hostname,zm_hostname) VALUES (?,?)
    });
    my $rows = $sth->execute($dns_hostname, $zm_hostname);
    die $sth->errstr if ($sth->err);
    die "Unable to insert mapping" if ($rows == 0);
    print "Added mapping for $dns_hostname to $zm_hostname\n";
}
sub delete_host($$$) {
    my ($dbh, $dns_hostname, $zm_hostname) = @_;
    my $sth = $dbh->prepare(q{
        DELETE FROM hosts WHERE zm_hostname = ? AND dns_hostname = ?
    });
    my $rows = $sth->execute($zm_hostname, $dns_hostname);
    die $sth->err if $sth->err;
    die "Host mapping $dns_hostname:$zm_hostname does not exist"
            if ($rows != 1);
    print "Deleted mapping for $dns_hostname to $zm_hostname\n";
}

sub run() {
    my %options;
    my $hostid = -1;
    getopts('had', \%options);

    usage() if ($options{h});
    my $dbh = DBI->connect(
            "dbi:SQLite:dbname=$logger_directory/logger.sqlitedb", "", "");

    list_hosts($dbh) if (@ARGV == 0);
    usage() if (@ARGV != 2);
    if ($options{a}) {
        insert_host($dbh, shift @ARGV, shift @ARGV);
    } elsif ($options{d}) {
        delete_host($dbh, shift @ARGV, shift @ARGV);
    } else {
        map_host($dbh, shift @ARGV, shift @ARGV);
    }

    $dbh->disconnect;
}

run();
