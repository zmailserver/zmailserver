#!/bin/bash
# 
# ***** BEGIN LICENSE BLOCK *****
# Zimbra Collaboration Suite Server
# Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010, 2012 VMware, Inc.
# 
# The contents of this file are subject to the Zimbra Public License
# Version 1.3 ("License"); you may not use this file except in
# compliance with the License.  You may obtain a copy of the License at
# http://www.zimbra.com/license.
# 
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.
# ***** END LICENSE BLOCK *****
# 


source `dirname $0`/zmshutil || exit 1
zmsetvars \
    zimbra_home \
    zimbra_tmp_directory \
    zimbra_log_directory

configfile=${zimbra_home}/conf/logswatchrc
pidfile=${zimbra_log_directory}/logswatch.pid
zmrrdfetchpidfile=${zimbra_log_directory}/zmrrdfetch-server.pid
zmrrdfetchpid=""
logfile=${zimbra_log_directory}/zmlogswatch.out
pid=""
os=$(uname -s)

getpid()
{
  if [ -f ${pidfile} ]; then
    pid=$(cat ${pidfile})
  fi
  if [ -f ${zmrrdfetchpidfile} ]; then
    zmrrdfetchpid=$(cat ${zmrrdfetchpidfile})
  fi
}

checkrunning()
{
  getpid
  if [ "x$pid" = "x" ]; then
    running=0
  else
    kill -0 $pid 2> /dev/null
    if [ $? != 0 ]; then
      pid=""
      running=0
    else
      running=1
    fi
  fi
}

case "$1" in 
  start)
    if [ ! -f ${configfile} ]; then
      echo "${configfile} is missing."
      exit 0
    fi

    checkrunning
    echo -n "Starting logswatch..."
    if [ $running = 1 ]; then
      echo "logswatch is already running."
      exit 0
    fi

    ${zimbra_home}/bin/zmprov -l gs `${zimbra_home}/bin/zmhostname` zimbraServiceEnabled | grep -qw logger
    if [ $? = 1 ]; then
        echo "zimbra logger service is not enabled!  failed."
        exit 1
    fi

    if [ ! -d ${zimbra_tmp_directory} ]; then
      mkdir -p ${zimbra_tmp_directory} > /dev/null 2>&1
    fi

    ${zimbra_home}/libexec/logswatch --config-file=${configfile} \
      --use-cpan-file-tail --pid-file=${pidfile} --daemon \
      --script-dir=${zimbra_tmp_directory} \
      -t /var/log/zimbra-stats.log > $logfile 2>&1
    for ((i=0; i < 30; i++)); do
      checkrunning
      if [ $running = 1 ]; then
        break
      fi
      sleep 1
    done
    if [ "x$pid" != "x" ]; then
      echo "done."
      exit 0
    else
      echo "failed."
      exit 1
    fi
  ;;
  stop)
    checkrunning
    echo -n "Stopping logswatch..."
    if [ $running = 0 ]; then
      echo "logswatch is not running."
      exit 0
    else
      for ((i = 0; i < 30; i++)); do
          if [ -z "$zmrrdfetchpid" ]; then
              break;
          fi
          kill -0 $zmrrdfetchpid 2> /dev/null
          if [ $? != 0 ]; then
              rm -f ${zmrrdfetchpidfile}
              break;
          fi
          kill $zmrrdfetchpid 2> /dev/null
          sleep 1
      done
      if [ -n "$zmrrdfetchpid" ]; then
          kill -0 $zmrrdfetchpid 2> /dev/null
          if [ $? = 0 ]; then
              kill -9 $zmrrdfetchpid
          fi
      fi
      for ((i = 0; i < 30; i++)); do
        kill -0 $pid 2> /dev/null
        if [ $? != 0 ]; then
          rm -rf ${pidfile}
          break
        fi
        if [ x"$os" = "xLinux" ]; then
          index=0;quit=0
          ids[$index]="$pid"
          while [ $quit -eq 0 ]; do
            ((index++))
            ids[$index]=$(ps -o pid --ppid ${ids[$index-1]} | grep -v PID | tr \\n ' ')
            if [ ! "${ids[$index]}" ]; then
              ((quit++))
            fi
          done
          for i in $(seq 0 ${#ids[@]}); do
            if [ "${ids[$i]}" ]; then
              kill -9 ${ids[$i]} 2> /dev/null
            fi
          done
        else
          kill -9 $pid
        fi 
        sleep 1
      done
    fi
    if [ -s ${pidfile} ]; then
      echo "failed."
      exit 1
    else
      echo "done."
    fi
    exit 0
  ;;
  restart|reload)
    $0 stop
    $0 start
  ;;
  status)
    echo -n "zmlogswatch is "
    checkrunning
    if [ $running = 0 ]; then
      echo "not running."
      exit 1
    else
      echo "running."
      exit 0
    fi
  ;;
  *)
    echo "$0 start|stop|restart|reload|status"
    exit 1
  ;;
esac
