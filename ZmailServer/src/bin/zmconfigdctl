#!/bin/bash
# 
# ***** BEGIN LICENSE BLOCK *****
# Zimbra Collaboration Suite Server
# Copyright (C) 2010, 2011, 2012 VMware, Inc.
# 
# The contents of this file are subject to the Zimbra Public License
# Version 1.3 ("License"); you may not use this file except in
# compliance with the License.  You may obtain a copy of the License at
# http://www.zimbra.com/license.
# 
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.
# ***** END LICENSE BLOCK *****
# 

if [ x`whoami` != xzmail ]; then
	echo Error: must be run as zmail user
  exit 1
fi

source `dirname $0`/zmshutil || exit 1
zmsetvars \
	zmail_home \
	zmail_log_directory \
	zmconfigd_listen_port

# These variables are not set if run via cron.  Make sure they are set prior to execution
if [ x"$JYTHONPATH" = "x" ]; then
  JAVA_HOME=${zmail_home}/java
  PATH=${zmail_home}/bin:${zmail_home}/postfix/sbin:${zmail_home}/openldap/bin:${zmail_home}/snmp/bin:${zmail_home}/bdb/bin:${zmail_home}/openssl/bin:${JAVA_HOME}/bin:/usr/sbin:${PATH}
  export PATH

  JYTHONPATH="${zmail_home}/zmailmon/pylibs"
  export JYTHONPATH
fi
 
pid=""
pidfile="${zmail_log_directory}/zmconfigd.pid"

ctlpid=""
ctlpidfile="${zmail_log_directory}/zmconfigdctl.pid"

NC=`which nc 2>/dev/null`; NC=${NC:-`which netcat 2>/dev/null`}

getpid()
{
  if [ -f ${pidfile} ]; then
	pid=$(cat ${pidfile})
  fi
}

getctlpid()
{
  if [ -f ${ctlpidfile} ]; then
	ctlpid=$(cat ${ctlpidfile})
  fi
}

checkrunning()
{
  getpid
  if [ "x$pid" = "x0" ]; then
    pid=`ps auxwww | grep zmconfigd | grep -v grep | grep -v zmconfigdctl |  awk '{print $2}'`
  fi
  if [ "x$pid" = "x" ]; then
	running=0
  else
	status=`echo STATUS | $NC -w 15 -i 1 localhost ${zmconfigd_listen_port} 2>/dev/null`
	if [ $? = 0 -a "x$status" = "xSUCCESS ACTIVE" ]; then
		running=1
	else
		running=0
	fi
  fi
} 

checkctlrunning()
{
  getctlpid
  if [ "x$ctlpid" = "x" ]; then
	ctlrunning=0
  else
	kill -0 $ctlpid 2> /dev/null
	if [ $? != 0 ]; then
	  ctlpid=""
	  ctlrunning=0
	else
		ctlrunning=1
	fi 
  fi
} 

startzmconfigd()
{
	err=0
	checkrunning
	echo -n "Starting zmconfigd..."
	if [ $running = 1 ]; then
	  echo "zmconfigd is already running."
	  return
	fi
	if [ "x$JYTHONPATH" = "x" ]; then
	  echo "JYTHONPATH is unset!"
	  err=1
	  return
	fi
	if [ "x${pid}" != "x" ]; then
		kill -9 ${pid}
	fi
	rm -rf ${pidfile}
	${zmail_home}/libexec/zmconfigd >> ${zmail_log_directory}/zmconfigd.log 2>&1 &
	# Bug 51682 wait for the pid file to be created, then wait 30 seconds for rewrites
	for ((i = 0; i < 30; i++)) do
		if [ -f ${pidfile} ]; then
			break
		fi
		sleep 1
	done
	sleep 30
	for ((i = 0; i < 30; i++)) do
	  checkrunning
	  if [ $running = 1 ]; then
		echo "done."
		return
	  fi
	  if [ $running = -1 ]; then
		echo "Failed to start"
		err=1
		return
	  fi
	  sleep 1
	done
	echo "failed."
	err=1
	return
}

daemon()
{
	echo "Starting zmconfigdctl...success"
	exec 1>&-
	exec 2>&-
	while :; do
		cd /
		sleep 60
		startzmconfigd >> /opt/zmail/log/zmconfigd.log 2>&1
	done
	exit 0
}

startdaemon()
{
	startzmconfigd
	daemon &
	echo $! > ${ctlpidfile}
}

stopdaemon()
{
	checkctlrunning
	if [ x$ctlpid != "x" ]; then
		echo -n "Stopping zmconfigdctl..."
		kill -15 $ctlpid 2> /dev/null
		sleep 1
		kill -0 $ctlpid 2> /dev/null
		if [ $? != 0 ]; then
			ctlpid=""
			ctlrunning=0
			echo "success"
		else
			ctlrunning=1
			echo "failed"
		fi
	else
		echo "zmconfigdctl is not running"
	fi
}

#
# Main
#
case "$1" in
  'start')
	checkctlrunning
	if [ $ctlrunning = 0 ]; then
		startdaemon
	else
		startzmconfigd
		exit ${err}
	fi
   ;;

  'kill'|'stop')
  	stopdaemon
	checkrunning
	echo -n "Stopping zmconfigd..."
	if [ $running -lt 1 ]; then
	  echo "zmconfigd is not running."
	  exit 0
	else 
	  for ((i = 0; i < 30; i++)); do
		kill -0 $pid 2> /dev/null
		if [ $? != 0 ]; then
		  rm -rf ${pidfile}
		  break
		fi
		kill $pid
		sleep 1
	  done
	fi
	if [ -s ${pidfile} ]; then
	  echo "failed."
	  exit 1
	else
	  echo "done."
	fi
	exit 0
  ;;

	
  'restart'|'reload')
	$0 stop
	$0 start
  ;;
  
  'status')
	echo -n "zmconfigd is "
	checkrunning
	if [ $running -lt 1 ]; then
	  echo "not running." 
	  exit 1
	else
	  echo "running."
	  exit 0
	fi
   ;;
	
  *)
	echo "Usage: $0 start|stop|kill|restart|reload|status"
	exit 1
  ;;

esac
