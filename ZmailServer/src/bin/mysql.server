#!/bin/bash
# 
# ***** BEGIN LICENSE BLOCK *****
# Zimbra Collaboration Suite Server
# Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012 VMware, Inc.
# 
# The contents of this file are subject to the Zimbra Public License
# Version 1.3 ("License"); you may not use this file except in
# compliance with the License.  You may obtain a copy of the License at
# http://www.zimbra.com/license.
# 
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.
# ***** END LICENSE BLOCK *****
# 

source `dirname $0`/zmshutil || exit 1
zmsetvars \
  mysql_directory \
  mysql_pidfile \
  mysql_mycnf \
  mysql_errlogfile \
  zimbra_home \
  zimbra_user \
  zimbra_tmp_directory 

if [ x`whoami` != "x${zimbra_user}" ]; then
  echo Error: must be run as zimbra user
  exit 1
fi

if [ ! -d ${mysql_directory}/bin ]; then
  exit 0
fi

if [ ! -d ${zimbra_tmp_directory}/mysql ]; then
  mkdir -p ${zimbra_tmp_directory}/mysql > /dev/null 2>&1
fi

zmassert -d ${mysql_directory}
zmassert -d ${zimbra_tmp_directory}
zmassert -x ${mysql_directory}/bin/mysqld_safe
zmassert -r ${mysql_mycnf}
zmassert -d `dirname ${mysql_pidfile}`


# innodb will open the database before binding and writing out the pid
# potentially corrupting the files
# prevent multiple init scripts from running at the same time.
initlockfile=${zimbra_tmp_directory}/mysql/mysql.server.lock
checkInitLock() {
  if [ -f "$initlockfile" ]; then
    initpid=$(cat $initlockfile)
    if [ x"$initpid" != "x" ]; then
      kill -0 $initpid 2> /dev/null
      if [ $? = 0 ]; then
        echo "$0 already running with pid $initpid"
        exit 1
      fi
    fi
  fi
  echo $$ > $initlockfile
}
trap "quit 1" SIGINT SIGQUIT
trap "quit 1" SIGKILL SIGTERM
quit() {
  RC=$1
  rc=${RC:=0}
  cleanup
  exit $rc
}
cleanup() {
  [ -f $initlockfile ] && rm -f $initlockfile
}


#
# Path to my.cnf
#
if [ -f ${mysql_pidfile} ]; then
  pid=`cat ${mysql_pidfile}`
fi

case "$1" in
  'start')
    checkInitLock
    if [ "x$pid" != "x" ]; then
      kill -0 $pid 2> /dev/null
      if [ $? = 0 ]; then
        echo "mysqld_safe already running with pid $pid"
        quit 0
      fi
    fi
    # --defaults-file must be first argument
    echo -n "Starting mysqld..."
    cd ${mysql_directory}; \
      ${mysql_directory}/bin/mysqld_safe \
      --defaults-file=${mysql_mycnf} \
      --external-locking \
      --log-error=${mysql_errlogfile} \
      --malloc-lib=${zimbra_home}/tcmalloc/lib/libtcmalloc_minimal.so \
      --ledir=${mysql_directory}/bin < /dev/null > /dev/null 2>&1 &
    SQLSTARTED=0
    for ((i = 0; i < 60; i++))
    do
      ${zimbra_home}/bin/mysqladmin -s ping 2>&1 > /dev/null
      if [ $? = 0 ]; then
        SQLSTARTED=1
        break
      fi
      sleep 2
    done
    if [ ${SQLSTARTED} -ne 1 ]; then
      echo "failed."
    else 
      echo "done."
    fi
    ;;
    
  'stop')
    checkInitLock
    if [ "x${pid}" = "x" ]; then
      echo "mysqld not running: no pid in '${mysql_pidfile}'"
      quit 0
    else
      echo -n "Stopping mysqld..."
      kill $pid>> ${mysql_errlogfile} 2>&1
      # wait for mysqld pid file to be removed
      for ((i = 0; i < 30; i++)); do
        sleep 2;
        kill -0 $pid 2> /dev/null
        if [ $? != 0 ]; then
          rm -f ${mysql_pidfile}
          break
        fi
        kill $pid >> ${mysql_errlogfile} 2>&1
      done 
      if [ -s ${mysql_pidfile} ]; then 
        echo "failed."
        quit 1
      else
        echo " done."
      fi
    fi
    quit 0
    ;;
    
  'restart'|'reload')
    $0 stop
    $0 start
    ;;

  'status')
    kill -0 $pid 2> /dev/null
    mysqlstatus=$?
    if [ $mysqlstatus = 0 ]; then
      echo "mysql is running with pid $pid"
    else
      echo "mysql is not running"
    fi
    quit $mysqlstatus
    ;;

  *)
    echo "Usage: $0 start|stop|restart|reload|status"
    quit 1
    ;;
esac
