/*

     Copyright 2011-2013 MLstate
 
     This file is part of Opa.
 
     Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 
     The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

*/
// WARNING: This file has been generated by japigen.opa, DO NOT EDIT.
// Config file: japigen/jas.apigen
// Module name: AS

package org.zmail.cs.mailclient.activesync;

import java.util.*;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;
import javax.xml.bind.DatatypeConverter;
import org.zmail.cs.mailclient.activesync.ASTypes.*;


public class ASXMLParser extends DefaultHandler {

    public ASXMLParser() { }

    // External code
    
    private ASTypes mAst = null;
    public ASXMLParser(ASTypes ast) {
        this.mAst = ast;
    }
    private String value = null;
    
    // End external code
    
    
    // XML parser functions
    
    private boolean in_data_65 = false;
    private StringBuffer data_65 = null;
    
    private boolean in_contenttype_51 = false;
    private StringBuffer contenttype_51 = null;
    
    private boolean in_properties_67 = false;
    private AS_AttachResponseProperties properties_67 = null;
    
    private boolean in_heartbeatinterval_52 = false;
    private Integer heartbeatinterval_52 = null;
    
    private boolean in_wait_52 = false;
    private Integer wait_52 = null;
    
    private boolean in_partial_60 = false;
    private Boolean partial_60 = null;
    
    private boolean in_softdelete = false;
    private AS_ServerId softdelete = null;
    
    private boolean in_fetch_5 = false;
    private AS_CommandFetch fetch_5 = null;
    
    private boolean in_change_7 = false;
    private AS_CommandChange change_7 = null;
    
    private boolean in_delete_6 = false;
    private AS_CommandDelete delete_6 = null;
    
    private boolean in_class_51 = false;
    private StringBuffer class_51 = null;
    
    private boolean in_lastverbexecutiontime_64 = false;
    private Date lastverbexecutiontime_64 = null;
    
    private boolean in_lastverbexecuted_24 = false;
    private AS_LastVerbExecuted lastverbexecuted_24 = null;
    
    private boolean in_category_66 = false;
    private List<String> category_66 = null;
    
    private boolean in_emailcategories_22 = false;
    private AS_EmailCategories emailcategories_22 = null;
    
    private boolean in_conversationindex_65 = false;
    private byte[] conversationindex_65 = null;
    
    private boolean in_conversationid_65 = false;
    private byte[] conversationid_65 = null;
    
    private boolean in_nativebodytype_27 = false;
    private AS_NativeBodyType nativebodytype_27 = null;
    
    private boolean in_contentclass_51 = false;
    private StringBuffer contentclass_51 = null;
    
    private boolean in_subordinaldate_51 = false;
    private StringBuffer subordinaldate_51 = null;
    
    private boolean in_ordinaldate_64 = false;
    private Date ordinaldate_64 = null;
    
    private boolean in_remindertime_64 = false;
    private Date remindertime_64 = null;
    
    private boolean in_reminderset_60 = false;
    private Boolean reminderset_60 = null;
    
    private boolean in_utcstartdate_64 = false;
    private Date utcstartdate_64 = null;
    
    private boolean in_utcduedate_64 = false;
    private Date utcduedate_64 = null;
    
    private boolean in_duedate_64 = false;
    private Date duedate_64 = null;
    
    private boolean in_startdate_64 = false;
    private Date startdate_64 = null;
    
    private boolean in_completetime_64 = false;
    private Date completetime_64 = null;
    
    private boolean in_datecompleted_64 = false;
    private Date datecompleted_64 = null;
    
    private boolean in_flagtype_51 = false;
    private StringBuffer flagtype_51 = null;
    
    private boolean in_status_2 = false;
    private AS_flag_status status_2 = null;
    
    private boolean in_flag_63 = false;
    private List<AS_Flag> flag_63 = null;
    
    private boolean in_internetcpid_51 = false;
    private StringBuffer internetcpid_51 = null;
    
    private boolean in_messageclass_51 = false;
    private StringBuffer messageclass_51 = null;
    
    private boolean in_preview_51 = false;
    private StringBuffer preview_51 = null;
    
    private boolean in_part_52 = false;
    private Integer part_52 = null;
    
    private boolean in_data_51 = false;
    private StringBuffer data_51 = null;
    
    private boolean in_truncated_60 = false;
    private Boolean truncated_60 = null;
    
    private boolean in_body_16 = false;
    private AS_Body body_16 = null;
    
    private boolean in_isinline_60 = false;
    private Boolean isinline_60 = null;
    
    private boolean in_contentlocation_51 = false;
    private StringBuffer contentlocation_51 = null;
    
    private boolean in_contentid_51 = false;
    private StringBuffer contentid_51 = null;
    
    private boolean in_estimateddatasize_52 = false;
    private Integer estimateddatasize_52 = null;
    
    private boolean in_method_23 = false;
    private AS_Method method_23 = null;
    
    private boolean in_filereference_51 = false;
    private StringBuffer filereference_51 = null;
    
    private boolean in_attachment_25 = false;
    private AS_Attachment attachment_25 = null;
    
    private boolean in_attachments_62 = false;
    private List<AS_Attachments> attachments_62 = null;
    
    private boolean in_read_52 = false;
    private Integer read_52 = null;
    
    private boolean in_importance_52 = false;
    private Integer importance_52 = null;
    
    private boolean in_threadtopic_51 = false;
    private StringBuffer threadtopic_51 = null;
    
    private boolean in_displayto_51 = false;
    private StringBuffer displayto_51 = null;
    
    private boolean in_datereceived_51 = false;
    private StringBuffer datereceived_51 = null;
    
    private boolean in_subject_51 = false;
    private StringBuffer subject_51 = null;
    
    private boolean in_cc_51 = false;
    private StringBuffer cc_51 = null;
    
    private boolean in_from_51 = false;
    private StringBuffer from_51 = null;
    
    private boolean in_to_51 = false;
    private StringBuffer to_51 = null;
    
    private boolean in_applicationdata_28 = false;
    private AS_EmailApplicationData applicationdata_28 = null;
    
    private boolean in_clientid_51 = false;
    private StringBuffer clientid_51 = null;
    
    private boolean in_add_4 = false;
    private AS_CommandAdd add_4 = null;
    
    private boolean in_commands_61 = false;
    private List<AS_SyncCommandsAlt> commands_61 = null;
    
    private boolean in_type_12 = false;
    private AS_BodyType type_12 = null;
    
    private boolean in_bodypartpreference_20 = false;
    private AS_BodyPartPreference bodypartpreference_20 = null;
    
    private boolean in_preview_52 = false;
    private Integer preview_52 = null;
    
    private boolean in_allornone_60 = false;
    private Boolean allornone_60 = null;
    
    private boolean in_truncationsize_52 = false;
    private Integer truncationsize_52 = null;
    
    private boolean in_type_13 = false;
    private AS_Type type_13 = null;
    
    private boolean in_bodypreference_19 = false;
    private AS_BodyPreference bodypreference_19 = null;
    
    private boolean in_class_10 = false;
    private AS_Class class_10 = null;
    
    private boolean in_conflict_60 = false;
    private Boolean conflict_60 = null;
    
    private boolean in_mimetruncation_15 = false;
    private AS_MIMETruncation mimetruncation_15 = null;
    
    private boolean in_mimesupport_14 = false;
    private AS_MIMESupport mimesupport_14 = null;
    
    private boolean in_filtertype_11 = false;
    private AS_filter_type filtertype_11 = null;
    
    private boolean in_options_21 = false;
    private AS_Options options_21 = null;
    
    private boolean in_conversationmode_60 = false;
    private Boolean conversationmode_60 = null;
    
    private boolean in_windowsize_52 = false;
    private Integer windowsize_52 = null;
    
    private boolean in_getchanges_60 = false;
    private Boolean getchanges_60 = null;
    
    private boolean in_deletesasmoves_60 = false;
    private Boolean deletesasmoves_60 = null;
    
    private boolean in_collectionid_51 = false;
    private StringBuffer collectionid_51 = null;
    
    private boolean in_collection_32 = false;
    private AS_Collection collection_32 = null;
    
    private boolean in_collections_33 = false;
    private AS_Collections collections_33 = null;
    
    private boolean in_policykey_51 = false;
    private StringBuffer policykey_51 = null;
    
    private boolean in_policytype_51 = false;
    private StringBuffer policytype_51 = null;
    
    private boolean in_policy_59 = false;
    private AS_Policy policy_59 = null;
    
    private boolean in_policies_58 = false;
    private List<AS_PolicyL> policies_58 = null;
    
    private boolean in_delete = false;
    private AS_ServerId delete = null;
    
    private boolean in_update_57 = false;
    private AS_UpdateSPDT update_57 = null;
    
    private boolean in_type_55 = false;
    private AS_FolderSyncType type_55 = null;
    
    private boolean in_displayname_51 = false;
    private StringBuffer displayname_51 = null;
    
    private boolean in_parentid_51 = false;
    private StringBuffer parentid_51 = null;
    
    private boolean in_serverid_51 = false;
    private StringBuffer serverid_51 = null;
    
    private boolean in_add_54 = false;
    private AS_AddSPDT add_54 = null;
    
    private boolean in_count_52 = false;
    private Integer count_52 = null;
    
    private boolean in_changes_53 = false;
    private List<AS_FolderSyncChange> changes_53 = null;
    
    private boolean in_status_52 = false;
    private Integer status_52 = null;
    
    private boolean in_synckey_51 = false;
    private StringBuffer synckey_51 = null;
    
    private boolean in_foldersyncb_71 = false;
    private AS_FolderSyncB foldersyncb_71 = null;
    private boolean in_provisionnodib_70 = false;
    private AS_ProvisionNoDIB provisionnodib_70 = null;
    private boolean in_status_69 = false;
    private AS_Status status_69 = null;
    private boolean in_sync_34 = false;
    private AS_Sync sync_34 = null;
    private boolean in_attachfetchresponse_68 = false;
    private AS_AttachFetchResponse attachfetchresponse_68 = null;
    
    private void startAttachResponseProperties(String localName) {
        switch (localName) {
        case "contenttype":
            contenttype_51 = new StringBuffer();
            in_contenttype_51 = true;
            break;
        case "data":
            data_65 = new StringBuffer();
            in_data_65 = true;
            break;
        default:
            break;
        }
    }
    
    private void endAttachResponseProperties(String localName) {
        switch (localName) {
        case "contenttype":
            /*TYP*/ properties_67.set_ContentType(contenttype_51.toString());
            in_contenttype_51 = false;
            break;
        case "data":
            /*TYP64*/ properties_67.set_Data(DatatypeConverter.parseBase64Binary(data_65.toString()));
            in_data_65 = false;
            break;
        default:
            break;
        }
    }
    
    private void chAttachResponseProperties(String value) {
        if (in_contenttype_51) {
            contenttype_51.append(value);
        }
        else if (in_data_65) {
            data_65.append(value);
        }
    }
    
    private void startAttachFetchResponse(String localName) {
        switch (localName) {
        case "status":
            status_52 = null;
            in_status_52 = true;
            break;
        case "filereference":
            filereference_51 = new StringBuffer();
            in_filereference_51 = true;
            break;
        case "properties":
            properties_67 = mAst.AttachResponseProperties_default();
            in_properties_67 = true;
            break;
        default:
            if (in_properties_67) startAttachResponseProperties(localName);
            break;
        }
    }
    
    private void endAttachFetchResponse(String localName) {
        switch (localName) {
        case "status":
            /*NONE*/ attachfetchresponse_68.set_Status(status_52);
            in_status_52 = false;
            break;
        case "filereference":
            /*NONE*/ attachfetchresponse_68.set_FileReference(filereference_51.toString());
            in_filereference_51 = false;
            break;
        case "properties":
            /*NONE*/ attachfetchresponse_68.set_Properties(properties_67);
            in_properties_67 = false;
            break;
        default:
            if (in_properties_67) endAttachResponseProperties(localName);
            break;
        }
    }
    
    private void chAttachFetchResponse(String value) {
        if (in_status_52) {
            status_52 = new Integer(value);
        }
        else if (in_filereference_51) {
            filereference_51.append(value);
        }
        else if (in_properties_67) chAttachResponseProperties(value);
    }
    
    private void startCommandFetch(String localName) {
        switch (localName) {
        case "serverid":
            serverid_51 = new StringBuffer();
            in_serverid_51 = true;
            break;
        default:
            break;
        }
    }
    
    private void endCommandFetch(String localName) {
        switch (localName) {
        case "serverid":
            /*TYP*/ fetch_5.set_ServerId(serverid_51.toString());
            in_serverid_51 = false;
            break;
        default:
            break;
        }
    }
    
    private void chCommandFetch(String value) {
        if (in_serverid_51) {
            serverid_51.append(value);
        }
    }
    
    private void startCommandChange(String localName) {
        switch (localName) {
        case "serverid":
            serverid_51 = new StringBuffer();
            in_serverid_51 = true;
            break;
        case "applicationdata":
            applicationdata_28 = mAst.EmailApplicationData_default();
            in_applicationdata_28 = true;
            break;
        case "class":
            class_51 = new StringBuffer();
            in_class_51 = true;
            break;
        default:
            if (in_applicationdata_28) startEmailApplicationData(localName);
            break;
        }
    }
    
    private void endCommandChange(String localName) {
        switch (localName) {
        case "serverid":
            /*TYP*/ change_7.set_ServerId(serverid_51.toString());
            in_serverid_51 = false;
            break;
        case "applicationdata":
            /*TYP*/ change_7.set_ApplicationData(applicationdata_28);
            in_applicationdata_28 = false;
            break;
        case "class":
            /*TYP*/ change_7.set_Class(class_51.toString());
            in_class_51 = false;
            break;
        default:
            if (in_applicationdata_28) endEmailApplicationData(localName);
            break;
        }
    }
    
    private void chCommandChange(String value) {
        if (in_serverid_51) {
            serverid_51.append(value);
        }
        else if (in_applicationdata_28) chEmailApplicationData(value);
        else if (in_class_51) {
            class_51.append(value);
        }
    }
    
    private void startCommandDelete(String localName) {
        switch (localName) {
        case "serverid":
            serverid_51 = new StringBuffer();
            in_serverid_51 = true;
            break;
        case "class":
            class_51 = new StringBuffer();
            in_class_51 = true;
            break;
        default:
            break;
        }
    }
    
    private void endCommandDelete(String localName) {
        switch (localName) {
        case "serverid":
            /*TYP*/ delete_6.set_ServerId(serverid_51.toString());
            in_serverid_51 = false;
            break;
        case "class":
            /*TYP*/ delete_6.set_Class(class_51.toString());
            in_class_51 = false;
            break;
        default:
            break;
        }
    }
    
    private void chCommandDelete(String value) {
        if (in_serverid_51) {
            serverid_51.append(value);
        }
        else if (in_class_51) {
            class_51.append(value);
        }
    }
    
    private void startEmailCategories(String localName) {
        switch (localName) {
        case "category":
            category_66 = null;
            in_category_66 = true;
            break;
        default:
            break;
        }
    }
    
    private void endEmailCategories(String localName) {
        switch (localName) {
        case "category":
            /*TYP P*/ emailcategories_22.set_Category(category_66);
            in_category_66 = false;
            break;
        default:
            break;
        }
    }
    
    private void chEmailCategories(String value) {
        if (in_category_66) {
            category_66.add(value);
        }
    }
    
    private void startFlag(String localName) {
        switch (localName) {
        case "subject":
            subject_51 = new StringBuffer();
            in_subject_51 = true;
            break;
        case "status":
            status_2 = mAst.flag_status_default();
            in_status_2 = true;
            break;
        case "flagtype":
            flagtype_51 = new StringBuffer();
            in_flagtype_51 = true;
            break;
        case "datecompleted":
            datecompleted_64 = null;
            in_datecompleted_64 = true;
            break;
        case "completetime":
            completetime_64 = null;
            in_completetime_64 = true;
            break;
        case "startdate":
            startdate_64 = null;
            in_startdate_64 = true;
            break;
        case "duedate":
            duedate_64 = null;
            in_duedate_64 = true;
            break;
        case "utcduedate":
            utcduedate_64 = null;
            in_utcduedate_64 = true;
            break;
        case "utcstartdate":
            utcstartdate_64 = null;
            in_utcstartdate_64 = true;
            break;
        case "reminderset":
            reminderset_60 = null;
            in_reminderset_60 = true;
            break;
        case "remindertime":
            remindertime_64 = null;
            in_remindertime_64 = true;
            break;
        case "ordinaldate":
            ordinaldate_64 = null;
            in_ordinaldate_64 = true;
            break;
        case "subordinaldate":
            subordinaldate_51 = new StringBuffer();
            in_subordinaldate_51 = true;
            break;
        default:
            break;
        }
    }
    
    private void endFlag(String localName) {
        switch (localName) {
        case "subject":
            /*LTYP*/ flag_63.add(mAst.new AS_Flag().set_Subject(subject_51.toString()));
            in_subject_51 = false;
            break;
        case "status":
            /*LTYP*/ flag_63.add(mAst.new AS_Flag().set_Status(status_2));
            in_status_2 = false;
            break;
        case "flagtype":
            /*LTYP*/ flag_63.add(mAst.new AS_Flag().set_FlagType(flagtype_51.toString()));
            in_flagtype_51 = false;
            break;
        case "datecompleted":
            /*LTYP*/ flag_63.add(mAst.new AS_Flag().set_DateCompleted(datecompleted_64));
            in_datecompleted_64 = false;
            break;
        case "completetime":
            /*LTYP*/ flag_63.add(mAst.new AS_Flag().set_CompleteTime(completetime_64));
            in_completetime_64 = false;
            break;
        case "startdate":
            /*LTYP*/ flag_63.add(mAst.new AS_Flag().set_StartDate(startdate_64));
            in_startdate_64 = false;
            break;
        case "duedate":
            /*LTYP*/ flag_63.add(mAst.new AS_Flag().set_DueDate(duedate_64));
            in_duedate_64 = false;
            break;
        case "utcduedate":
            /*LTYP*/ flag_63.add(mAst.new AS_Flag().set_UtcDueDate(utcduedate_64));
            in_utcduedate_64 = false;
            break;
        case "utcstartdate":
            /*LTYP*/ flag_63.add(mAst.new AS_Flag().set_UtcStartDate(utcstartdate_64));
            in_utcstartdate_64 = false;
            break;
        case "reminderset":
            /*LTYP*/ flag_63.add(mAst.new AS_Flag().set_ReminderSet(reminderset_60));
            in_reminderset_60 = false;
            break;
        case "remindertime":
            /*LTYP*/ flag_63.add(mAst.new AS_Flag().set_ReminderTime(remindertime_64));
            in_remindertime_64 = false;
            break;
        case "ordinaldate":
            /*LTYP*/ flag_63.add(mAst.new AS_Flag().set_OrdinalDate(ordinaldate_64));
            in_ordinaldate_64 = false;
            break;
        case "subordinaldate":
            /*LTYP*/ flag_63.add(mAst.new AS_Flag().set_SubOrdinalDate(subordinaldate_51.toString()));
            in_subordinaldate_51 = false;
            break;
        default:
            break;
        }
    }
    
    private void chFlag(String value) {
        if (in_subject_51) {
            subject_51.append(value);
        }
        else if (in_status_2) {
            status_2 = mAst.flag_status_default().fromInteger(Integer.parseInt(value));
        }
        else if (in_flagtype_51) {
            flagtype_51.append(value);
        }
        else if (in_datecompleted_64) {
            datecompleted_64 = DatatypeConverter.parseDateTime(value).getTime();
        }
        else if (in_completetime_64) {
            completetime_64 = DatatypeConverter.parseDateTime(value).getTime();
        }
        else if (in_startdate_64) {
            startdate_64 = DatatypeConverter.parseDateTime(value).getTime();
        }
        else if (in_duedate_64) {
            duedate_64 = DatatypeConverter.parseDateTime(value).getTime();
        }
        else if (in_utcduedate_64) {
            utcduedate_64 = DatatypeConverter.parseDateTime(value).getTime();
        }
        else if (in_utcstartdate_64) {
            utcstartdate_64 = DatatypeConverter.parseDateTime(value).getTime();
        }
        else if (in_reminderset_60) {
            reminderset_60 = new Boolean((new Integer(value)) != 0);
        }
        else if (in_remindertime_64) {
            remindertime_64 = DatatypeConverter.parseDateTime(value).getTime();
        }
        else if (in_ordinaldate_64) {
            ordinaldate_64 = DatatypeConverter.parseDateTime(value).getTime();
        }
        else if (in_subordinaldate_51) {
            subordinaldate_51.append(value);
        }
    }
    
    private void startBody(String localName) {
        switch (localName) {
        case "type":
            type_12 = mAst.BodyType_default();
            in_type_12 = true;
            break;
        case "estimateddatasize":
            estimateddatasize_52 = null;
            in_estimateddatasize_52 = true;
            break;
        case "truncated":
            truncated_60 = null;
            in_truncated_60 = true;
            break;
        case "data":
            data_51 = new StringBuffer();
            in_data_51 = true;
            break;
        case "part":
            part_52 = null;
            in_part_52 = true;
            break;
        case "preview":
            preview_51 = new StringBuffer();
            in_preview_51 = true;
            break;
        default:
            break;
        }
    }
    
    private void endBody(String localName) {
        switch (localName) {
        case "type":
            /*TYP*/ body_16.set_Type(type_12);
            in_type_12 = false;
            break;
        case "estimateddatasize":
            /*TYP*/ body_16.set_EstimatedDataSize(estimateddatasize_52);
            in_estimateddatasize_52 = false;
            break;
        case "truncated":
            /*TYP*/ body_16.set_Truncated(truncated_60);
            in_truncated_60 = false;
            break;
        case "data":
            /*TYP*/ body_16.set_Data(data_51.toString());
            in_data_51 = false;
            break;
        case "part":
            /*TYP*/ body_16.set_Part(part_52);
            in_part_52 = false;
            break;
        case "preview":
            /*TYP*/ body_16.set_Preview(preview_51.toString());
            in_preview_51 = false;
            break;
        default:
            break;
        }
    }
    
    private void chBody(String value) {
        if (in_type_12) {
            type_12 = mAst.BodyType_default().fromInteger(Integer.parseInt(value));
        }
        else if (in_estimateddatasize_52) {
            estimateddatasize_52 = new Integer(value);
        }
        else if (in_truncated_60) {
            truncated_60 = new Boolean((new Integer(value)) != 0);
        }
        else if (in_data_51) {
            data_51.append(value);
        }
        else if (in_part_52) {
            part_52 = new Integer(value);
        }
        else if (in_preview_51) {
            preview_51.append(value);
        }
    }
    
    private void startAttachment(String localName) {
        switch (localName) {
        case "displayname":
            displayname_51 = new StringBuffer();
            in_displayname_51 = true;
            break;
        case "filereference":
            filereference_51 = new StringBuffer();
            in_filereference_51 = true;
            break;
        case "method":
            method_23 = mAst.Method_default();
            in_method_23 = true;
            break;
        case "estimateddatasize":
            estimateddatasize_52 = null;
            in_estimateddatasize_52 = true;
            break;
        case "contentid":
            contentid_51 = new StringBuffer();
            in_contentid_51 = true;
            break;
        case "contentlocation":
            contentlocation_51 = new StringBuffer();
            in_contentlocation_51 = true;
            break;
        case "isinline":
            isinline_60 = null;
            in_isinline_60 = true;
            break;
        default:
            break;
        }
    }
    
    private void endAttachment(String localName) {
        switch (localName) {
        case "displayname":
            /*TYP*/ attachment_25.set_DisplayName(displayname_51.toString());
            in_displayname_51 = false;
            break;
        case "filereference":
            /*TYP*/ attachment_25.set_FileReference(filereference_51.toString());
            in_filereference_51 = false;
            break;
        case "method":
            /*TYP*/ attachment_25.set_Method(method_23);
            in_method_23 = false;
            break;
        case "estimateddatasize":
            /*TYP*/ attachment_25.set_EstimatedDataSize(estimateddatasize_52);
            in_estimateddatasize_52 = false;
            break;
        case "contentid":
            /*TYP*/ attachment_25.set_ContentId(contentid_51.toString());
            in_contentid_51 = false;
            break;
        case "contentlocation":
            /*TYP*/ attachment_25.set_ContentLocation(contentlocation_51.toString());
            in_contentlocation_51 = false;
            break;
        case "isinline":
            /*TYP*/ attachment_25.set_IsInline(isinline_60);
            in_isinline_60 = false;
            break;
        default:
            break;
        }
    }
    
    private void chAttachment(String value) {
        if (in_displayname_51) {
            displayname_51.append(value);
        }
        else if (in_filereference_51) {
            filereference_51.append(value);
        }
        else if (in_method_23) {
            method_23 = mAst.Method_default().fromInteger(Integer.parseInt(value));
        }
        else if (in_estimateddatasize_52) {
            estimateddatasize_52 = new Integer(value);
        }
        else if (in_contentid_51) {
            contentid_51.append(value);
        }
        else if (in_contentlocation_51) {
            contentlocation_51.append(value);
        }
        else if (in_isinline_60) {
            isinline_60 = new Boolean((new Integer(value)) != 0);
        }
    }
    
    private void startAttachments(String localName) {
        switch (localName) {
        case "attachment":
            attachment_25 = mAst.Attachment_default();
            in_attachment_25 = true;
            break;
        default:
            if (in_attachment_25) startAttachment(localName);
            break;
        }
    }
    
    private void endAttachments(String localName) {
        switch (localName) {
        case "attachment":
            /*LTYP*/ attachments_62.add(mAst.new AS_Attachments().set_Attachment(attachment_25));
            in_attachment_25 = false;
            break;
        default:
            if (in_attachment_25) endAttachment(localName);
            break;
        }
    }
    
    private void chAttachments(String value) {
        if (in_attachment_25) chAttachment(value);
    }
    
    private void startEmailApplicationData(String localName) {
        switch (localName) {
        case "to":
            to_51 = new StringBuffer();
            in_to_51 = true;
            break;
        case "from":
            from_51 = new StringBuffer();
            in_from_51 = true;
            break;
        case "cc":
            cc_51 = new StringBuffer();
            in_cc_51 = true;
            break;
        case "subject":
            subject_51 = new StringBuffer();
            in_subject_51 = true;
            break;
        case "datereceived":
            datereceived_51 = new StringBuffer();
            in_datereceived_51 = true;
            break;
        case "displayto":
            displayto_51 = new StringBuffer();
            in_displayto_51 = true;
            break;
        case "threadtopic":
            threadtopic_51 = new StringBuffer();
            in_threadtopic_51 = true;
            break;
        case "importance":
            importance_52 = null;
            in_importance_52 = true;
            break;
        case "read":
            read_52 = null;
            in_read_52 = true;
            break;
        case "attachments":
            attachments_62 = new ArrayList<AS_Attachments>();
            in_attachments_62 = true;
            break;
        case "body":
            body_16 = mAst.Body_default();
            in_body_16 = true;
            break;
        case "messageclass":
            messageclass_51 = new StringBuffer();
            in_messageclass_51 = true;
            break;
        case "internetcpid":
            internetcpid_51 = new StringBuffer();
            in_internetcpid_51 = true;
            break;
        case "flag":
            flag_63 = new ArrayList<AS_Flag>();
            in_flag_63 = true;
            break;
        case "contentclass":
            contentclass_51 = new StringBuffer();
            in_contentclass_51 = true;
            break;
        case "nativebodytype":
            nativebodytype_27 = mAst.NativeBodyType_default();
            in_nativebodytype_27 = true;
            break;
        case "conversationid":
            conversationid_65 = null;
            in_conversationid_65 = true;
            break;
        case "conversationindex":
            conversationindex_65 = null;
            in_conversationindex_65 = true;
            break;
        case "emailcategories":
            emailcategories_22 = mAst.EmailCategories_default();
            in_emailcategories_22 = true;
            break;
        case "lastverbexecuted":
            lastverbexecuted_24 = mAst.LastVerbExecuted_default();
            in_lastverbexecuted_24 = true;
            break;
        case "lastverbexecutiontime":
            lastverbexecutiontime_64 = null;
            in_lastverbexecutiontime_64 = true;
            break;
        default:
            if (in_attachments_62) startAttachments(localName);
            if (in_body_16) startBody(localName);
            if (in_flag_63) startFlag(localName);
            if (in_emailcategories_22) startEmailCategories(localName);
            break;
        }
    }
    
    private void endEmailApplicationData(String localName) {
        switch (localName) {
        case "to":
            /*TYP*/ applicationdata_28.set_To(to_51.toString());
            in_to_51 = false;
            break;
        case "from":
            /*TYP*/ applicationdata_28.set_From(from_51.toString());
            in_from_51 = false;
            break;
        case "cc":
            /*TYP*/ applicationdata_28.set_Cc(cc_51.toString());
            in_cc_51 = false;
            break;
        case "subject":
            /*TYP*/ applicationdata_28.set_Subject(subject_51.toString());
            in_subject_51 = false;
            break;
        case "datereceived":
            /*TYP*/ applicationdata_28.set_DateReceived(datereceived_51.toString());
            in_datereceived_51 = false;
            break;
        case "displayto":
            /*TYP*/ applicationdata_28.set_DisplayTo(displayto_51.toString());
            in_displayto_51 = false;
            break;
        case "threadtopic":
            /*TYP*/ applicationdata_28.set_ThreadTopic(threadtopic_51.toString());
            in_threadtopic_51 = false;
            break;
        case "importance":
            /*TYP*/ applicationdata_28.set_Importance(importance_52);
            in_importance_52 = false;
            break;
        case "read":
            /*TYP*/ applicationdata_28.set_Read(read_52);
            in_read_52 = false;
            break;
        case "attachments":
            /*TYP P*/ applicationdata_28.set_Attachments(attachments_62);
            in_attachments_62 = false;
            break;
        case "body":
            /*TYP*/ applicationdata_28.set_Body(body_16);
            in_body_16 = false;
            break;
        case "messageclass":
            /*TYP*/ applicationdata_28.set_MessageClass(messageclass_51.toString());
            in_messageclass_51 = false;
            break;
        case "internetcpid":
            /*TYP*/ applicationdata_28.set_InternetCPID(internetcpid_51.toString());
            in_internetcpid_51 = false;
            break;
        case "flag":
            /*TYP P*/ applicationdata_28.set_Flag(flag_63);
            in_flag_63 = false;
            break;
        case "contentclass":
            /*TYP*/ applicationdata_28.set_ContentClass(contentclass_51.toString());
            in_contentclass_51 = false;
            break;
        case "nativebodytype":
            /*TYP*/ applicationdata_28.set_NativeBodyType(nativebodytype_27);
            in_nativebodytype_27 = false;
            break;
        case "conversationid":
            /*TYP*/ applicationdata_28.set_ConversationId(conversationid_65);
            in_conversationid_65 = false;
            break;
        case "conversationindex":
            /*TYP*/ applicationdata_28.set_ConversationIndex(conversationindex_65);
            in_conversationindex_65 = false;
            break;
        case "emailcategories":
            /*TYP*/ applicationdata_28.set_EmailCategories(emailcategories_22);
            in_emailcategories_22 = false;
            break;
        case "lastverbexecuted":
            /*TYP*/ applicationdata_28.set_LastVerbExecuted(lastverbexecuted_24);
            in_lastverbexecuted_24 = false;
            break;
        case "lastverbexecutiontime":
            /*TYP*/ applicationdata_28.set_LastVerbExecutionTime(lastverbexecutiontime_64);
            in_lastverbexecutiontime_64 = false;
            break;
        default:
            if (in_attachments_62) endAttachments(localName);
            if (in_body_16) endBody(localName);
            if (in_flag_63) endFlag(localName);
            if (in_emailcategories_22) endEmailCategories(localName);
            break;
        }
    }
    
    private void chEmailApplicationData(String value) {
        if (in_to_51) {
            to_51.append(value);
        }
        else if (in_from_51) {
            from_51.append(value);
        }
        else if (in_cc_51) {
            cc_51.append(value);
        }
        else if (in_subject_51) {
            subject_51.append(value);
        }
        else if (in_datereceived_51) {
            datereceived_51.append(value);
        }
        else if (in_displayto_51) {
            displayto_51.append(value);
        }
        else if (in_threadtopic_51) {
            threadtopic_51.append(value);
        }
        else if (in_importance_52) {
            importance_52 = new Integer(value);
        }
        else if (in_read_52) {
            read_52 = new Integer(value);
        }
        else if (in_attachments_62) chAttachments(value);
        else if (in_body_16) chBody(value);
        else if (in_messageclass_51) {
            messageclass_51.append(value);
        }
        else if (in_internetcpid_51) {
            internetcpid_51.append(value);
        }
        else if (in_flag_63) chFlag(value);
        else if (in_contentclass_51) {
            contentclass_51.append(value);
        }
        else if (in_nativebodytype_27) {
            nativebodytype_27 = mAst.NativeBodyType_default().fromInteger(Integer.parseInt(value));
        }
        else if (in_conversationid_65) {
            conversationid_65 = value.getBytes();
        }
        else if (in_conversationindex_65) {
            conversationindex_65 = value.getBytes();
        }
        else if (in_emailcategories_22) chEmailCategories(value);
        else if (in_lastverbexecuted_24) {
            lastverbexecuted_24 = mAst.LastVerbExecuted_default().fromInteger(Integer.parseInt(value));
        }
        else if (in_lastverbexecutiontime_64) {
            lastverbexecutiontime_64 = DatatypeConverter.parseDateTime(value).getTime();
        }
    }
    
    private void startCommandAdd(String localName) {
        switch (localName) {
        case "serverid":
            serverid_51 = new StringBuffer();
            in_serverid_51 = true;
            break;
        case "clientid":
            clientid_51 = new StringBuffer();
            in_clientid_51 = true;
            break;
        case "applicationdata":
            applicationdata_28 = mAst.EmailApplicationData_default();
            in_applicationdata_28 = true;
            break;
        case "class":
            class_51 = new StringBuffer();
            in_class_51 = true;
            break;
        default:
            if (in_applicationdata_28) startEmailApplicationData(localName);
            break;
        }
    }
    
    private void endCommandAdd(String localName) {
        switch (localName) {
        case "serverid":
            /*TYP*/ add_4.set_ServerId(serverid_51.toString());
            in_serverid_51 = false;
            break;
        case "clientid":
            /*TYP*/ add_4.set_ClientId(clientid_51.toString());
            in_clientid_51 = false;
            break;
        case "applicationdata":
            /*TYP*/ add_4.set_ApplicationData(applicationdata_28);
            in_applicationdata_28 = false;
            break;
        case "class":
            /*TYP*/ add_4.set_Class(class_51.toString());
            in_class_51 = false;
            break;
        default:
            if (in_applicationdata_28) endEmailApplicationData(localName);
            break;
        }
    }
    
    private void chCommandAdd(String value) {
        if (in_serverid_51) {
            serverid_51.append(value);
        }
        else if (in_clientid_51) {
            clientid_51.append(value);
        }
        else if (in_applicationdata_28) chEmailApplicationData(value);
        else if (in_class_51) {
            class_51.append(value);
        }
    }
    
    private void startSyncCommandsAlt(String localName) {
        switch (localName) {
        case "add":
            add_4 = mAst.CommandAdd_default();
            in_add_4 = true;
            break;
        case "delete":
            delete_6 = mAst.CommandDelete_default();
            in_delete_6 = true;
            break;
        case "change":
            change_7 = mAst.CommandChange_default();
            in_change_7 = true;
            break;
        case "fetch":
            fetch_5 = mAst.CommandFetch_default();
            in_fetch_5 = true;
            break;
        case "softdelete":
            softdelete = mAst.ServerId_default();
            in_softdelete = true;
            break;
        default:
            if (in_add_4) startCommandAdd(localName);
            if (in_delete_6) startCommandDelete(localName);
            if (in_change_7) startCommandChange(localName);
            if (in_fetch_5) startCommandFetch(localName);
            if (in_softdelete) startServerId(localName);
            break;
        }
    }
    
    private void endSyncCommandsAlt(String localName) {
        switch (localName) {
        case "add":
            /*LTYP*/ commands_61.add(mAst.new AS_SyncCommandsAlt().set_Add(add_4));
            in_add_4 = false;
            break;
        case "delete":
            /*LTYP*/ commands_61.add(mAst.new AS_SyncCommandsAlt().set_Delete(delete_6));
            in_delete_6 = false;
            break;
        case "change":
            /*LTYP*/ commands_61.add(mAst.new AS_SyncCommandsAlt().set_Change(change_7));
            in_change_7 = false;
            break;
        case "fetch":
            /*LTYP*/ commands_61.add(mAst.new AS_SyncCommandsAlt().set_Fetch(fetch_5));
            in_fetch_5 = false;
            break;
        case "softdelete":
            /*LTYP*/ commands_61.add(mAst.new AS_SyncCommandsAlt().set_SoftDelete(softdelete));
            in_softdelete = false;
            break;
        default:
            if (in_add_4) endCommandAdd(localName);
            if (in_delete_6) endCommandDelete(localName);
            if (in_change_7) endCommandChange(localName);
            if (in_fetch_5) endCommandFetch(localName);
            if (in_softdelete) endServerId(localName);
            break;
        }
    }
    
    private void chSyncCommandsAlt(String value) {
        if (in_add_4) chCommandAdd(value);
        else if (in_delete_6) chCommandDelete(value);
        else if (in_change_7) chCommandChange(value);
        else if (in_fetch_5) chCommandFetch(value);
        else if (in_softdelete) chServerId(value);
    }
    
    private void startBodyPartPreference(String localName) {
        switch (localName) {
        case "type":
            type_12 = mAst.BodyType_default();
            in_type_12 = true;
            break;
        case "truncationsize":
            truncationsize_52 = null;
            in_truncationsize_52 = true;
            break;
        case "allornone":
            allornone_60 = null;
            in_allornone_60 = true;
            break;
        case "preview":
            preview_52 = null;
            in_preview_52 = true;
            break;
        default:
            break;
        }
    }
    
    private void endBodyPartPreference(String localName) {
        switch (localName) {
        case "type":
            /*TYP*/ bodypartpreference_20.set_Type(type_12);
            in_type_12 = false;
            break;
        case "truncationsize":
            /*TYP*/ bodypartpreference_20.set_TruncationSize(truncationsize_52);
            in_truncationsize_52 = false;
            break;
        case "allornone":
            /*TYP*/ bodypartpreference_20.set_AllOrNone(allornone_60);
            in_allornone_60 = false;
            break;
        case "preview":
            /*TYP*/ bodypartpreference_20.set_Preview(preview_52);
            in_preview_52 = false;
            break;
        default:
            break;
        }
    }
    
    private void chBodyPartPreference(String value) {
        if (in_type_12) {
            type_12 = mAst.BodyType_default().fromInteger(Integer.parseInt(value));
        }
        else if (in_truncationsize_52) {
            truncationsize_52 = new Integer(value);
        }
        else if (in_allornone_60) {
            allornone_60 = new Boolean((new Integer(value)) != 0);
        }
        else if (in_preview_52) {
            preview_52 = new Integer(value);
        }
    }
    
    private void startBodyPreference(String localName) {
        switch (localName) {
        case "type":
            type_13 = mAst.Type_default();
            in_type_13 = true;
            break;
        case "truncationsize":
            truncationsize_52 = null;
            in_truncationsize_52 = true;
            break;
        case "allornone":
            allornone_60 = null;
            in_allornone_60 = true;
            break;
        case "preview":
            preview_52 = null;
            in_preview_52 = true;
            break;
        default:
            break;
        }
    }
    
    private void endBodyPreference(String localName) {
        switch (localName) {
        case "type":
            /*TYP*/ bodypreference_19.set_Type(type_13);
            in_type_13 = false;
            break;
        case "truncationsize":
            /*TYP*/ bodypreference_19.set_TruncationSize(truncationsize_52);
            in_truncationsize_52 = false;
            break;
        case "allornone":
            /*TYP*/ bodypreference_19.set_AllOrNone(allornone_60);
            in_allornone_60 = false;
            break;
        case "preview":
            /*TYP*/ bodypreference_19.set_Preview(preview_52);
            in_preview_52 = false;
            break;
        default:
            break;
        }
    }
    
    private void chBodyPreference(String value) {
        if (in_type_13) {
            type_13 = mAst.Type_default().fromInteger(Integer.parseInt(value));
        }
        else if (in_truncationsize_52) {
            truncationsize_52 = new Integer(value);
        }
        else if (in_allornone_60) {
            allornone_60 = new Boolean((new Integer(value)) != 0);
        }
        else if (in_preview_52) {
            preview_52 = new Integer(value);
        }
    }
    
    private void startOptions(String localName) {
        switch (localName) {
        case "filtertype":
            filtertype_11 = mAst.filter_type_default();
            in_filtertype_11 = true;
            break;
        case "mimesupport":
            mimesupport_14 = mAst.MIMESupport_default();
            in_mimesupport_14 = true;
            break;
        case "mimetruncation":
            mimetruncation_15 = mAst.MIMETruncation_default();
            in_mimetruncation_15 = true;
            break;
        case "conflict":
            conflict_60 = null;
            in_conflict_60 = true;
            break;
        case "class":
            class_10 = mAst.Class_default();
            in_class_10 = true;
            break;
        case "bodypreference":
            bodypreference_19 = mAst.BodyPreference_default();
            in_bodypreference_19 = true;
            break;
        case "bodypartpreference":
            bodypartpreference_20 = mAst.BodyPartPreference_default();
            in_bodypartpreference_20 = true;
            break;
        default:
            if (in_bodypreference_19) startBodyPreference(localName);
            if (in_bodypartpreference_20) startBodyPartPreference(localName);
            break;
        }
    }
    
    private void endOptions(String localName) {
        switch (localName) {
        case "filtertype":
            /*TYP*/ options_21.set_FilterType(filtertype_11);
            in_filtertype_11 = false;
            break;
        case "mimesupport":
            /*TYP*/ options_21.set_MIMESupport(mimesupport_14);
            in_mimesupport_14 = false;
            break;
        case "mimetruncation":
            /*TYP*/ options_21.set_MIMETruncation(mimetruncation_15);
            in_mimetruncation_15 = false;
            break;
        case "conflict":
            /*TYP*/ options_21.set_Conflict(conflict_60);
            in_conflict_60 = false;
            break;
        case "class":
            /*TYP*/ options_21.set_Class(class_10);
            in_class_10 = false;
            break;
        case "bodypreference":
            /*TYP*/ options_21.set_BodyPreference(bodypreference_19);
            in_bodypreference_19 = false;
            break;
        case "bodypartpreference":
            /*TYP*/ options_21.set_BodyPartPreference(bodypartpreference_20);
            in_bodypartpreference_20 = false;
            break;
        default:
            if (in_bodypreference_19) endBodyPreference(localName);
            if (in_bodypartpreference_20) endBodyPartPreference(localName);
            break;
        }
    }
    
    private void chOptions(String value) {
        if (in_filtertype_11) {
            filtertype_11 = mAst.filter_type_default().fromInteger(Integer.parseInt(value));
        }
        else if (in_mimesupport_14) {
            mimesupport_14 = mAst.MIMESupport_default().fromInteger(Integer.parseInt(value));
        }
        else if (in_mimetruncation_15) {
            mimetruncation_15 = mAst.MIMETruncation_default().fromInteger(Integer.parseInt(value));
        }
        else if (in_conflict_60) {
            conflict_60 = new Boolean((new Integer(value)) != 0);
        }
        else if (in_class_10) {
            class_10 = mAst.Class_default().fromString(value);
        }
        else if (in_bodypreference_19) chBodyPreference(value);
        else if (in_bodypartpreference_20) chBodyPartPreference(value);
    }
    
    private void startCollection(String localName) {
        switch (localName) {
        case "synckey":
            synckey_51 = new StringBuffer();
            in_synckey_51 = true;
            break;
        case "status":
            status_52 = null;
            in_status_52 = true;
            break;
        case "collectionid":
            collectionid_51 = new StringBuffer();
            in_collectionid_51 = true;
            break;
        case "deletesasmoves":
            deletesasmoves_60 = null;
            in_deletesasmoves_60 = true;
            break;
        case "getchanges":
            getchanges_60 = null;
            in_getchanges_60 = true;
            break;
        case "windowsize":
            windowsize_52 = null;
            in_windowsize_52 = true;
            break;
        case "conversationmode":
            conversationmode_60 = null;
            in_conversationmode_60 = true;
            break;
        case "options":
            options_21 = mAst.Options_default();
            in_options_21 = true;
            break;
        case "commands":
            commands_61 = new ArrayList<AS_SyncCommandsAlt>();
            in_commands_61 = true;
            break;
        default:
            if (in_options_21) startOptions(localName);
            if (in_commands_61) startSyncCommandsAlt(localName);
            break;
        }
    }
    
    private void endCollection(String localName) {
        switch (localName) {
        case "synckey":
            /*TYP*/ collection_32.set_SyncKey(synckey_51.toString());
            in_synckey_51 = false;
            break;
        case "status":
            /*TYP*/ collection_32.set_Status(status_52);
            in_status_52 = false;
            break;
        case "collectionid":
            /*TYP*/ collection_32.set_CollectionId(collectionid_51.toString());
            in_collectionid_51 = false;
            break;
        case "deletesasmoves":
            /*TYP*/ collection_32.set_DeletesAsMoves(deletesasmoves_60);
            in_deletesasmoves_60 = false;
            break;
        case "getchanges":
            /*TYP*/ collection_32.set_GetChanges(getchanges_60);
            in_getchanges_60 = false;
            break;
        case "windowsize":
            /*TYP*/ collection_32.set_WindowSize(windowsize_52);
            in_windowsize_52 = false;
            break;
        case "conversationmode":
            /*TYP*/ collection_32.set_ConversationMode(conversationmode_60);
            in_conversationmode_60 = false;
            break;
        case "options":
            /*TYP*/ collection_32.set_Options(options_21);
            in_options_21 = false;
            break;
        case "commands":
            /*TYP P*/ collection_32.set_Commands(commands_61);
            in_commands_61 = false;
            break;
        default:
            if (in_options_21) endOptions(localName);
            if (in_commands_61) endSyncCommandsAlt(localName);
            break;
        }
    }
    
    private void chCollection(String value) {
        if (in_synckey_51) {
            synckey_51.append(value);
        }
        else if (in_status_52) {
            status_52 = new Integer(value);
        }
        else if (in_collectionid_51) {
            collectionid_51.append(value);
        }
        else if (in_deletesasmoves_60) {
            deletesasmoves_60 = new Boolean((new Integer(value)) != 0);
        }
        else if (in_getchanges_60) {
            getchanges_60 = new Boolean(value);
        }
        else if (in_windowsize_52) {
            windowsize_52 = new Integer(value);
        }
        else if (in_conversationmode_60) {
            conversationmode_60 = new Boolean((new Integer(value)) != 0);
        }
        else if (in_options_21) chOptions(value);
        else if (in_commands_61) chSyncCommandsAlt(value);
    }
    
    private void startCollections(String localName) {
        switch (localName) {
        case "collection":
            collection_32 = mAst.Collection_default();
            in_collection_32 = true;
            break;
        default:
            if (in_collection_32) startCollection(localName);
            break;
        }
    }
    
    private void endCollections(String localName) {
        switch (localName) {
        case "collection":
            /*TYP*/ collections_33.set_Collection(collection_32);
            in_collection_32 = false;
            break;
        default:
            if (in_collection_32) endCollection(localName);
            break;
        }
    }
    
    private void chCollections(String value) {
        if (in_collection_32) chCollection(value);
    }
    
    private void startSync(String localName) {
        switch (localName) {
        case "collections":
            collections_33 = mAst.Collections_default();
            in_collections_33 = true;
            break;
        case "partial":
            partial_60 = null;
            in_partial_60 = true;
            break;
        case "wait":
            wait_52 = null;
            in_wait_52 = true;
            break;
        case "heartbeatinterval":
            heartbeatinterval_52 = null;
            in_heartbeatinterval_52 = true;
            break;
        case "windowsize":
            windowsize_52 = null;
            in_windowsize_52 = true;
            break;
        default:
            if (in_collections_33) startCollections(localName);
            break;
        }
    }
    
    private void endSync(String localName) {
        switch (localName) {
        case "collections":
            /*NONE*/ sync_34.set_Collections(collections_33);
            in_collections_33 = false;
            break;
        case "partial":
            /*NONE*/ sync_34.set_Partial(partial_60);
            in_partial_60 = false;
            break;
        case "wait":
            /*NONE*/ sync_34.set_Wait(wait_52);
            in_wait_52 = false;
            break;
        case "heartbeatinterval":
            /*NONE*/ sync_34.set_HeartbeatInterval(heartbeatinterval_52);
            in_heartbeatinterval_52 = false;
            break;
        case "windowsize":
            /*NONE*/ sync_34.set_WindowSize(windowsize_52);
            in_windowsize_52 = false;
            break;
        default:
            if (in_collections_33) endCollections(localName);
            break;
        }
    }
    
    private void chSync(String value) {
        if (in_collections_33) chCollections(value);
        else if (in_partial_60) {
            partial_60 = new Boolean(value);
        }
        else if (in_wait_52) {
            wait_52 = new Integer(value);
        }
        else if (in_heartbeatinterval_52) {
            heartbeatinterval_52 = new Integer(value);
        }
        else if (in_windowsize_52) {
            windowsize_52 = new Integer(value);
        }
    }
    
    private void startStatus(String localName) {
        switch (localName) {
        case "status":
            status_52 = null;
            in_status_52 = true;
            break;
        default:
            break;
        }
    }
    
    private void endStatus(String localName) {
        switch (localName) {
        case "status":
            /*NONE*/ status_69.set_Status(status_52);
            in_status_52 = false;
            break;
        default:
            break;
        }
    }
    
    private void chStatus(String value) {
        if (in_status_52) {
            status_52 = new Integer(value);
        }
    }
    
    private void startPolicy(String localName) {
        switch (localName) {
        case "status":
            status_52 = null;
            in_status_52 = true;
            break;
        case "policytype":
            policytype_51 = new StringBuffer();
            in_policytype_51 = true;
            break;
        case "policykey":
            policykey_51 = new StringBuffer();
            in_policykey_51 = true;
            break;
        default:
            break;
        }
    }
    
    private void endPolicy(String localName) {
        switch (localName) {
        case "status":
            /*TYP*/ policy_59.set_Status(status_52);
            in_status_52 = false;
            break;
        case "policytype":
            /*TYP*/ policy_59.set_PolicyType(policytype_51.toString());
            in_policytype_51 = false;
            break;
        case "policykey":
            /*TYP*/ policy_59.set_PolicyKey(policykey_51.toString());
            in_policykey_51 = false;
            break;
        default:
            break;
        }
    }
    
    private void chPolicy(String value) {
        if (in_status_52) {
            status_52 = new Integer(value);
        }
        else if (in_policytype_51) {
            policytype_51.append(value);
        }
        else if (in_policykey_51) {
            policykey_51.append(value);
        }
    }
    
    private void startPolicyL(String localName) {
        switch (localName) {
        case "policy":
            policy_59 = mAst.Policy_default();
            in_policy_59 = true;
            break;
        default:
            if (in_policy_59) startPolicy(localName);
            break;
        }
    }
    
    private void endPolicyL(String localName) {
        switch (localName) {
        case "policy":
            /*LTYP*/ policies_58.add(mAst.new AS_PolicyL().set_Policy(policy_59));
            in_policy_59 = false;
            break;
        default:
            if (in_policy_59) endPolicy(localName);
            break;
        }
    }
    
    private void chPolicyL(String value) {
        if (in_policy_59) chPolicy(value);
    }
    
    private void startProvisionNoDIB(String localName) {
        switch (localName) {
        case "status":
            status_52 = null;
            in_status_52 = true;
            break;
        case "policies":
            policies_58 = new ArrayList<AS_PolicyL>();
            in_policies_58 = true;
            break;
        default:
            if (in_policies_58) startPolicyL(localName);
            break;
        }
    }
    
    private void endProvisionNoDIB(String localName) {
        switch (localName) {
        case "status":
            /*NONE*/ provisionnodib_70.set_Status(status_52);
            in_status_52 = false;
            break;
        case "policies":
            /*NONE*/ provisionnodib_70.set_Policies(policies_58);
            in_policies_58 = false;
            break;
        default:
            if (in_policies_58) endPolicyL(localName);
            break;
        }
    }
    
    private void chProvisionNoDIB(String value) {
        if (in_status_52) {
            status_52 = new Integer(value);
        }
        else if (in_policies_58) chPolicyL(value);
    }
    
    private void startServerId(String localName) {
        switch (localName) {
        case "serverid":
            serverid_51 = new StringBuffer();
            in_serverid_51 = true;
            break;
        default:
            break;
        }
    }
    
    private void endServerId(String localName) {
        switch (localName) {
        case "serverid":
            /*TYP*/ delete.set_ServerId(serverid_51.toString());
            in_serverid_51 = false;
            break;
        default:
            break;
        }
    }
    
    private void chServerId(String value) {
        if (in_serverid_51) {
            serverid_51.append(value);
        }
    }
    
    private void startUpdateSPDT(String localName) {
        switch (localName) {
        case "serverid":
            serverid_51 = new StringBuffer();
            in_serverid_51 = true;
            break;
        case "parentid":
            parentid_51 = new StringBuffer();
            in_parentid_51 = true;
            break;
        case "displayname":
            displayname_51 = new StringBuffer();
            in_displayname_51 = true;
            break;
        case "type":
            type_55 = mAst.FolderSyncType_default();
            in_type_55 = true;
            break;
        default:
            break;
        }
    }
    
    private void endUpdateSPDT(String localName) {
        switch (localName) {
        case "serverid":
            /*TYP*/ update_57.set_ServerId(serverid_51.toString());
            in_serverid_51 = false;
            break;
        case "parentid":
            /*TYP*/ update_57.set_ParentId(parentid_51.toString());
            in_parentid_51 = false;
            break;
        case "displayname":
            /*TYP*/ update_57.set_DisplayName(displayname_51.toString());
            in_displayname_51 = false;
            break;
        case "type":
            /*TYP*/ update_57.set_Type(type_55);
            in_type_55 = false;
            break;
        default:
            break;
        }
    }
    
    private void chUpdateSPDT(String value) {
        if (in_serverid_51) {
            serverid_51.append(value);
        }
        else if (in_parentid_51) {
            parentid_51.append(value);
        }
        else if (in_displayname_51) {
            displayname_51.append(value);
        }
        else if (in_type_55) {
            type_55 = mAst.FolderSyncType_default().fromInteger(Integer.parseInt(value));
        }
    }
    
    private void startAddSPDT(String localName) {
        switch (localName) {
        case "serverid":
            serverid_51 = new StringBuffer();
            in_serverid_51 = true;
            break;
        case "parentid":
            parentid_51 = new StringBuffer();
            in_parentid_51 = true;
            break;
        case "displayname":
            displayname_51 = new StringBuffer();
            in_displayname_51 = true;
            break;
        case "type":
            type_55 = mAst.FolderSyncType_default();
            in_type_55 = true;
            break;
        default:
            break;
        }
    }
    
    private void endAddSPDT(String localName) {
        switch (localName) {
        case "serverid":
            /*TYP*/ add_54.set_ServerId(serverid_51.toString());
            in_serverid_51 = false;
            break;
        case "parentid":
            /*TYP*/ add_54.set_ParentId(parentid_51.toString());
            in_parentid_51 = false;
            break;
        case "displayname":
            /*TYP*/ add_54.set_DisplayName(displayname_51.toString());
            in_displayname_51 = false;
            break;
        case "type":
            /*TYP*/ add_54.set_Type(type_55);
            in_type_55 = false;
            break;
        default:
            break;
        }
    }
    
    private void chAddSPDT(String value) {
        if (in_serverid_51) {
            serverid_51.append(value);
        }
        else if (in_parentid_51) {
            parentid_51.append(value);
        }
        else if (in_displayname_51) {
            displayname_51.append(value);
        }
        else if (in_type_55) {
            type_55 = mAst.FolderSyncType_default().fromInteger(Integer.parseInt(value));
        }
    }
    
    private void startFolderSyncChange(String localName) {
        switch (localName) {
        case "count":
            count_52 = null;
            in_count_52 = true;
            break;
        case "add":
            add_54 = mAst.AddSPDT_default();
            in_add_54 = true;
            break;
        case "update":
            update_57 = mAst.UpdateSPDT_default();
            in_update_57 = true;
            break;
        case "delete":
            delete = mAst.ServerId_default();
            in_delete = true;
            break;
        default:
            if (in_add_54) startAddSPDT(localName);
            if (in_update_57) startUpdateSPDT(localName);
            if (in_delete) startServerId(localName);
            break;
        }
    }
    
    private void endFolderSyncChange(String localName) {
        switch (localName) {
        case "count":
            /*LTYP*/ changes_53.add(mAst.new AS_FolderSyncChange().set_Count(count_52));
            in_count_52 = false;
            break;
        case "add":
            /*LTYP*/ changes_53.add(mAst.new AS_FolderSyncChange().set_Add(add_54));
            in_add_54 = false;
            break;
        case "update":
            /*LTYP*/ changes_53.add(mAst.new AS_FolderSyncChange().set_Update(update_57));
            in_update_57 = false;
            break;
        case "delete":
            /*LTYP*/ changes_53.add(mAst.new AS_FolderSyncChange().set_Delete(delete));
            in_delete = false;
            break;
        default:
            if (in_add_54) endAddSPDT(localName);
            if (in_update_57) endUpdateSPDT(localName);
            if (in_delete) endServerId(localName);
            break;
        }
    }
    
    private void chFolderSyncChange(String value) {
        if (in_count_52) {
            count_52 = new Integer(value);
        }
        else if (in_add_54) chAddSPDT(value);
        else if (in_update_57) chUpdateSPDT(value);
        else if (in_delete) chServerId(value);
    }
    
    private void startFolderSyncB(String localName) {
        switch (localName) {
        case "synckey":
            synckey_51 = new StringBuffer();
            in_synckey_51 = true;
            break;
        case "status":
            status_52 = null;
            in_status_52 = true;
            break;
        case "changes":
            changes_53 = new ArrayList<AS_FolderSyncChange>();
            in_changes_53 = true;
            break;
        default:
            if (in_changes_53) startFolderSyncChange(localName);
            break;
        }
    }
    
    private void endFolderSyncB(String localName) {
        switch (localName) {
        case "synckey":
            /*NONE*/ foldersyncb_71.set_SyncKey(synckey_51.toString());
            in_synckey_51 = false;
            break;
        case "status":
            /*NONE*/ foldersyncb_71.set_Status(status_52);
            in_status_52 = false;
            break;
        case "changes":
            /*NONE*/ foldersyncb_71.set_Changes(changes_53);
            in_changes_53 = false;
            break;
        default:
            if (in_changes_53) endFolderSyncChange(localName);
            break;
        }
    }
    
    private void chFolderSyncB(String value) {
        if (in_synckey_51) {
            synckey_51.append(value);
        }
        else if (in_status_52) {
            status_52 = new Integer(value);
        }
        else if (in_changes_53) chFolderSyncChange(value);
    }
    
    @Override
    public void startElement(String namespaceURI, String localName,
                             String qName, Attributes atts) throws SAXException {
        localName = localName.toLowerCase();
        switch (localName) {
        case "foldersync":
            foldersyncb_71 = mAst.FolderSyncB_default();
            in_foldersyncb_71 = true;
            break;
        case "provision":
            provisionnodib_70 = mAst.ProvisionNoDIB_default();
            in_provisionnodib_70 = true;
            break;
        case "status":
            status_69 = mAst.Status_default();
            in_status_69 = true;
            break;
        case "sync":
            sync_34 = mAst.Sync_default();
            in_sync_34 = true;
            break;
        case "fetch":
            attachfetchresponse_68 = mAst.AttachFetchResponse_default();
            in_attachfetchresponse_68 = true;
            break;
        default:
            if (in_foldersyncb_71) startFolderSyncB(localName);
            if (in_provisionnodib_70) startProvisionNoDIB(localName);
            if (in_status_69) startStatus(localName);
            if (in_sync_34) startSync(localName);
            if (in_attachfetchresponse_68) startAttachFetchResponse(localName);
        }
    }
    
    @Override
    public void endElement(String namespaceURI, String localName, String qName) throws SAXException {
        localName = localName.toLowerCase();
        switch (localName) {
        case "foldersync":
            in_foldersyncb_71 = false;
            break;
        case "provision":
            in_provisionnodib_70 = false;
            break;
        case "status":
            in_status_69 = false;
            break;
        case "sync":
            in_sync_34 = false;
            break;
        case "fetch":
            in_attachfetchresponse_68 = false;
            break;
        default:
            if (in_foldersyncb_71) endFolderSyncB(localName);
            if (in_provisionnodib_70) endProvisionNoDIB(localName);
            if (in_status_69) endStatus(localName);
            if (in_sync_34) endSync(localName);
            if (in_attachfetchresponse_68) endAttachFetchResponse(localName);
        }
    }
    
    @Override
    public void characters(char ch[], int start, int length) {
        value = new String(ch, start, length);
        value = value.replaceAll("WBXML_lt","<").replaceAll("WBXML_gt",">");
        if (in_foldersyncb_71) chFolderSyncB(value);
        if (in_provisionnodib_70) chProvisionNoDIB(value);
        if (in_status_69) chStatus(value);
        if (in_sync_34) chSync(value);
        if (in_attachfetchresponse_68) chAttachFetchResponse(value);
    }
    
    public AS_FolderSyncB getFolderSyncB() throws Exception { return foldersyncb_71; }
    public AS_ProvisionNoDIB getProvisionNoDIB() throws Exception { return provisionnodib_70; }
    public AS_Status getStatus() throws Exception { return status_69; }
    public AS_Sync getSync() throws Exception { return sync_34; }
    public AS_AttachFetchResponse getAttachFetchResponse() throws Exception { return attachfetchresponse_68; }

}

// End of ASXMLParser
