/*
 * ***** BEGIN LICENSE BLOCK *****
 * Zimbra Collaboration Suite Server
 * Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013 VMware, Inc.
 * 
 * The contents of this file are subject to the Zimbra Public License
 * Version 1.3 ("License"); you may not use this file except in
 * compliance with the License.  You may obtain a copy of the License at
 * http://www.zimbra.com/license.
 * 
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.
 * ***** END LICENSE BLOCK *****
 */

/*
 * Created on Sep 23, 2004
 *
 * Window - Preferences - Java - Code Style - Code Templates
 */
package org.zmail.cs.account;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.zmail.common.account.ZAttr;
import org.zmail.common.account.ZAttrProvisioning;
import org.zmail.common.util.DateUtil;
import org.zmail.common.util.StringUtil;

/**
 * AUTO-GENERATED. DO NOT EDIT.
 *
 */
public abstract class ZAttrCos extends NamedEntry {

    public ZAttrCos(String name, String id, Map<String,Object> attrs, Provisioning prov) {
        super(name, id, attrs, null, prov);
    }

    ///// BEGIN-AUTO-GEN-REPLACE

    /* build: 9.0.0_BETA1_1111 rgadipuuri 20130510-1145 */

    /**
     * RFC2256: common name(s) for which the entity is known by
     *
     * @return cn, or null if unset
     */
    @ZAttr(id=-1)
    public String getCn() {
        return getAttr(Provisioning.A_cn, null);
    }

    /**
     * RFC2256: common name(s) for which the entity is known by
     *
     * @param cn new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=-1)
    public void setCn(String cn) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_cn, cn);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * RFC2256: common name(s) for which the entity is known by
     *
     * @param cn new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=-1)
    public Map<String,Object> setCn(String cn, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_cn, cn);
        return attrs;
    }

    /**
     * RFC2256: common name(s) for which the entity is known by
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=-1)
    public void unsetCn() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_cn, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * RFC2256: common name(s) for which the entity is known by
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=-1)
    public Map<String,Object> unsetCn(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_cn, "");
        return attrs;
    }

    /**
     * RFC2256: descriptive information
     *
     * @return description, or empty array if unset
     */
    @ZAttr(id=-1)
    public String[] getDescription() {
        return getMultiAttr(Provisioning.A_description);
    }

    /**
     * RFC2256: descriptive information
     *
     * @param description new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=-1)
    public void setDescription(String[] description) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_description, description);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * RFC2256: descriptive information
     *
     * @param description new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=-1)
    public Map<String,Object> setDescription(String[] description, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_description, description);
        return attrs;
    }

    /**
     * RFC2256: descriptive information
     *
     * @param description new to add to existing values
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=-1)
    public void addDescription(String description) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "+" + Provisioning.A_description, description);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * RFC2256: descriptive information
     *
     * @param description new to add to existing values
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=-1)
    public Map<String,Object> addDescription(String description, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "+" + Provisioning.A_description, description);
        return attrs;
    }

    /**
     * RFC2256: descriptive information
     *
     * @param description existing value to remove
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=-1)
    public void removeDescription(String description) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "-" + Provisioning.A_description, description);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * RFC2256: descriptive information
     *
     * @param description existing value to remove
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=-1)
    public Map<String,Object> removeDescription(String description, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "-" + Provisioning.A_description, description);
        return attrs;
    }

    /**
     * RFC2256: descriptive information
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=-1)
    public void unsetDescription() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_description, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * RFC2256: descriptive information
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=-1)
    public Map<String,Object> unsetDescription(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_description, "");
        return attrs;
    }

    /**
     * Zmail access control list
     *
     * @return zmailACE, or empty array if unset
     *
     * @since ZCS 5.0.7
     */
    @ZAttr(id=659)
    public String[] getACE() {
        return getMultiAttr(Provisioning.A_zmailACE);
    }

    /**
     * Zmail access control list
     *
     * @param zmailACE new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.7
     */
    @ZAttr(id=659)
    public void setACE(String[] zmailACE) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailACE, zmailACE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Zmail access control list
     *
     * @param zmailACE new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.7
     */
    @ZAttr(id=659)
    public Map<String,Object> setACE(String[] zmailACE, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailACE, zmailACE);
        return attrs;
    }

    /**
     * Zmail access control list
     *
     * @param zmailACE new to add to existing values
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.7
     */
    @ZAttr(id=659)
    public void addACE(String zmailACE) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "+" + Provisioning.A_zmailACE, zmailACE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Zmail access control list
     *
     * @param zmailACE new to add to existing values
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.7
     */
    @ZAttr(id=659)
    public Map<String,Object> addACE(String zmailACE, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "+" + Provisioning.A_zmailACE, zmailACE);
        return attrs;
    }

    /**
     * Zmail access control list
     *
     * @param zmailACE existing value to remove
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.7
     */
    @ZAttr(id=659)
    public void removeACE(String zmailACE) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "-" + Provisioning.A_zmailACE, zmailACE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Zmail access control list
     *
     * @param zmailACE existing value to remove
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.7
     */
    @ZAttr(id=659)
    public Map<String,Object> removeACE(String zmailACE, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "-" + Provisioning.A_zmailACE, zmailACE);
        return attrs;
    }

    /**
     * Zmail access control list
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.7
     */
    @ZAttr(id=659)
    public void unsetACE() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailACE, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Zmail access control list
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.7
     */
    @ZAttr(id=659)
    public Map<String,Object> unsetACE(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailACE, "");
        return attrs;
    }

    /**
     * lifetime of newly created admin auth tokens. Must be in valid duration
     * format: {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h -
     * hours, m - minutes, s - seconds, d - days, ms - milliseconds. If time
     * unit is not specified, the default is s(seconds).
     *
     * <p>Use getAdminAuthTokenLifetimeAsString to access value as a string.
     *
     * @see #getAdminAuthTokenLifetimeAsString()
     *
     * @return zmailAdminAuthTokenLifetime in millseconds, or 43200000 (12h)  if unset
     */
    @ZAttr(id=109)
    public long getAdminAuthTokenLifetime() {
        return getTimeInterval(Provisioning.A_zmailAdminAuthTokenLifetime, 43200000L);
    }

    /**
     * lifetime of newly created admin auth tokens. Must be in valid duration
     * format: {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h -
     * hours, m - minutes, s - seconds, d - days, ms - milliseconds. If time
     * unit is not specified, the default is s(seconds).
     *
     * @return zmailAdminAuthTokenLifetime, or "12h" if unset
     */
    @ZAttr(id=109)
    public String getAdminAuthTokenLifetimeAsString() {
        return getAttr(Provisioning.A_zmailAdminAuthTokenLifetime, "12h");
    }

    /**
     * lifetime of newly created admin auth tokens. Must be in valid duration
     * format: {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h -
     * hours, m - minutes, s - seconds, d - days, ms - milliseconds. If time
     * unit is not specified, the default is s(seconds).
     *
     * @param zmailAdminAuthTokenLifetime new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=109)
    public void setAdminAuthTokenLifetime(String zmailAdminAuthTokenLifetime) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailAdminAuthTokenLifetime, zmailAdminAuthTokenLifetime);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * lifetime of newly created admin auth tokens. Must be in valid duration
     * format: {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h -
     * hours, m - minutes, s - seconds, d - days, ms - milliseconds. If time
     * unit is not specified, the default is s(seconds).
     *
     * @param zmailAdminAuthTokenLifetime new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=109)
    public Map<String,Object> setAdminAuthTokenLifetime(String zmailAdminAuthTokenLifetime, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailAdminAuthTokenLifetime, zmailAdminAuthTokenLifetime);
        return attrs;
    }

    /**
     * lifetime of newly created admin auth tokens. Must be in valid duration
     * format: {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h -
     * hours, m - minutes, s - seconds, d - days, ms - milliseconds. If time
     * unit is not specified, the default is s(seconds).
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=109)
    public void unsetAdminAuthTokenLifetime() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailAdminAuthTokenLifetime, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * lifetime of newly created admin auth tokens. Must be in valid duration
     * format: {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h -
     * hours, m - minutes, s - seconds, d - days, ms - milliseconds. If time
     * unit is not specified, the default is s(seconds).
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=109)
    public Map<String,Object> unsetAdminAuthTokenLifetime(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailAdminAuthTokenLifetime, "");
        return attrs;
    }

    /**
     * admin saved searches
     *
     * @return zmailAdminSavedSearches, or empty array if unset
     */
    @ZAttr(id=446)
    public String[] getAdminSavedSearches() {
        return getMultiAttr(Provisioning.A_zmailAdminSavedSearches);
    }

    /**
     * admin saved searches
     *
     * @param zmailAdminSavedSearches new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=446)
    public void setAdminSavedSearches(String[] zmailAdminSavedSearches) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailAdminSavedSearches, zmailAdminSavedSearches);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * admin saved searches
     *
     * @param zmailAdminSavedSearches new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=446)
    public Map<String,Object> setAdminSavedSearches(String[] zmailAdminSavedSearches, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailAdminSavedSearches, zmailAdminSavedSearches);
        return attrs;
    }

    /**
     * admin saved searches
     *
     * @param zmailAdminSavedSearches new to add to existing values
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=446)
    public void addAdminSavedSearches(String zmailAdminSavedSearches) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "+" + Provisioning.A_zmailAdminSavedSearches, zmailAdminSavedSearches);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * admin saved searches
     *
     * @param zmailAdminSavedSearches new to add to existing values
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=446)
    public Map<String,Object> addAdminSavedSearches(String zmailAdminSavedSearches, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "+" + Provisioning.A_zmailAdminSavedSearches, zmailAdminSavedSearches);
        return attrs;
    }

    /**
     * admin saved searches
     *
     * @param zmailAdminSavedSearches existing value to remove
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=446)
    public void removeAdminSavedSearches(String zmailAdminSavedSearches) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "-" + Provisioning.A_zmailAdminSavedSearches, zmailAdminSavedSearches);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * admin saved searches
     *
     * @param zmailAdminSavedSearches existing value to remove
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=446)
    public Map<String,Object> removeAdminSavedSearches(String zmailAdminSavedSearches, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "-" + Provisioning.A_zmailAdminSavedSearches, zmailAdminSavedSearches);
        return attrs;
    }

    /**
     * admin saved searches
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=446)
    public void unsetAdminSavedSearches() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailAdminSavedSearches, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * admin saved searches
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=446)
    public Map<String,Object> unsetAdminSavedSearches(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailAdminSavedSearches, "");
        return attrs;
    }

    /**
     * Whether this account can use any from address. Not changeable by
     * domain admin to allow arbitrary addresses
     *
     * @return zmailAllowAnyFromAddress, or false if unset
     */
    @ZAttr(id=427)
    public boolean isAllowAnyFromAddress() {
        return getBooleanAttr(Provisioning.A_zmailAllowAnyFromAddress, false);
    }

    /**
     * Whether this account can use any from address. Not changeable by
     * domain admin to allow arbitrary addresses
     *
     * @param zmailAllowAnyFromAddress new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=427)
    public void setAllowAnyFromAddress(boolean zmailAllowAnyFromAddress) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailAllowAnyFromAddress, zmailAllowAnyFromAddress ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Whether this account can use any from address. Not changeable by
     * domain admin to allow arbitrary addresses
     *
     * @param zmailAllowAnyFromAddress new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=427)
    public Map<String,Object> setAllowAnyFromAddress(boolean zmailAllowAnyFromAddress, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailAllowAnyFromAddress, zmailAllowAnyFromAddress ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * Whether this account can use any from address. Not changeable by
     * domain admin to allow arbitrary addresses
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=427)
    public void unsetAllowAnyFromAddress() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailAllowAnyFromAddress, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Whether this account can use any from address. Not changeable by
     * domain admin to allow arbitrary addresses
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=427)
    public Map<String,Object> unsetAllowAnyFromAddress(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailAllowAnyFromAddress, "");
        return attrs;
    }

    /**
     * An account or CoS setting that works with the name template that
     * allows you to dictate the date format used in the name template. This
     * is a Java SimpleDateFormat specifier. The default is an LDAP
     * generalized time format:
     *
     * @return zmailArchiveAccountDateTemplate, or "yyyyMMdd" if unset
     */
    @ZAttr(id=432)
    public String getArchiveAccountDateTemplate() {
        return getAttr(Provisioning.A_zmailArchiveAccountDateTemplate, "yyyyMMdd");
    }

    /**
     * An account or CoS setting that works with the name template that
     * allows you to dictate the date format used in the name template. This
     * is a Java SimpleDateFormat specifier. The default is an LDAP
     * generalized time format:
     *
     * @param zmailArchiveAccountDateTemplate new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=432)
    public void setArchiveAccountDateTemplate(String zmailArchiveAccountDateTemplate) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailArchiveAccountDateTemplate, zmailArchiveAccountDateTemplate);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * An account or CoS setting that works with the name template that
     * allows you to dictate the date format used in the name template. This
     * is a Java SimpleDateFormat specifier. The default is an LDAP
     * generalized time format:
     *
     * @param zmailArchiveAccountDateTemplate new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=432)
    public Map<String,Object> setArchiveAccountDateTemplate(String zmailArchiveAccountDateTemplate, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailArchiveAccountDateTemplate, zmailArchiveAccountDateTemplate);
        return attrs;
    }

    /**
     * An account or CoS setting that works with the name template that
     * allows you to dictate the date format used in the name template. This
     * is a Java SimpleDateFormat specifier. The default is an LDAP
     * generalized time format:
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=432)
    public void unsetArchiveAccountDateTemplate() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailArchiveAccountDateTemplate, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * An account or CoS setting that works with the name template that
     * allows you to dictate the date format used in the name template. This
     * is a Java SimpleDateFormat specifier. The default is an LDAP
     * generalized time format:
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=432)
    public Map<String,Object> unsetArchiveAccountDateTemplate(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailArchiveAccountDateTemplate, "");
        return attrs;
    }

    /**
     * An account or CoS setting - typically only in CoS - that tells the
     * archiving system how to derive the archive mailbox name. ID, USER,
     * DATE, and DOMAIN are expanded.
     *
     * @return zmailArchiveAccountNameTemplate, or "${USER}-${DATE}@${DOMAIN}.archive" if unset
     */
    @ZAttr(id=431)
    public String getArchiveAccountNameTemplate() {
        return getAttr(Provisioning.A_zmailArchiveAccountNameTemplate, "${USER}-${DATE}@${DOMAIN}.archive");
    }

    /**
     * An account or CoS setting - typically only in CoS - that tells the
     * archiving system how to derive the archive mailbox name. ID, USER,
     * DATE, and DOMAIN are expanded.
     *
     * @param zmailArchiveAccountNameTemplate new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=431)
    public void setArchiveAccountNameTemplate(String zmailArchiveAccountNameTemplate) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailArchiveAccountNameTemplate, zmailArchiveAccountNameTemplate);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * An account or CoS setting - typically only in CoS - that tells the
     * archiving system how to derive the archive mailbox name. ID, USER,
     * DATE, and DOMAIN are expanded.
     *
     * @param zmailArchiveAccountNameTemplate new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=431)
    public Map<String,Object> setArchiveAccountNameTemplate(String zmailArchiveAccountNameTemplate, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailArchiveAccountNameTemplate, zmailArchiveAccountNameTemplate);
        return attrs;
    }

    /**
     * An account or CoS setting - typically only in CoS - that tells the
     * archiving system how to derive the archive mailbox name. ID, USER,
     * DATE, and DOMAIN are expanded.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=431)
    public void unsetArchiveAccountNameTemplate() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailArchiveAccountNameTemplate, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * An account or CoS setting - typically only in CoS - that tells the
     * archiving system how to derive the archive mailbox name. ID, USER,
     * DATE, and DOMAIN are expanded.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=431)
    public Map<String,Object> unsetArchiveAccountNameTemplate(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailArchiveAccountNameTemplate, "");
        return attrs;
    }

    /**
     * whether account archiving is enabled
     *
     * @return zmailArchiveEnabled, or false if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1206)
    public boolean isArchiveEnabled() {
        return getBooleanAttr(Provisioning.A_zmailArchiveEnabled, false);
    }

    /**
     * whether account archiving is enabled
     *
     * @param zmailArchiveEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1206)
    public void setArchiveEnabled(boolean zmailArchiveEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailArchiveEnabled, zmailArchiveEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether account archiving is enabled
     *
     * @param zmailArchiveEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1206)
    public Map<String,Object> setArchiveEnabled(boolean zmailArchiveEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailArchiveEnabled, zmailArchiveEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether account archiving is enabled
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1206)
    public void unsetArchiveEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailArchiveEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether account archiving is enabled
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1206)
    public Map<String,Object> unsetArchiveEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailArchiveEnabled, "");
        return attrs;
    }

    /**
     * block all attachment downloading
     *
     * @return zmailAttachmentsBlocked, or false if unset
     */
    @ZAttr(id=115)
    public boolean isAttachmentsBlocked() {
        return getBooleanAttr(Provisioning.A_zmailAttachmentsBlocked, false);
    }

    /**
     * block all attachment downloading
     *
     * @param zmailAttachmentsBlocked new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=115)
    public void setAttachmentsBlocked(boolean zmailAttachmentsBlocked) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailAttachmentsBlocked, zmailAttachmentsBlocked ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * block all attachment downloading
     *
     * @param zmailAttachmentsBlocked new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=115)
    public Map<String,Object> setAttachmentsBlocked(boolean zmailAttachmentsBlocked, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailAttachmentsBlocked, zmailAttachmentsBlocked ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * block all attachment downloading
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=115)
    public void unsetAttachmentsBlocked() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailAttachmentsBlocked, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * block all attachment downloading
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=115)
    public Map<String,Object> unsetAttachmentsBlocked(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailAttachmentsBlocked, "");
        return attrs;
    }

    /**
     * whether or not to index attachments
     *
     * @return zmailAttachmentsIndexingEnabled, or true if unset
     */
    @ZAttr(id=173)
    public boolean isAttachmentsIndexingEnabled() {
        return getBooleanAttr(Provisioning.A_zmailAttachmentsIndexingEnabled, true);
    }

    /**
     * whether or not to index attachments
     *
     * @param zmailAttachmentsIndexingEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=173)
    public void setAttachmentsIndexingEnabled(boolean zmailAttachmentsIndexingEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailAttachmentsIndexingEnabled, zmailAttachmentsIndexingEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether or not to index attachments
     *
     * @param zmailAttachmentsIndexingEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=173)
    public Map<String,Object> setAttachmentsIndexingEnabled(boolean zmailAttachmentsIndexingEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailAttachmentsIndexingEnabled, zmailAttachmentsIndexingEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether or not to index attachments
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=173)
    public void unsetAttachmentsIndexingEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailAttachmentsIndexingEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether or not to index attachments
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=173)
    public Map<String,Object> unsetAttachmentsIndexingEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailAttachmentsIndexingEnabled, "");
        return attrs;
    }

    /**
     * view all attachments in html only
     *
     * @return zmailAttachmentsViewInHtmlOnly, or false if unset
     */
    @ZAttr(id=116)
    public boolean isAttachmentsViewInHtmlOnly() {
        return getBooleanAttr(Provisioning.A_zmailAttachmentsViewInHtmlOnly, false);
    }

    /**
     * view all attachments in html only
     *
     * @param zmailAttachmentsViewInHtmlOnly new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=116)
    public void setAttachmentsViewInHtmlOnly(boolean zmailAttachmentsViewInHtmlOnly) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailAttachmentsViewInHtmlOnly, zmailAttachmentsViewInHtmlOnly ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * view all attachments in html only
     *
     * @param zmailAttachmentsViewInHtmlOnly new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=116)
    public Map<String,Object> setAttachmentsViewInHtmlOnly(boolean zmailAttachmentsViewInHtmlOnly, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailAttachmentsViewInHtmlOnly, zmailAttachmentsViewInHtmlOnly ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * view all attachments in html only
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=116)
    public void unsetAttachmentsViewInHtmlOnly() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailAttachmentsViewInHtmlOnly, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * view all attachments in html only
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=116)
    public Map<String,Object> unsetAttachmentsViewInHtmlOnly(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailAttachmentsViewInHtmlOnly, "");
        return attrs;
    }

    /**
     * lifetime of newly created auth tokens. Must be in valid duration
     * format: {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h -
     * hours, m - minutes, s - seconds, d - days, ms - milliseconds. If time
     * unit is not specified, the default is s(seconds).
     *
     * <p>Use getAuthTokenLifetimeAsString to access value as a string.
     *
     * @see #getAuthTokenLifetimeAsString()
     *
     * @return zmailAuthTokenLifetime in millseconds, or 172800000 (2d)  if unset
     */
    @ZAttr(id=108)
    public long getAuthTokenLifetime() {
        return getTimeInterval(Provisioning.A_zmailAuthTokenLifetime, 172800000L);
    }

    /**
     * lifetime of newly created auth tokens. Must be in valid duration
     * format: {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h -
     * hours, m - minutes, s - seconds, d - days, ms - milliseconds. If time
     * unit is not specified, the default is s(seconds).
     *
     * @return zmailAuthTokenLifetime, or "2d" if unset
     */
    @ZAttr(id=108)
    public String getAuthTokenLifetimeAsString() {
        return getAttr(Provisioning.A_zmailAuthTokenLifetime, "2d");
    }

    /**
     * lifetime of newly created auth tokens. Must be in valid duration
     * format: {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h -
     * hours, m - minutes, s - seconds, d - days, ms - milliseconds. If time
     * unit is not specified, the default is s(seconds).
     *
     * @param zmailAuthTokenLifetime new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=108)
    public void setAuthTokenLifetime(String zmailAuthTokenLifetime) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailAuthTokenLifetime, zmailAuthTokenLifetime);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * lifetime of newly created auth tokens. Must be in valid duration
     * format: {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h -
     * hours, m - minutes, s - seconds, d - days, ms - milliseconds. If time
     * unit is not specified, the default is s(seconds).
     *
     * @param zmailAuthTokenLifetime new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=108)
    public Map<String,Object> setAuthTokenLifetime(String zmailAuthTokenLifetime, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailAuthTokenLifetime, zmailAuthTokenLifetime);
        return attrs;
    }

    /**
     * lifetime of newly created auth tokens. Must be in valid duration
     * format: {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h -
     * hours, m - minutes, s - seconds, d - days, ms - milliseconds. If time
     * unit is not specified, the default is s(seconds).
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=108)
    public void unsetAuthTokenLifetime() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailAuthTokenLifetime, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * lifetime of newly created auth tokens. Must be in valid duration
     * format: {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h -
     * hours, m - minutes, s - seconds, d - days, ms - milliseconds. If time
     * unit is not specified, the default is s(seconds).
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=108)
    public Map<String,Object> unsetAuthTokenLifetime(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailAuthTokenLifetime, "");
        return attrs;
    }

    /**
     * Locales available for this account
     *
     * @return zmailAvailableLocale, or empty array if unset
     */
    @ZAttr(id=487)
    public String[] getAvailableLocale() {
        return getMultiAttr(Provisioning.A_zmailAvailableLocale);
    }

    /**
     * Locales available for this account
     *
     * @param zmailAvailableLocale new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=487)
    public void setAvailableLocale(String[] zmailAvailableLocale) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailAvailableLocale, zmailAvailableLocale);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Locales available for this account
     *
     * @param zmailAvailableLocale new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=487)
    public Map<String,Object> setAvailableLocale(String[] zmailAvailableLocale, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailAvailableLocale, zmailAvailableLocale);
        return attrs;
    }

    /**
     * Locales available for this account
     *
     * @param zmailAvailableLocale new to add to existing values
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=487)
    public void addAvailableLocale(String zmailAvailableLocale) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "+" + Provisioning.A_zmailAvailableLocale, zmailAvailableLocale);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Locales available for this account
     *
     * @param zmailAvailableLocale new to add to existing values
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=487)
    public Map<String,Object> addAvailableLocale(String zmailAvailableLocale, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "+" + Provisioning.A_zmailAvailableLocale, zmailAvailableLocale);
        return attrs;
    }

    /**
     * Locales available for this account
     *
     * @param zmailAvailableLocale existing value to remove
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=487)
    public void removeAvailableLocale(String zmailAvailableLocale) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "-" + Provisioning.A_zmailAvailableLocale, zmailAvailableLocale);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Locales available for this account
     *
     * @param zmailAvailableLocale existing value to remove
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=487)
    public Map<String,Object> removeAvailableLocale(String zmailAvailableLocale, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "-" + Provisioning.A_zmailAvailableLocale, zmailAvailableLocale);
        return attrs;
    }

    /**
     * Locales available for this account
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=487)
    public void unsetAvailableLocale() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailAvailableLocale, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Locales available for this account
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=487)
    public Map<String,Object> unsetAvailableLocale(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailAvailableLocale, "");
        return attrs;
    }

    /**
     * Skins available for this account. Fallback order is: 1. the normal
     * account/cos inheritance 2. if not set on account/cos, use the value on
     * the domain of the account
     *
     * @return zmailAvailableSkin, or empty array if unset
     */
    @ZAttr(id=364)
    public String[] getAvailableSkin() {
        return getMultiAttr(Provisioning.A_zmailAvailableSkin);
    }

    /**
     * Skins available for this account. Fallback order is: 1. the normal
     * account/cos inheritance 2. if not set on account/cos, use the value on
     * the domain of the account
     *
     * @param zmailAvailableSkin new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=364)
    public void setAvailableSkin(String[] zmailAvailableSkin) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailAvailableSkin, zmailAvailableSkin);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Skins available for this account. Fallback order is: 1. the normal
     * account/cos inheritance 2. if not set on account/cos, use the value on
     * the domain of the account
     *
     * @param zmailAvailableSkin new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=364)
    public Map<String,Object> setAvailableSkin(String[] zmailAvailableSkin, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailAvailableSkin, zmailAvailableSkin);
        return attrs;
    }

    /**
     * Skins available for this account. Fallback order is: 1. the normal
     * account/cos inheritance 2. if not set on account/cos, use the value on
     * the domain of the account
     *
     * @param zmailAvailableSkin new to add to existing values
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=364)
    public void addAvailableSkin(String zmailAvailableSkin) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "+" + Provisioning.A_zmailAvailableSkin, zmailAvailableSkin);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Skins available for this account. Fallback order is: 1. the normal
     * account/cos inheritance 2. if not set on account/cos, use the value on
     * the domain of the account
     *
     * @param zmailAvailableSkin new to add to existing values
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=364)
    public Map<String,Object> addAvailableSkin(String zmailAvailableSkin, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "+" + Provisioning.A_zmailAvailableSkin, zmailAvailableSkin);
        return attrs;
    }

    /**
     * Skins available for this account. Fallback order is: 1. the normal
     * account/cos inheritance 2. if not set on account/cos, use the value on
     * the domain of the account
     *
     * @param zmailAvailableSkin existing value to remove
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=364)
    public void removeAvailableSkin(String zmailAvailableSkin) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "-" + Provisioning.A_zmailAvailableSkin, zmailAvailableSkin);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Skins available for this account. Fallback order is: 1. the normal
     * account/cos inheritance 2. if not set on account/cos, use the value on
     * the domain of the account
     *
     * @param zmailAvailableSkin existing value to remove
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=364)
    public Map<String,Object> removeAvailableSkin(String zmailAvailableSkin, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "-" + Provisioning.A_zmailAvailableSkin, zmailAvailableSkin);
        return attrs;
    }

    /**
     * Skins available for this account. Fallback order is: 1. the normal
     * account/cos inheritance 2. if not set on account/cos, use the value on
     * the domain of the account
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=364)
    public void unsetAvailableSkin() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailAvailableSkin, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Skins available for this account. Fallback order is: 1. the normal
     * account/cos inheritance 2. if not set on account/cos, use the value on
     * the domain of the account
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=364)
    public Map<String,Object> unsetAvailableSkin(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailAvailableSkin, "");
        return attrs;
    }

    /**
     * Batch size to use when indexing data
     *
     * @return zmailBatchedIndexingSize, or 20 if unset
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=619)
    public int getBatchedIndexingSize() {
        return getIntAttr(Provisioning.A_zmailBatchedIndexingSize, 20);
    }

    /**
     * Batch size to use when indexing data
     *
     * @param zmailBatchedIndexingSize new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=619)
    public void setBatchedIndexingSize(int zmailBatchedIndexingSize) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailBatchedIndexingSize, Integer.toString(zmailBatchedIndexingSize));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Batch size to use when indexing data
     *
     * @param zmailBatchedIndexingSize new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=619)
    public Map<String,Object> setBatchedIndexingSize(int zmailBatchedIndexingSize, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailBatchedIndexingSize, Integer.toString(zmailBatchedIndexingSize));
        return attrs;
    }

    /**
     * Batch size to use when indexing data
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=619)
    public void unsetBatchedIndexingSize() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailBatchedIndexingSize, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Batch size to use when indexing data
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=619)
    public Map<String,Object> unsetBatchedIndexingSize(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailBatchedIndexingSize, "");
        return attrs;
    }

    /**
     * CalDAV shared folder cache duration. Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * <p>Use getCalendarCalDavSharedFolderCacheDurationAsString to access value as a string.
     *
     * @see #getCalendarCalDavSharedFolderCacheDurationAsString()
     *
     * @return zmailCalendarCalDavSharedFolderCacheDuration in millseconds, or 60000 (1m)  if unset
     *
     * @since ZCS 5.0.14
     */
    @ZAttr(id=817)
    public long getCalendarCalDavSharedFolderCacheDuration() {
        return getTimeInterval(Provisioning.A_zmailCalendarCalDavSharedFolderCacheDuration, 60000L);
    }

    /**
     * CalDAV shared folder cache duration. Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @return zmailCalendarCalDavSharedFolderCacheDuration, or "1m" if unset
     *
     * @since ZCS 5.0.14
     */
    @ZAttr(id=817)
    public String getCalendarCalDavSharedFolderCacheDurationAsString() {
        return getAttr(Provisioning.A_zmailCalendarCalDavSharedFolderCacheDuration, "1m");
    }

    /**
     * CalDAV shared folder cache duration. Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param zmailCalendarCalDavSharedFolderCacheDuration new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.14
     */
    @ZAttr(id=817)
    public void setCalendarCalDavSharedFolderCacheDuration(String zmailCalendarCalDavSharedFolderCacheDuration) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailCalendarCalDavSharedFolderCacheDuration, zmailCalendarCalDavSharedFolderCacheDuration);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * CalDAV shared folder cache duration. Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param zmailCalendarCalDavSharedFolderCacheDuration new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.14
     */
    @ZAttr(id=817)
    public Map<String,Object> setCalendarCalDavSharedFolderCacheDuration(String zmailCalendarCalDavSharedFolderCacheDuration, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailCalendarCalDavSharedFolderCacheDuration, zmailCalendarCalDavSharedFolderCacheDuration);
        return attrs;
    }

    /**
     * CalDAV shared folder cache duration. Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.14
     */
    @ZAttr(id=817)
    public void unsetCalendarCalDavSharedFolderCacheDuration() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailCalendarCalDavSharedFolderCacheDuration, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * CalDAV shared folder cache duration. Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.14
     */
    @ZAttr(id=817)
    public Map<String,Object> unsetCalendarCalDavSharedFolderCacheDuration(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailCalendarCalDavSharedFolderCacheDuration, "");
        return attrs;
    }

    /**
     * see description of zmailCalendarCalDavSyncStart. Must be in valid
     * duration format: {digits}{time-unit}. digits: 0-9, time-unit:
     * [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days, ms -
     * milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * <p>Use getCalendarCalDavSyncEndAsString to access value as a string.
     *
     * @see #getCalendarCalDavSyncEndAsString()
     *
     * @return zmailCalendarCalDavSyncEnd in millseconds, or -1 if unset
     *
     * @since ZCS 5.0.14
     */
    @ZAttr(id=816)
    public long getCalendarCalDavSyncEnd() {
        return getTimeInterval(Provisioning.A_zmailCalendarCalDavSyncEnd, -1L);
    }

    /**
     * see description of zmailCalendarCalDavSyncStart. Must be in valid
     * duration format: {digits}{time-unit}. digits: 0-9, time-unit:
     * [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days, ms -
     * milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @return zmailCalendarCalDavSyncEnd, or null if unset
     *
     * @since ZCS 5.0.14
     */
    @ZAttr(id=816)
    public String getCalendarCalDavSyncEndAsString() {
        return getAttr(Provisioning.A_zmailCalendarCalDavSyncEnd, null);
    }

    /**
     * see description of zmailCalendarCalDavSyncStart. Must be in valid
     * duration format: {digits}{time-unit}. digits: 0-9, time-unit:
     * [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days, ms -
     * milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @param zmailCalendarCalDavSyncEnd new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.14
     */
    @ZAttr(id=816)
    public void setCalendarCalDavSyncEnd(String zmailCalendarCalDavSyncEnd) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailCalendarCalDavSyncEnd, zmailCalendarCalDavSyncEnd);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * see description of zmailCalendarCalDavSyncStart. Must be in valid
     * duration format: {digits}{time-unit}. digits: 0-9, time-unit:
     * [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days, ms -
     * milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @param zmailCalendarCalDavSyncEnd new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.14
     */
    @ZAttr(id=816)
    public Map<String,Object> setCalendarCalDavSyncEnd(String zmailCalendarCalDavSyncEnd, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailCalendarCalDavSyncEnd, zmailCalendarCalDavSyncEnd);
        return attrs;
    }

    /**
     * see description of zmailCalendarCalDavSyncStart. Must be in valid
     * duration format: {digits}{time-unit}. digits: 0-9, time-unit:
     * [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days, ms -
     * milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.14
     */
    @ZAttr(id=816)
    public void unsetCalendarCalDavSyncEnd() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailCalendarCalDavSyncEnd, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * see description of zmailCalendarCalDavSyncStart. Must be in valid
     * duration format: {digits}{time-unit}. digits: 0-9, time-unit:
     * [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days, ms -
     * milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.14
     */
    @ZAttr(id=816)
    public Map<String,Object> unsetCalendarCalDavSyncEnd(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailCalendarCalDavSyncEnd, "");
        return attrs;
    }

    /**
     * zmailCalendarCalDavSyncStart and zmailCalendarCalDavSyncEnd limits
     * the window of appointment data available via CalDAV. for example when
     * zmailCalendarCalDavSyncStart is set to 30 days, and
     * zmailCalendarCalDavSyncEnd is set to 1 years, then the appointments
     * between (now - 30 days) and (now + 1 year) will be available via
     * CalDAV. When they are unset all the appointments are available via
     * CalDAV. . Must be in valid duration format: {digits}{time-unit}.
     * digits: 0-9, time-unit: [hmsd]|ms. h - hours, m - minutes, s -
     * seconds, d - days, ms - milliseconds. If time unit is not specified,
     * the default is s(seconds).
     *
     * <p>Use getCalendarCalDavSyncStartAsString to access value as a string.
     *
     * @see #getCalendarCalDavSyncStartAsString()
     *
     * @return zmailCalendarCalDavSyncStart in millseconds, or -1 if unset
     *
     * @since ZCS 5.0.14
     */
    @ZAttr(id=815)
    public long getCalendarCalDavSyncStart() {
        return getTimeInterval(Provisioning.A_zmailCalendarCalDavSyncStart, -1L);
    }

    /**
     * zmailCalendarCalDavSyncStart and zmailCalendarCalDavSyncEnd limits
     * the window of appointment data available via CalDAV. for example when
     * zmailCalendarCalDavSyncStart is set to 30 days, and
     * zmailCalendarCalDavSyncEnd is set to 1 years, then the appointments
     * between (now - 30 days) and (now + 1 year) will be available via
     * CalDAV. When they are unset all the appointments are available via
     * CalDAV. . Must be in valid duration format: {digits}{time-unit}.
     * digits: 0-9, time-unit: [hmsd]|ms. h - hours, m - minutes, s -
     * seconds, d - days, ms - milliseconds. If time unit is not specified,
     * the default is s(seconds).
     *
     * @return zmailCalendarCalDavSyncStart, or null if unset
     *
     * @since ZCS 5.0.14
     */
    @ZAttr(id=815)
    public String getCalendarCalDavSyncStartAsString() {
        return getAttr(Provisioning.A_zmailCalendarCalDavSyncStart, null);
    }

    /**
     * zmailCalendarCalDavSyncStart and zmailCalendarCalDavSyncEnd limits
     * the window of appointment data available via CalDAV. for example when
     * zmailCalendarCalDavSyncStart is set to 30 days, and
     * zmailCalendarCalDavSyncEnd is set to 1 years, then the appointments
     * between (now - 30 days) and (now + 1 year) will be available via
     * CalDAV. When they are unset all the appointments are available via
     * CalDAV. . Must be in valid duration format: {digits}{time-unit}.
     * digits: 0-9, time-unit: [hmsd]|ms. h - hours, m - minutes, s -
     * seconds, d - days, ms - milliseconds. If time unit is not specified,
     * the default is s(seconds).
     *
     * @param zmailCalendarCalDavSyncStart new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.14
     */
    @ZAttr(id=815)
    public void setCalendarCalDavSyncStart(String zmailCalendarCalDavSyncStart) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailCalendarCalDavSyncStart, zmailCalendarCalDavSyncStart);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * zmailCalendarCalDavSyncStart and zmailCalendarCalDavSyncEnd limits
     * the window of appointment data available via CalDAV. for example when
     * zmailCalendarCalDavSyncStart is set to 30 days, and
     * zmailCalendarCalDavSyncEnd is set to 1 years, then the appointments
     * between (now - 30 days) and (now + 1 year) will be available via
     * CalDAV. When they are unset all the appointments are available via
     * CalDAV. . Must be in valid duration format: {digits}{time-unit}.
     * digits: 0-9, time-unit: [hmsd]|ms. h - hours, m - minutes, s -
     * seconds, d - days, ms - milliseconds. If time unit is not specified,
     * the default is s(seconds).
     *
     * @param zmailCalendarCalDavSyncStart new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.14
     */
    @ZAttr(id=815)
    public Map<String,Object> setCalendarCalDavSyncStart(String zmailCalendarCalDavSyncStart, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailCalendarCalDavSyncStart, zmailCalendarCalDavSyncStart);
        return attrs;
    }

    /**
     * zmailCalendarCalDavSyncStart and zmailCalendarCalDavSyncEnd limits
     * the window of appointment data available via CalDAV. for example when
     * zmailCalendarCalDavSyncStart is set to 30 days, and
     * zmailCalendarCalDavSyncEnd is set to 1 years, then the appointments
     * between (now - 30 days) and (now + 1 year) will be available via
     * CalDAV. When they are unset all the appointments are available via
     * CalDAV. . Must be in valid duration format: {digits}{time-unit}.
     * digits: 0-9, time-unit: [hmsd]|ms. h - hours, m - minutes, s -
     * seconds, d - days, ms - milliseconds. If time unit is not specified,
     * the default is s(seconds).
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.14
     */
    @ZAttr(id=815)
    public void unsetCalendarCalDavSyncStart() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailCalendarCalDavSyncStart, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * zmailCalendarCalDavSyncStart and zmailCalendarCalDavSyncEnd limits
     * the window of appointment data available via CalDAV. for example when
     * zmailCalendarCalDavSyncStart is set to 30 days, and
     * zmailCalendarCalDavSyncEnd is set to 1 years, then the appointments
     * between (now - 30 days) and (now + 1 year) will be available via
     * CalDAV. When they are unset all the appointments are available via
     * CalDAV. . Must be in valid duration format: {digits}{time-unit}.
     * digits: 0-9, time-unit: [hmsd]|ms. h - hours, m - minutes, s -
     * seconds, d - days, ms - milliseconds. If time unit is not specified,
     * the default is s(seconds).
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.14
     */
    @ZAttr(id=815)
    public Map<String,Object> unsetCalendarCalDavSyncStart(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailCalendarCalDavSyncStart, "");
        return attrs;
    }

    /**
     * whether to retain exception instances when the recurrence series is
     * changed to new time; set to FALSE for Exchange compatibility
     *
     * @return zmailCalendarKeepExceptionsOnSeriesTimeChange, or false if unset
     *
     * @since ZCS 7.1.2
     */
    @ZAttr(id=1240)
    public boolean isCalendarKeepExceptionsOnSeriesTimeChange() {
        return getBooleanAttr(Provisioning.A_zmailCalendarKeepExceptionsOnSeriesTimeChange, false);
    }

    /**
     * whether to retain exception instances when the recurrence series is
     * changed to new time; set to FALSE for Exchange compatibility
     *
     * @param zmailCalendarKeepExceptionsOnSeriesTimeChange new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.1.2
     */
    @ZAttr(id=1240)
    public void setCalendarKeepExceptionsOnSeriesTimeChange(boolean zmailCalendarKeepExceptionsOnSeriesTimeChange) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailCalendarKeepExceptionsOnSeriesTimeChange, zmailCalendarKeepExceptionsOnSeriesTimeChange ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to retain exception instances when the recurrence series is
     * changed to new time; set to FALSE for Exchange compatibility
     *
     * @param zmailCalendarKeepExceptionsOnSeriesTimeChange new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.1.2
     */
    @ZAttr(id=1240)
    public Map<String,Object> setCalendarKeepExceptionsOnSeriesTimeChange(boolean zmailCalendarKeepExceptionsOnSeriesTimeChange, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailCalendarKeepExceptionsOnSeriesTimeChange, zmailCalendarKeepExceptionsOnSeriesTimeChange ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether to retain exception instances when the recurrence series is
     * changed to new time; set to FALSE for Exchange compatibility
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.1.2
     */
    @ZAttr(id=1240)
    public void unsetCalendarKeepExceptionsOnSeriesTimeChange() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailCalendarKeepExceptionsOnSeriesTimeChange, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to retain exception instances when the recurrence series is
     * changed to new time; set to FALSE for Exchange compatibility
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.1.2
     */
    @ZAttr(id=1240)
    public Map<String,Object> unsetCalendarKeepExceptionsOnSeriesTimeChange(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailCalendarKeepExceptionsOnSeriesTimeChange, "");
        return attrs;
    }

    /**
     * list of disabled fields in calendar location web UI
     *
     * @return zmailCalendarLocationDisabledFields, or null if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1218)
    public String getCalendarLocationDisabledFields() {
        return getAttr(Provisioning.A_zmailCalendarLocationDisabledFields, null);
    }

    /**
     * list of disabled fields in calendar location web UI
     *
     * @param zmailCalendarLocationDisabledFields new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1218)
    public void setCalendarLocationDisabledFields(String zmailCalendarLocationDisabledFields) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailCalendarLocationDisabledFields, zmailCalendarLocationDisabledFields);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * list of disabled fields in calendar location web UI
     *
     * @param zmailCalendarLocationDisabledFields new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1218)
    public Map<String,Object> setCalendarLocationDisabledFields(String zmailCalendarLocationDisabledFields, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailCalendarLocationDisabledFields, zmailCalendarLocationDisabledFields);
        return attrs;
    }

    /**
     * list of disabled fields in calendar location web UI
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1218)
    public void unsetCalendarLocationDisabledFields() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailCalendarLocationDisabledFields, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * list of disabled fields in calendar location web UI
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1218)
    public Map<String,Object> unsetCalendarLocationDisabledFields(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailCalendarLocationDisabledFields, "");
        return attrs;
    }

    /**
     * maximum number of revisions to keep for calendar items (appointments
     * and tasks). 0 means unlimited.
     *
     * @return zmailCalendarMaxRevisions, or 1 if unset
     *
     * @since ZCS 5.0.10
     */
    @ZAttr(id=709)
    public int getCalendarMaxRevisions() {
        return getIntAttr(Provisioning.A_zmailCalendarMaxRevisions, 1);
    }

    /**
     * maximum number of revisions to keep for calendar items (appointments
     * and tasks). 0 means unlimited.
     *
     * @param zmailCalendarMaxRevisions new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.10
     */
    @ZAttr(id=709)
    public void setCalendarMaxRevisions(int zmailCalendarMaxRevisions) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailCalendarMaxRevisions, Integer.toString(zmailCalendarMaxRevisions));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * maximum number of revisions to keep for calendar items (appointments
     * and tasks). 0 means unlimited.
     *
     * @param zmailCalendarMaxRevisions new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.10
     */
    @ZAttr(id=709)
    public Map<String,Object> setCalendarMaxRevisions(int zmailCalendarMaxRevisions, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailCalendarMaxRevisions, Integer.toString(zmailCalendarMaxRevisions));
        return attrs;
    }

    /**
     * maximum number of revisions to keep for calendar items (appointments
     * and tasks). 0 means unlimited.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.10
     */
    @ZAttr(id=709)
    public void unsetCalendarMaxRevisions() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailCalendarMaxRevisions, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * maximum number of revisions to keep for calendar items (appointments
     * and tasks). 0 means unlimited.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.10
     */
    @ZAttr(id=709)
    public Map<String,Object> unsetCalendarMaxRevisions(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailCalendarMaxRevisions, "");
        return attrs;
    }

    /**
     * whether calendar resources can be double booked
     *
     * @return zmailCalendarResourceDoubleBookingAllowed, or true if unset
     *
     * @since ZCS 6.0.7
     */
    @ZAttr(id=1087)
    public boolean isCalendarResourceDoubleBookingAllowed() {
        return getBooleanAttr(Provisioning.A_zmailCalendarResourceDoubleBookingAllowed, true);
    }

    /**
     * whether calendar resources can be double booked
     *
     * @param zmailCalendarResourceDoubleBookingAllowed new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.7
     */
    @ZAttr(id=1087)
    public void setCalendarResourceDoubleBookingAllowed(boolean zmailCalendarResourceDoubleBookingAllowed) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailCalendarResourceDoubleBookingAllowed, zmailCalendarResourceDoubleBookingAllowed ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether calendar resources can be double booked
     *
     * @param zmailCalendarResourceDoubleBookingAllowed new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.7
     */
    @ZAttr(id=1087)
    public Map<String,Object> setCalendarResourceDoubleBookingAllowed(boolean zmailCalendarResourceDoubleBookingAllowed, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailCalendarResourceDoubleBookingAllowed, zmailCalendarResourceDoubleBookingAllowed ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether calendar resources can be double booked
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.7
     */
    @ZAttr(id=1087)
    public void unsetCalendarResourceDoubleBookingAllowed() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailCalendarResourceDoubleBookingAllowed, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether calendar resources can be double booked
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.7
     */
    @ZAttr(id=1087)
    public Map<String,Object> unsetCalendarResourceDoubleBookingAllowed(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailCalendarResourceDoubleBookingAllowed, "");
        return attrs;
    }

    /**
     * whether to show Find Locations and Find Resources tabs for editing
     * appointments
     *
     * @return zmailCalendarShowResourceTabs, or true if unset
     *
     * @since ZCS 6.0.7
     */
    @ZAttr(id=1092)
    public boolean isCalendarShowResourceTabs() {
        return getBooleanAttr(Provisioning.A_zmailCalendarShowResourceTabs, true);
    }

    /**
     * whether to show Find Locations and Find Resources tabs for editing
     * appointments
     *
     * @param zmailCalendarShowResourceTabs new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.7
     */
    @ZAttr(id=1092)
    public void setCalendarShowResourceTabs(boolean zmailCalendarShowResourceTabs) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailCalendarShowResourceTabs, zmailCalendarShowResourceTabs ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to show Find Locations and Find Resources tabs for editing
     * appointments
     *
     * @param zmailCalendarShowResourceTabs new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.7
     */
    @ZAttr(id=1092)
    public Map<String,Object> setCalendarShowResourceTabs(boolean zmailCalendarShowResourceTabs, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailCalendarShowResourceTabs, zmailCalendarShowResourceTabs ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether to show Find Locations and Find Resources tabs for editing
     * appointments
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.7
     */
    @ZAttr(id=1092)
    public void unsetCalendarShowResourceTabs() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailCalendarShowResourceTabs, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to show Find Locations and Find Resources tabs for editing
     * appointments
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.7
     */
    @ZAttr(id=1092)
    public Map<String,Object> unsetCalendarShowResourceTabs(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailCalendarShowResourceTabs, "");
        return attrs;
    }

    /**
     * attribute constraints TODO: fill all the constraints
     *
     * @return zmailConstraint, or empty array if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=766)
    public String[] getConstraint() {
        return getMultiAttr(Provisioning.A_zmailConstraint);
    }

    /**
     * attribute constraints TODO: fill all the constraints
     *
     * @param zmailConstraint new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=766)
    public void setConstraint(String[] zmailConstraint) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailConstraint, zmailConstraint);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * attribute constraints TODO: fill all the constraints
     *
     * @param zmailConstraint new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=766)
    public Map<String,Object> setConstraint(String[] zmailConstraint, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailConstraint, zmailConstraint);
        return attrs;
    }

    /**
     * attribute constraints TODO: fill all the constraints
     *
     * @param zmailConstraint new to add to existing values
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=766)
    public void addConstraint(String zmailConstraint) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "+" + Provisioning.A_zmailConstraint, zmailConstraint);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * attribute constraints TODO: fill all the constraints
     *
     * @param zmailConstraint new to add to existing values
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=766)
    public Map<String,Object> addConstraint(String zmailConstraint, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "+" + Provisioning.A_zmailConstraint, zmailConstraint);
        return attrs;
    }

    /**
     * attribute constraints TODO: fill all the constraints
     *
     * @param zmailConstraint existing value to remove
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=766)
    public void removeConstraint(String zmailConstraint) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "-" + Provisioning.A_zmailConstraint, zmailConstraint);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * attribute constraints TODO: fill all the constraints
     *
     * @param zmailConstraint existing value to remove
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=766)
    public Map<String,Object> removeConstraint(String zmailConstraint, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "-" + Provisioning.A_zmailConstraint, zmailConstraint);
        return attrs;
    }

    /**
     * attribute constraints TODO: fill all the constraints
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=766)
    public void unsetConstraint() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailConstraint, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * attribute constraints TODO: fill all the constraints
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=766)
    public Map<String,Object> unsetConstraint(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailConstraint, "");
        return attrs;
    }

    /**
     * Deprecated since: 6.0.7. deprecated in favor of
     * zmailContactEmailFields, for bug 45475. Orig desc: Comma separates
     * list of attributes in contact object to search for email addresses
     * when generating auto-complete contact list. The same set of fields are
     * used for GAL contacts as well because LDAP attributes for GAL objects
     * are mapped to Contact compatible attributes via zmailGalLdapAttrMap.
     *
     * @return zmailContactAutoCompleteEmailFields, or "email,email2,email3,workEmail1,workEmail2,workEmail3" if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=760)
    public String getContactAutoCompleteEmailFields() {
        return getAttr(Provisioning.A_zmailContactAutoCompleteEmailFields, "email,email2,email3,workEmail1,workEmail2,workEmail3");
    }

    /**
     * Deprecated since: 6.0.7. deprecated in favor of
     * zmailContactEmailFields, for bug 45475. Orig desc: Comma separates
     * list of attributes in contact object to search for email addresses
     * when generating auto-complete contact list. The same set of fields are
     * used for GAL contacts as well because LDAP attributes for GAL objects
     * are mapped to Contact compatible attributes via zmailGalLdapAttrMap.
     *
     * @param zmailContactAutoCompleteEmailFields new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=760)
    public void setContactAutoCompleteEmailFields(String zmailContactAutoCompleteEmailFields) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailContactAutoCompleteEmailFields, zmailContactAutoCompleteEmailFields);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Deprecated since: 6.0.7. deprecated in favor of
     * zmailContactEmailFields, for bug 45475. Orig desc: Comma separates
     * list of attributes in contact object to search for email addresses
     * when generating auto-complete contact list. The same set of fields are
     * used for GAL contacts as well because LDAP attributes for GAL objects
     * are mapped to Contact compatible attributes via zmailGalLdapAttrMap.
     *
     * @param zmailContactAutoCompleteEmailFields new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=760)
    public Map<String,Object> setContactAutoCompleteEmailFields(String zmailContactAutoCompleteEmailFields, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailContactAutoCompleteEmailFields, zmailContactAutoCompleteEmailFields);
        return attrs;
    }

    /**
     * Deprecated since: 6.0.7. deprecated in favor of
     * zmailContactEmailFields, for bug 45475. Orig desc: Comma separates
     * list of attributes in contact object to search for email addresses
     * when generating auto-complete contact list. The same set of fields are
     * used for GAL contacts as well because LDAP attributes for GAL objects
     * are mapped to Contact compatible attributes via zmailGalLdapAttrMap.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=760)
    public void unsetContactAutoCompleteEmailFields() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailContactAutoCompleteEmailFields, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Deprecated since: 6.0.7. deprecated in favor of
     * zmailContactEmailFields, for bug 45475. Orig desc: Comma separates
     * list of attributes in contact object to search for email addresses
     * when generating auto-complete contact list. The same set of fields are
     * used for GAL contacts as well because LDAP attributes for GAL objects
     * are mapped to Contact compatible attributes via zmailGalLdapAttrMap.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=760)
    public Map<String,Object> unsetContactAutoCompleteEmailFields(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailContactAutoCompleteEmailFields, "");
        return attrs;
    }

    /**
     * maximum number of contact entries to return from an auto complete
     *
     * @return zmailContactAutoCompleteMaxResults, or 20 if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=827)
    public int getContactAutoCompleteMaxResults() {
        return getIntAttr(Provisioning.A_zmailContactAutoCompleteMaxResults, 20);
    }

    /**
     * maximum number of contact entries to return from an auto complete
     *
     * @param zmailContactAutoCompleteMaxResults new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=827)
    public void setContactAutoCompleteMaxResults(int zmailContactAutoCompleteMaxResults) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailContactAutoCompleteMaxResults, Integer.toString(zmailContactAutoCompleteMaxResults));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * maximum number of contact entries to return from an auto complete
     *
     * @param zmailContactAutoCompleteMaxResults new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=827)
    public Map<String,Object> setContactAutoCompleteMaxResults(int zmailContactAutoCompleteMaxResults, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailContactAutoCompleteMaxResults, Integer.toString(zmailContactAutoCompleteMaxResults));
        return attrs;
    }

    /**
     * maximum number of contact entries to return from an auto complete
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=827)
    public void unsetContactAutoCompleteMaxResults() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailContactAutoCompleteMaxResults, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * maximum number of contact entries to return from an auto complete
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=827)
    public Map<String,Object> unsetContactAutoCompleteMaxResults(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailContactAutoCompleteMaxResults, "");
        return attrs;
    }

    /**
     * Comma separates list of attributes in contact object to search for
     * email addresses when generating auto-complete contact list. The same
     * set of fields are used for GAL contacts as well because LDAP
     * attributes for GAL objects are mapped to Contact compatible attributes
     * via zmailGalLdapAttrMap.
     *
     * @return zmailContactEmailFields, or "email,email2,email3,email4,email5,email6,email7,email8,email9,email10,workEmail1,workEmail2,workEmail3" if unset
     *
     * @since ZCS 6.0.7
     */
    @ZAttr(id=1088)
    public String getContactEmailFields() {
        return getAttr(Provisioning.A_zmailContactEmailFields, "email,email2,email3,email4,email5,email6,email7,email8,email9,email10,workEmail1,workEmail2,workEmail3");
    }

    /**
     * Comma separates list of attributes in contact object to search for
     * email addresses when generating auto-complete contact list. The same
     * set of fields are used for GAL contacts as well because LDAP
     * attributes for GAL objects are mapped to Contact compatible attributes
     * via zmailGalLdapAttrMap.
     *
     * @param zmailContactEmailFields new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.7
     */
    @ZAttr(id=1088)
    public void setContactEmailFields(String zmailContactEmailFields) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailContactEmailFields, zmailContactEmailFields);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Comma separates list of attributes in contact object to search for
     * email addresses when generating auto-complete contact list. The same
     * set of fields are used for GAL contacts as well because LDAP
     * attributes for GAL objects are mapped to Contact compatible attributes
     * via zmailGalLdapAttrMap.
     *
     * @param zmailContactEmailFields new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.7
     */
    @ZAttr(id=1088)
    public Map<String,Object> setContactEmailFields(String zmailContactEmailFields, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailContactEmailFields, zmailContactEmailFields);
        return attrs;
    }

    /**
     * Comma separates list of attributes in contact object to search for
     * email addresses when generating auto-complete contact list. The same
     * set of fields are used for GAL contacts as well because LDAP
     * attributes for GAL objects are mapped to Contact compatible attributes
     * via zmailGalLdapAttrMap.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.7
     */
    @ZAttr(id=1088)
    public void unsetContactEmailFields() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailContactEmailFields, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Comma separates list of attributes in contact object to search for
     * email addresses when generating auto-complete contact list. The same
     * set of fields are used for GAL contacts as well because LDAP
     * attributes for GAL objects are mapped to Contact compatible attributes
     * via zmailGalLdapAttrMap.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.7
     */
    @ZAttr(id=1088)
    public Map<String,Object> unsetContactEmailFields(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailContactEmailFields, "");
        return attrs;
    }

    /**
     * Maximum number of contacts allowed in mailbox. 0 means no limit.
     *
     * @return zmailContactMaxNumEntries, or 10000 if unset
     */
    @ZAttr(id=107)
    public int getContactMaxNumEntries() {
        return getIntAttr(Provisioning.A_zmailContactMaxNumEntries, 10000);
    }

    /**
     * Maximum number of contacts allowed in mailbox. 0 means no limit.
     *
     * @param zmailContactMaxNumEntries new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=107)
    public void setContactMaxNumEntries(int zmailContactMaxNumEntries) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailContactMaxNumEntries, Integer.toString(zmailContactMaxNumEntries));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Maximum number of contacts allowed in mailbox. 0 means no limit.
     *
     * @param zmailContactMaxNumEntries new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=107)
    public Map<String,Object> setContactMaxNumEntries(int zmailContactMaxNumEntries, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailContactMaxNumEntries, Integer.toString(zmailContactMaxNumEntries));
        return attrs;
    }

    /**
     * Maximum number of contacts allowed in mailbox. 0 means no limit.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=107)
    public void unsetContactMaxNumEntries() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailContactMaxNumEntries, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Maximum number of contacts allowed in mailbox. 0 means no limit.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=107)
    public Map<String,Object> unsetContactMaxNumEntries(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailContactMaxNumEntries, "");
        return attrs;
    }

    /**
     * Size of the contact ranking table. Ranking table is used to keep track
     * of most heavily used contacts in outgoing email. Contacts in the
     * ranking table are given the priority when generating the auto-complete
     * contact list.
     *
     * @return zmailContactRankingTableSize, or 200 if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=758)
    public int getContactRankingTableSize() {
        return getIntAttr(Provisioning.A_zmailContactRankingTableSize, 200);
    }

    /**
     * Size of the contact ranking table. Ranking table is used to keep track
     * of most heavily used contacts in outgoing email. Contacts in the
     * ranking table are given the priority when generating the auto-complete
     * contact list.
     *
     * @param zmailContactRankingTableSize new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=758)
    public void setContactRankingTableSize(int zmailContactRankingTableSize) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailContactRankingTableSize, Integer.toString(zmailContactRankingTableSize));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Size of the contact ranking table. Ranking table is used to keep track
     * of most heavily used contacts in outgoing email. Contacts in the
     * ranking table are given the priority when generating the auto-complete
     * contact list.
     *
     * @param zmailContactRankingTableSize new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=758)
    public Map<String,Object> setContactRankingTableSize(int zmailContactRankingTableSize, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailContactRankingTableSize, Integer.toString(zmailContactRankingTableSize));
        return attrs;
    }

    /**
     * Size of the contact ranking table. Ranking table is used to keep track
     * of most heavily used contacts in outgoing email. Contacts in the
     * ranking table are given the priority when generating the auto-complete
     * contact list.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=758)
    public void unsetContactRankingTableSize() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailContactRankingTableSize, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Size of the contact ranking table. Ranking table is used to keep track
     * of most heavily used contacts in outgoing email. Contacts in the
     * ranking table are given the priority when generating the auto-complete
     * contact list.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=758)
    public Map<String,Object> unsetContactRankingTableSize(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailContactRankingTableSize, "");
        return attrs;
    }

    /**
     * time object was created
     *
     * <p>Use getCreateTimestampAsString to access value as a string.
     *
     * @see #getCreateTimestampAsString()
     *
     * @return zmailCreateTimestamp as Date, null if unset or unable to parse
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=790)
    public Date getCreateTimestamp() {
        return getGeneralizedTimeAttr(Provisioning.A_zmailCreateTimestamp, null);
    }

    /**
     * time object was created
     *
     * @return zmailCreateTimestamp, or null if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=790)
    public String getCreateTimestampAsString() {
        return getAttr(Provisioning.A_zmailCreateTimestamp, null);
    }

    /**
     * time object was created
     *
     * @param zmailCreateTimestamp new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=790)
    public void setCreateTimestamp(Date zmailCreateTimestamp) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailCreateTimestamp, zmailCreateTimestamp==null ? "" : DateUtil.toGeneralizedTime(zmailCreateTimestamp));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * time object was created
     *
     * @param zmailCreateTimestamp new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=790)
    public Map<String,Object> setCreateTimestamp(Date zmailCreateTimestamp, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailCreateTimestamp, zmailCreateTimestamp==null ? "" : DateUtil.toGeneralizedTime(zmailCreateTimestamp));
        return attrs;
    }

    /**
     * time object was created
     *
     * @param zmailCreateTimestamp new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=790)
    public void setCreateTimestampAsString(String zmailCreateTimestamp) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailCreateTimestamp, zmailCreateTimestamp);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * time object was created
     *
     * @param zmailCreateTimestamp new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=790)
    public Map<String,Object> setCreateTimestampAsString(String zmailCreateTimestamp, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailCreateTimestamp, zmailCreateTimestamp);
        return attrs;
    }

    /**
     * time object was created
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=790)
    public void unsetCreateTimestamp() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailCreateTimestamp, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * time object was created
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=790)
    public Map<String,Object> unsetCreateTimestamp(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailCreateTimestamp, "");
        return attrs;
    }

    /**
     * The time interval between automated data imports for a Caldav data
     * source. If unset or 0, the data source will not be scheduled for
     * automated polling. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * <p>Use getDataSourceCaldavPollingIntervalAsString to access value as a string.
     *
     * @see #getDataSourceCaldavPollingIntervalAsString()
     *
     * @return zmailDataSourceCaldavPollingInterval in millseconds, or -1 if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=788)
    public long getDataSourceCaldavPollingInterval() {
        return getTimeInterval(Provisioning.A_zmailDataSourceCaldavPollingInterval, -1L);
    }

    /**
     * The time interval between automated data imports for a Caldav data
     * source. If unset or 0, the data source will not be scheduled for
     * automated polling. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @return zmailDataSourceCaldavPollingInterval, or null if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=788)
    public String getDataSourceCaldavPollingIntervalAsString() {
        return getAttr(Provisioning.A_zmailDataSourceCaldavPollingInterval, null);
    }

    /**
     * The time interval between automated data imports for a Caldav data
     * source. If unset or 0, the data source will not be scheduled for
     * automated polling. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param zmailDataSourceCaldavPollingInterval new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=788)
    public void setDataSourceCaldavPollingInterval(String zmailDataSourceCaldavPollingInterval) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDataSourceCaldavPollingInterval, zmailDataSourceCaldavPollingInterval);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * The time interval between automated data imports for a Caldav data
     * source. If unset or 0, the data source will not be scheduled for
     * automated polling. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param zmailDataSourceCaldavPollingInterval new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=788)
    public Map<String,Object> setDataSourceCaldavPollingInterval(String zmailDataSourceCaldavPollingInterval, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDataSourceCaldavPollingInterval, zmailDataSourceCaldavPollingInterval);
        return attrs;
    }

    /**
     * The time interval between automated data imports for a Caldav data
     * source. If unset or 0, the data source will not be scheduled for
     * automated polling. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=788)
    public void unsetDataSourceCaldavPollingInterval() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDataSourceCaldavPollingInterval, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * The time interval between automated data imports for a Caldav data
     * source. If unset or 0, the data source will not be scheduled for
     * automated polling. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=788)
    public Map<String,Object> unsetDataSourceCaldavPollingInterval(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDataSourceCaldavPollingInterval, "");
        return attrs;
    }

    /**
     * The time interval between automated data imports for a remote calendar
     * data source. If unset or 0, the data source will not be scheduled for
     * automated polling. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * <p>Use getDataSourceCalendarPollingIntervalAsString to access value as a string.
     *
     * @see #getDataSourceCalendarPollingIntervalAsString()
     *
     * @return zmailDataSourceCalendarPollingInterval in millseconds, or 43200000 (12h)  if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=819)
    public long getDataSourceCalendarPollingInterval() {
        return getTimeInterval(Provisioning.A_zmailDataSourceCalendarPollingInterval, 43200000L);
    }

    /**
     * The time interval between automated data imports for a remote calendar
     * data source. If unset or 0, the data source will not be scheduled for
     * automated polling. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @return zmailDataSourceCalendarPollingInterval, or "12h" if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=819)
    public String getDataSourceCalendarPollingIntervalAsString() {
        return getAttr(Provisioning.A_zmailDataSourceCalendarPollingInterval, "12h");
    }

    /**
     * The time interval between automated data imports for a remote calendar
     * data source. If unset or 0, the data source will not be scheduled for
     * automated polling. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param zmailDataSourceCalendarPollingInterval new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=819)
    public void setDataSourceCalendarPollingInterval(String zmailDataSourceCalendarPollingInterval) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDataSourceCalendarPollingInterval, zmailDataSourceCalendarPollingInterval);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * The time interval between automated data imports for a remote calendar
     * data source. If unset or 0, the data source will not be scheduled for
     * automated polling. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param zmailDataSourceCalendarPollingInterval new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=819)
    public Map<String,Object> setDataSourceCalendarPollingInterval(String zmailDataSourceCalendarPollingInterval, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDataSourceCalendarPollingInterval, zmailDataSourceCalendarPollingInterval);
        return attrs;
    }

    /**
     * The time interval between automated data imports for a remote calendar
     * data source. If unset or 0, the data source will not be scheduled for
     * automated polling. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=819)
    public void unsetDataSourceCalendarPollingInterval() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDataSourceCalendarPollingInterval, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * The time interval between automated data imports for a remote calendar
     * data source. If unset or 0, the data source will not be scheduled for
     * automated polling. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=819)
    public Map<String,Object> unsetDataSourceCalendarPollingInterval(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDataSourceCalendarPollingInterval, "");
        return attrs;
    }

    /**
     * The time interval between automated data imports for a GAL data
     * source. If unset or 0, the data source will not be scheduled for
     * automated polling. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * <p>Use getDataSourceGalPollingIntervalAsString to access value as a string.
     *
     * @see #getDataSourceGalPollingIntervalAsString()
     *
     * @return zmailDataSourceGalPollingInterval in millseconds, or -1 if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=826)
    public long getDataSourceGalPollingInterval() {
        return getTimeInterval(Provisioning.A_zmailDataSourceGalPollingInterval, -1L);
    }

    /**
     * The time interval between automated data imports for a GAL data
     * source. If unset or 0, the data source will not be scheduled for
     * automated polling. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @return zmailDataSourceGalPollingInterval, or null if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=826)
    public String getDataSourceGalPollingIntervalAsString() {
        return getAttr(Provisioning.A_zmailDataSourceGalPollingInterval, null);
    }

    /**
     * The time interval between automated data imports for a GAL data
     * source. If unset or 0, the data source will not be scheduled for
     * automated polling. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param zmailDataSourceGalPollingInterval new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=826)
    public void setDataSourceGalPollingInterval(String zmailDataSourceGalPollingInterval) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDataSourceGalPollingInterval, zmailDataSourceGalPollingInterval);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * The time interval between automated data imports for a GAL data
     * source. If unset or 0, the data source will not be scheduled for
     * automated polling. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param zmailDataSourceGalPollingInterval new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=826)
    public Map<String,Object> setDataSourceGalPollingInterval(String zmailDataSourceGalPollingInterval, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDataSourceGalPollingInterval, zmailDataSourceGalPollingInterval);
        return attrs;
    }

    /**
     * The time interval between automated data imports for a GAL data
     * source. If unset or 0, the data source will not be scheduled for
     * automated polling. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=826)
    public void unsetDataSourceGalPollingInterval() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDataSourceGalPollingInterval, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * The time interval between automated data imports for a GAL data
     * source. If unset or 0, the data source will not be scheduled for
     * automated polling. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=826)
    public Map<String,Object> unsetDataSourceGalPollingInterval(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDataSourceGalPollingInterval, "");
        return attrs;
    }

    /**
     * The time interval between automated data imports for an Imap data
     * source. If unset or 0, the data source will not be scheduled for
     * automated polling. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * <p>Use getDataSourceImapPollingIntervalAsString to access value as a string.
     *
     * @see #getDataSourceImapPollingIntervalAsString()
     *
     * @return zmailDataSourceImapPollingInterval in millseconds, or -1 if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=768)
    public long getDataSourceImapPollingInterval() {
        return getTimeInterval(Provisioning.A_zmailDataSourceImapPollingInterval, -1L);
    }

    /**
     * The time interval between automated data imports for an Imap data
     * source. If unset or 0, the data source will not be scheduled for
     * automated polling. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @return zmailDataSourceImapPollingInterval, or null if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=768)
    public String getDataSourceImapPollingIntervalAsString() {
        return getAttr(Provisioning.A_zmailDataSourceImapPollingInterval, null);
    }

    /**
     * The time interval between automated data imports for an Imap data
     * source. If unset or 0, the data source will not be scheduled for
     * automated polling. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param zmailDataSourceImapPollingInterval new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=768)
    public void setDataSourceImapPollingInterval(String zmailDataSourceImapPollingInterval) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDataSourceImapPollingInterval, zmailDataSourceImapPollingInterval);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * The time interval between automated data imports for an Imap data
     * source. If unset or 0, the data source will not be scheduled for
     * automated polling. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param zmailDataSourceImapPollingInterval new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=768)
    public Map<String,Object> setDataSourceImapPollingInterval(String zmailDataSourceImapPollingInterval, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDataSourceImapPollingInterval, zmailDataSourceImapPollingInterval);
        return attrs;
    }

    /**
     * The time interval between automated data imports for an Imap data
     * source. If unset or 0, the data source will not be scheduled for
     * automated polling. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=768)
    public void unsetDataSourceImapPollingInterval() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDataSourceImapPollingInterval, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * The time interval between automated data imports for an Imap data
     * source. If unset or 0, the data source will not be scheduled for
     * automated polling. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=768)
    public Map<String,Object> unsetDataSourceImapPollingInterval(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDataSourceImapPollingInterval, "");
        return attrs;
    }

    /**
     * whether to invoke data imports for all data sources owned by an
     * account after successful user login from the login page
     *
     * @return zmailDataSourceImportOnLogin, or false if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1418)
    public boolean isDataSourceImportOnLogin() {
        return getBooleanAttr(Provisioning.A_zmailDataSourceImportOnLogin, false);
    }

    /**
     * whether to invoke data imports for all data sources owned by an
     * account after successful user login from the login page
     *
     * @param zmailDataSourceImportOnLogin new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1418)
    public void setDataSourceImportOnLogin(boolean zmailDataSourceImportOnLogin) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDataSourceImportOnLogin, zmailDataSourceImportOnLogin ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to invoke data imports for all data sources owned by an
     * account after successful user login from the login page
     *
     * @param zmailDataSourceImportOnLogin new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1418)
    public Map<String,Object> setDataSourceImportOnLogin(boolean zmailDataSourceImportOnLogin, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDataSourceImportOnLogin, zmailDataSourceImportOnLogin ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether to invoke data imports for all data sources owned by an
     * account after successful user login from the login page
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1418)
    public void unsetDataSourceImportOnLogin() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDataSourceImportOnLogin, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to invoke data imports for all data sources owned by an
     * account after successful user login from the login page
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1418)
    public Map<String,Object> unsetDataSourceImportOnLogin(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDataSourceImportOnLogin, "");
        return attrs;
    }

    /**
     * The time interval between automated data imports for a Live data
     * source. If unset or 0, the data source will not be scheduled for
     * automated polling. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * <p>Use getDataSourceLivePollingIntervalAsString to access value as a string.
     *
     * @see #getDataSourceLivePollingIntervalAsString()
     *
     * @return zmailDataSourceLivePollingInterval in millseconds, or -1 if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=769)
    public long getDataSourceLivePollingInterval() {
        return getTimeInterval(Provisioning.A_zmailDataSourceLivePollingInterval, -1L);
    }

    /**
     * The time interval between automated data imports for a Live data
     * source. If unset or 0, the data source will not be scheduled for
     * automated polling. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @return zmailDataSourceLivePollingInterval, or null if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=769)
    public String getDataSourceLivePollingIntervalAsString() {
        return getAttr(Provisioning.A_zmailDataSourceLivePollingInterval, null);
    }

    /**
     * The time interval between automated data imports for a Live data
     * source. If unset or 0, the data source will not be scheduled for
     * automated polling. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param zmailDataSourceLivePollingInterval new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=769)
    public void setDataSourceLivePollingInterval(String zmailDataSourceLivePollingInterval) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDataSourceLivePollingInterval, zmailDataSourceLivePollingInterval);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * The time interval between automated data imports for a Live data
     * source. If unset or 0, the data source will not be scheduled for
     * automated polling. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param zmailDataSourceLivePollingInterval new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=769)
    public Map<String,Object> setDataSourceLivePollingInterval(String zmailDataSourceLivePollingInterval, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDataSourceLivePollingInterval, zmailDataSourceLivePollingInterval);
        return attrs;
    }

    /**
     * The time interval between automated data imports for a Live data
     * source. If unset or 0, the data source will not be scheduled for
     * automated polling. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=769)
    public void unsetDataSourceLivePollingInterval() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDataSourceLivePollingInterval, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * The time interval between automated data imports for a Live data
     * source. If unset or 0, the data source will not be scheduled for
     * automated polling. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=769)
    public Map<String,Object> unsetDataSourceLivePollingInterval(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDataSourceLivePollingInterval, "");
        return attrs;
    }

    /**
     * Maximum number of data sources allowed on an account
     *
     * @return zmailDataSourceMaxNumEntries, or 20 if unset
     */
    @ZAttr(id=426)
    public int getDataSourceMaxNumEntries() {
        return getIntAttr(Provisioning.A_zmailDataSourceMaxNumEntries, 20);
    }

    /**
     * Maximum number of data sources allowed on an account
     *
     * @param zmailDataSourceMaxNumEntries new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=426)
    public void setDataSourceMaxNumEntries(int zmailDataSourceMaxNumEntries) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDataSourceMaxNumEntries, Integer.toString(zmailDataSourceMaxNumEntries));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Maximum number of data sources allowed on an account
     *
     * @param zmailDataSourceMaxNumEntries new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=426)
    public Map<String,Object> setDataSourceMaxNumEntries(int zmailDataSourceMaxNumEntries, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDataSourceMaxNumEntries, Integer.toString(zmailDataSourceMaxNumEntries));
        return attrs;
    }

    /**
     * Maximum number of data sources allowed on an account
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=426)
    public void unsetDataSourceMaxNumEntries() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDataSourceMaxNumEntries, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Maximum number of data sources allowed on an account
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=426)
    public Map<String,Object> unsetDataSourceMaxNumEntries(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDataSourceMaxNumEntries, "");
        return attrs;
    }

    /**
     * Shortest allowed duration for zmailDataSourcePollingInterval.. Must
     * be in valid duration format: {digits}{time-unit}. digits: 0-9,
     * time-unit: [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days,
     * ms - milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * <p>Use getDataSourceMinPollingIntervalAsString to access value as a string.
     *
     * @see #getDataSourceMinPollingIntervalAsString()
     *
     * @return zmailDataSourceMinPollingInterval in millseconds, or 60000 (1m)  if unset
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=525)
    public long getDataSourceMinPollingInterval() {
        return getTimeInterval(Provisioning.A_zmailDataSourceMinPollingInterval, 60000L);
    }

    /**
     * Shortest allowed duration for zmailDataSourcePollingInterval.. Must
     * be in valid duration format: {digits}{time-unit}. digits: 0-9,
     * time-unit: [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days,
     * ms - milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @return zmailDataSourceMinPollingInterval, or "1m" if unset
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=525)
    public String getDataSourceMinPollingIntervalAsString() {
        return getAttr(Provisioning.A_zmailDataSourceMinPollingInterval, "1m");
    }

    /**
     * Shortest allowed duration for zmailDataSourcePollingInterval.. Must
     * be in valid duration format: {digits}{time-unit}. digits: 0-9,
     * time-unit: [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days,
     * ms - milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @param zmailDataSourceMinPollingInterval new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=525)
    public void setDataSourceMinPollingInterval(String zmailDataSourceMinPollingInterval) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDataSourceMinPollingInterval, zmailDataSourceMinPollingInterval);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Shortest allowed duration for zmailDataSourcePollingInterval.. Must
     * be in valid duration format: {digits}{time-unit}. digits: 0-9,
     * time-unit: [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days,
     * ms - milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @param zmailDataSourceMinPollingInterval new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=525)
    public Map<String,Object> setDataSourceMinPollingInterval(String zmailDataSourceMinPollingInterval, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDataSourceMinPollingInterval, zmailDataSourceMinPollingInterval);
        return attrs;
    }

    /**
     * Shortest allowed duration for zmailDataSourcePollingInterval.. Must
     * be in valid duration format: {digits}{time-unit}. digits: 0-9,
     * time-unit: [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days,
     * ms - milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=525)
    public void unsetDataSourceMinPollingInterval() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDataSourceMinPollingInterval, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Shortest allowed duration for zmailDataSourcePollingInterval.. Must
     * be in valid duration format: {digits}{time-unit}. digits: 0-9,
     * time-unit: [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days,
     * ms - milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=525)
    public Map<String,Object> unsetDataSourceMinPollingInterval(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDataSourceMinPollingInterval, "");
        return attrs;
    }

    /**
     * Prior to 6.0.0: The time interval between automated data imports for a
     * data source, or all data sources owned by an account. If unset or 0,
     * the data source will not be scheduled for automated polling. Since
     * 6.0.0: Deprecated on account/cos since 6.0.0. Values on account/cos
     * are migrated to protocol specific
     * zmailDataSource{proto}PollingInterval attributes. 1. if
     * zmailDataSourcePollingInterval is set on data source, use it 2.
     * otherwise use the zmailDataSource{Proto}PollingInterval on
     * account/cos 3. if zmailDataSource{Proto}PollingInterval is not set on
     * account/cos, use 0, which means no automated polling. . Must be in
     * valid duration format: {digits}{time-unit}. digits: 0-9, time-unit:
     * [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days, ms -
     * milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * <p>Use getDataSourcePollingIntervalAsString to access value as a string.
     *
     * @see #getDataSourcePollingIntervalAsString()
     *
     * @return zmailDataSourcePollingInterval in millseconds, or -1 if unset
     */
    @ZAttr(id=455)
    public long getDataSourcePollingInterval() {
        return getTimeInterval(Provisioning.A_zmailDataSourcePollingInterval, -1L);
    }

    /**
     * Prior to 6.0.0: The time interval between automated data imports for a
     * data source, or all data sources owned by an account. If unset or 0,
     * the data source will not be scheduled for automated polling. Since
     * 6.0.0: Deprecated on account/cos since 6.0.0. Values on account/cos
     * are migrated to protocol specific
     * zmailDataSource{proto}PollingInterval attributes. 1. if
     * zmailDataSourcePollingInterval is set on data source, use it 2.
     * otherwise use the zmailDataSource{Proto}PollingInterval on
     * account/cos 3. if zmailDataSource{Proto}PollingInterval is not set on
     * account/cos, use 0, which means no automated polling. . Must be in
     * valid duration format: {digits}{time-unit}. digits: 0-9, time-unit:
     * [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days, ms -
     * milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @return zmailDataSourcePollingInterval, or null if unset
     */
    @ZAttr(id=455)
    public String getDataSourcePollingIntervalAsString() {
        return getAttr(Provisioning.A_zmailDataSourcePollingInterval, null);
    }

    /**
     * Prior to 6.0.0: The time interval between automated data imports for a
     * data source, or all data sources owned by an account. If unset or 0,
     * the data source will not be scheduled for automated polling. Since
     * 6.0.0: Deprecated on account/cos since 6.0.0. Values on account/cos
     * are migrated to protocol specific
     * zmailDataSource{proto}PollingInterval attributes. 1. if
     * zmailDataSourcePollingInterval is set on data source, use it 2.
     * otherwise use the zmailDataSource{Proto}PollingInterval on
     * account/cos 3. if zmailDataSource{Proto}PollingInterval is not set on
     * account/cos, use 0, which means no automated polling. . Must be in
     * valid duration format: {digits}{time-unit}. digits: 0-9, time-unit:
     * [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days, ms -
     * milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @param zmailDataSourcePollingInterval new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=455)
    public void setDataSourcePollingInterval(String zmailDataSourcePollingInterval) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDataSourcePollingInterval, zmailDataSourcePollingInterval);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Prior to 6.0.0: The time interval between automated data imports for a
     * data source, or all data sources owned by an account. If unset or 0,
     * the data source will not be scheduled for automated polling. Since
     * 6.0.0: Deprecated on account/cos since 6.0.0. Values on account/cos
     * are migrated to protocol specific
     * zmailDataSource{proto}PollingInterval attributes. 1. if
     * zmailDataSourcePollingInterval is set on data source, use it 2.
     * otherwise use the zmailDataSource{Proto}PollingInterval on
     * account/cos 3. if zmailDataSource{Proto}PollingInterval is not set on
     * account/cos, use 0, which means no automated polling. . Must be in
     * valid duration format: {digits}{time-unit}. digits: 0-9, time-unit:
     * [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days, ms -
     * milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @param zmailDataSourcePollingInterval new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=455)
    public Map<String,Object> setDataSourcePollingInterval(String zmailDataSourcePollingInterval, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDataSourcePollingInterval, zmailDataSourcePollingInterval);
        return attrs;
    }

    /**
     * Prior to 6.0.0: The time interval between automated data imports for a
     * data source, or all data sources owned by an account. If unset or 0,
     * the data source will not be scheduled for automated polling. Since
     * 6.0.0: Deprecated on account/cos since 6.0.0. Values on account/cos
     * are migrated to protocol specific
     * zmailDataSource{proto}PollingInterval attributes. 1. if
     * zmailDataSourcePollingInterval is set on data source, use it 2.
     * otherwise use the zmailDataSource{Proto}PollingInterval on
     * account/cos 3. if zmailDataSource{Proto}PollingInterval is not set on
     * account/cos, use 0, which means no automated polling. . Must be in
     * valid duration format: {digits}{time-unit}. digits: 0-9, time-unit:
     * [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days, ms -
     * milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=455)
    public void unsetDataSourcePollingInterval() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDataSourcePollingInterval, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Prior to 6.0.0: The time interval between automated data imports for a
     * data source, or all data sources owned by an account. If unset or 0,
     * the data source will not be scheduled for automated polling. Since
     * 6.0.0: Deprecated on account/cos since 6.0.0. Values on account/cos
     * are migrated to protocol specific
     * zmailDataSource{proto}PollingInterval attributes. 1. if
     * zmailDataSourcePollingInterval is set on data source, use it 2.
     * otherwise use the zmailDataSource{Proto}PollingInterval on
     * account/cos 3. if zmailDataSource{Proto}PollingInterval is not set on
     * account/cos, use 0, which means no automated polling. . Must be in
     * valid duration format: {digits}{time-unit}. digits: 0-9, time-unit:
     * [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days, ms -
     * milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=455)
    public Map<String,Object> unsetDataSourcePollingInterval(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDataSourcePollingInterval, "");
        return attrs;
    }

    /**
     * The time interval between automated data imports for a Pop3 data
     * source. If unset or 0, the data source will not be scheduled for
     * automated polling. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * <p>Use getDataSourcePop3PollingIntervalAsString to access value as a string.
     *
     * @see #getDataSourcePop3PollingIntervalAsString()
     *
     * @return zmailDataSourcePop3PollingInterval in millseconds, or -1 if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=767)
    public long getDataSourcePop3PollingInterval() {
        return getTimeInterval(Provisioning.A_zmailDataSourcePop3PollingInterval, -1L);
    }

    /**
     * The time interval between automated data imports for a Pop3 data
     * source. If unset or 0, the data source will not be scheduled for
     * automated polling. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @return zmailDataSourcePop3PollingInterval, or null if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=767)
    public String getDataSourcePop3PollingIntervalAsString() {
        return getAttr(Provisioning.A_zmailDataSourcePop3PollingInterval, null);
    }

    /**
     * The time interval between automated data imports for a Pop3 data
     * source. If unset or 0, the data source will not be scheduled for
     * automated polling. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param zmailDataSourcePop3PollingInterval new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=767)
    public void setDataSourcePop3PollingInterval(String zmailDataSourcePop3PollingInterval) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDataSourcePop3PollingInterval, zmailDataSourcePop3PollingInterval);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * The time interval between automated data imports for a Pop3 data
     * source. If unset or 0, the data source will not be scheduled for
     * automated polling. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param zmailDataSourcePop3PollingInterval new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=767)
    public Map<String,Object> setDataSourcePop3PollingInterval(String zmailDataSourcePop3PollingInterval, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDataSourcePop3PollingInterval, zmailDataSourcePop3PollingInterval);
        return attrs;
    }

    /**
     * The time interval between automated data imports for a Pop3 data
     * source. If unset or 0, the data source will not be scheduled for
     * automated polling. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=767)
    public void unsetDataSourcePop3PollingInterval() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDataSourcePop3PollingInterval, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * The time interval between automated data imports for a Pop3 data
     * source. If unset or 0, the data source will not be scheduled for
     * automated polling. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=767)
    public Map<String,Object> unsetDataSourcePop3PollingInterval(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDataSourcePop3PollingInterval, "");
        return attrs;
    }

    /**
     * The time interval between automated data imports for a Rss data
     * source. If unset or 0, the data source will not be scheduled for
     * automated polling. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * <p>Use getDataSourceRssPollingIntervalAsString to access value as a string.
     *
     * @see #getDataSourceRssPollingIntervalAsString()
     *
     * @return zmailDataSourceRssPollingInterval in millseconds, or 43200000 (12h)  if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=770)
    public long getDataSourceRssPollingInterval() {
        return getTimeInterval(Provisioning.A_zmailDataSourceRssPollingInterval, 43200000L);
    }

    /**
     * The time interval between automated data imports for a Rss data
     * source. If unset or 0, the data source will not be scheduled for
     * automated polling. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @return zmailDataSourceRssPollingInterval, or "12h" if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=770)
    public String getDataSourceRssPollingIntervalAsString() {
        return getAttr(Provisioning.A_zmailDataSourceRssPollingInterval, "12h");
    }

    /**
     * The time interval between automated data imports for a Rss data
     * source. If unset or 0, the data source will not be scheduled for
     * automated polling. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param zmailDataSourceRssPollingInterval new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=770)
    public void setDataSourceRssPollingInterval(String zmailDataSourceRssPollingInterval) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDataSourceRssPollingInterval, zmailDataSourceRssPollingInterval);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * The time interval between automated data imports for a Rss data
     * source. If unset or 0, the data source will not be scheduled for
     * automated polling. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param zmailDataSourceRssPollingInterval new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=770)
    public Map<String,Object> setDataSourceRssPollingInterval(String zmailDataSourceRssPollingInterval, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDataSourceRssPollingInterval, zmailDataSourceRssPollingInterval);
        return attrs;
    }

    /**
     * The time interval between automated data imports for a Rss data
     * source. If unset or 0, the data source will not be scheduled for
     * automated polling. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=770)
    public void unsetDataSourceRssPollingInterval() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDataSourceRssPollingInterval, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * The time interval between automated data imports for a Rss data
     * source. If unset or 0, the data source will not be scheduled for
     * automated polling. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=770)
    public Map<String,Object> unsetDataSourceRssPollingInterval(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDataSourceRssPollingInterval, "");
        return attrs;
    }

    /**
     * The time interval between automated data imports for a Yahoo address
     * book data source. If unset or 0, the data source will not be scheduled
     * for automated polling. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * <p>Use getDataSourceYabPollingIntervalAsString to access value as a string.
     *
     * @see #getDataSourceYabPollingIntervalAsString()
     *
     * @return zmailDataSourceYabPollingInterval in millseconds, or -1 if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=789)
    public long getDataSourceYabPollingInterval() {
        return getTimeInterval(Provisioning.A_zmailDataSourceYabPollingInterval, -1L);
    }

    /**
     * The time interval between automated data imports for a Yahoo address
     * book data source. If unset or 0, the data source will not be scheduled
     * for automated polling. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @return zmailDataSourceYabPollingInterval, or null if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=789)
    public String getDataSourceYabPollingIntervalAsString() {
        return getAttr(Provisioning.A_zmailDataSourceYabPollingInterval, null);
    }

    /**
     * The time interval between automated data imports for a Yahoo address
     * book data source. If unset or 0, the data source will not be scheduled
     * for automated polling. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param zmailDataSourceYabPollingInterval new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=789)
    public void setDataSourceYabPollingInterval(String zmailDataSourceYabPollingInterval) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDataSourceYabPollingInterval, zmailDataSourceYabPollingInterval);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * The time interval between automated data imports for a Yahoo address
     * book data source. If unset or 0, the data source will not be scheduled
     * for automated polling. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param zmailDataSourceYabPollingInterval new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=789)
    public Map<String,Object> setDataSourceYabPollingInterval(String zmailDataSourceYabPollingInterval, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDataSourceYabPollingInterval, zmailDataSourceYabPollingInterval);
        return attrs;
    }

    /**
     * The time interval between automated data imports for a Yahoo address
     * book data source. If unset or 0, the data source will not be scheduled
     * for automated polling. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=789)
    public void unsetDataSourceYabPollingInterval() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDataSourceYabPollingInterval, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * The time interval between automated data imports for a Yahoo address
     * book data source. If unset or 0, the data source will not be scheduled
     * for automated polling. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=789)
    public Map<String,Object> unsetDataSourceYabPollingInterval(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDataSourceYabPollingInterval, "");
        return attrs;
    }

    /**
     * Default flags on folder. These are set when a new folder is created,
     * has no effect on existing folders. Possible values are: * -
     * \Subscribed b - \ExcludeFB # - \Checked i - \NoInherit y - \SyncFolder
     * ~ - \Sync o - \Noinferiors g - \Global
     *
     * @return zmailDefaultFolderFlags, or null if unset
     *
     * @since ZCS 7.1.1
     */
    @ZAttr(id=1210)
    public String getDefaultFolderFlags() {
        return getAttr(Provisioning.A_zmailDefaultFolderFlags, null);
    }

    /**
     * Default flags on folder. These are set when a new folder is created,
     * has no effect on existing folders. Possible values are: * -
     * \Subscribed b - \ExcludeFB # - \Checked i - \NoInherit y - \SyncFolder
     * ~ - \Sync o - \Noinferiors g - \Global
     *
     * @param zmailDefaultFolderFlags new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.1.1
     */
    @ZAttr(id=1210)
    public void setDefaultFolderFlags(String zmailDefaultFolderFlags) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDefaultFolderFlags, zmailDefaultFolderFlags);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Default flags on folder. These are set when a new folder is created,
     * has no effect on existing folders. Possible values are: * -
     * \Subscribed b - \ExcludeFB # - \Checked i - \NoInherit y - \SyncFolder
     * ~ - \Sync o - \Noinferiors g - \Global
     *
     * @param zmailDefaultFolderFlags new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.1.1
     */
    @ZAttr(id=1210)
    public Map<String,Object> setDefaultFolderFlags(String zmailDefaultFolderFlags, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDefaultFolderFlags, zmailDefaultFolderFlags);
        return attrs;
    }

    /**
     * Default flags on folder. These are set when a new folder is created,
     * has no effect on existing folders. Possible values are: * -
     * \Subscribed b - \ExcludeFB # - \Checked i - \NoInherit y - \SyncFolder
     * ~ - \Sync o - \Noinferiors g - \Global
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.1.1
     */
    @ZAttr(id=1210)
    public void unsetDefaultFolderFlags() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDefaultFolderFlags, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Default flags on folder. These are set when a new folder is created,
     * has no effect on existing folders. Possible values are: * -
     * \Subscribed b - \ExcludeFB # - \Checked i - \NoInherit y - \SyncFolder
     * ~ - \Sync o - \Noinferiors g - \Global
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.1.1
     */
    @ZAttr(id=1210)
    public Map<String,Object> unsetDefaultFolderFlags(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDefaultFolderFlags, "");
        return attrs;
    }

    /**
     * allowed passcode lockout duration. Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @return zmailDeviceAllowedPasscodeLockoutDuration, or empty array if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1397)
    public String[] getDeviceAllowedPasscodeLockoutDurationAsString() {
        String[] value = getMultiAttr(Provisioning.A_zmailDeviceAllowedPasscodeLockoutDuration); return value.length > 0 ? value : new String[] {"1m","2m","5m","10m","30m"};
    }

    /**
     * allowed passcode lockout duration. Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param zmailDeviceAllowedPasscodeLockoutDuration new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1397)
    public void setDeviceAllowedPasscodeLockoutDuration(String[] zmailDeviceAllowedPasscodeLockoutDuration) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDeviceAllowedPasscodeLockoutDuration, zmailDeviceAllowedPasscodeLockoutDuration);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * allowed passcode lockout duration. Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param zmailDeviceAllowedPasscodeLockoutDuration new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1397)
    public Map<String,Object> setDeviceAllowedPasscodeLockoutDuration(String[] zmailDeviceAllowedPasscodeLockoutDuration, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDeviceAllowedPasscodeLockoutDuration, zmailDeviceAllowedPasscodeLockoutDuration);
        return attrs;
    }

    /**
     * allowed passcode lockout duration. Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1397)
    public void unsetDeviceAllowedPasscodeLockoutDuration() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDeviceAllowedPasscodeLockoutDuration, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * allowed passcode lockout duration. Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1397)
    public Map<String,Object> unsetDeviceAllowedPasscodeLockoutDuration(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDeviceAllowedPasscodeLockoutDuration, "");
        return attrs;
    }

    /**
     * Whether OpenWith feature is enabled on devices.
     *
     * @return zmailDeviceFileOpenWithEnabled, or true if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1400)
    public boolean isDeviceFileOpenWithEnabled() {
        return getBooleanAttr(Provisioning.A_zmailDeviceFileOpenWithEnabled, true);
    }

    /**
     * Whether OpenWith feature is enabled on devices.
     *
     * @param zmailDeviceFileOpenWithEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1400)
    public void setDeviceFileOpenWithEnabled(boolean zmailDeviceFileOpenWithEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDeviceFileOpenWithEnabled, zmailDeviceFileOpenWithEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Whether OpenWith feature is enabled on devices.
     *
     * @param zmailDeviceFileOpenWithEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1400)
    public Map<String,Object> setDeviceFileOpenWithEnabled(boolean zmailDeviceFileOpenWithEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDeviceFileOpenWithEnabled, zmailDeviceFileOpenWithEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * Whether OpenWith feature is enabled on devices.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1400)
    public void unsetDeviceFileOpenWithEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDeviceFileOpenWithEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Whether OpenWith feature is enabled on devices.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1400)
    public Map<String,Object> unsetDeviceFileOpenWithEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDeviceFileOpenWithEnabled, "");
        return attrs;
    }

    /**
     * For native apps - whether to lock device when inactive.
     *
     * @return zmailDeviceLockWhenInactive, or false if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1399)
    public boolean isDeviceLockWhenInactive() {
        return getBooleanAttr(Provisioning.A_zmailDeviceLockWhenInactive, false);
    }

    /**
     * For native apps - whether to lock device when inactive.
     *
     * @param zmailDeviceLockWhenInactive new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1399)
    public void setDeviceLockWhenInactive(boolean zmailDeviceLockWhenInactive) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDeviceLockWhenInactive, zmailDeviceLockWhenInactive ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * For native apps - whether to lock device when inactive.
     *
     * @param zmailDeviceLockWhenInactive new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1399)
    public Map<String,Object> setDeviceLockWhenInactive(boolean zmailDeviceLockWhenInactive, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDeviceLockWhenInactive, zmailDeviceLockWhenInactive ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * For native apps - whether to lock device when inactive.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1399)
    public void unsetDeviceLockWhenInactive() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDeviceLockWhenInactive, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * For native apps - whether to lock device when inactive.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1399)
    public Map<String,Object> unsetDeviceLockWhenInactive(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDeviceLockWhenInactive, "");
        return attrs;
    }

    /**
     * Whether offline reading of documents on device is allowed
     *
     * @return zmailDeviceOfflineCacheEnabled, or false if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1412)
    public boolean isDeviceOfflineCacheEnabled() {
        return getBooleanAttr(Provisioning.A_zmailDeviceOfflineCacheEnabled, false);
    }

    /**
     * Whether offline reading of documents on device is allowed
     *
     * @param zmailDeviceOfflineCacheEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1412)
    public void setDeviceOfflineCacheEnabled(boolean zmailDeviceOfflineCacheEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDeviceOfflineCacheEnabled, zmailDeviceOfflineCacheEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Whether offline reading of documents on device is allowed
     *
     * @param zmailDeviceOfflineCacheEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1412)
    public Map<String,Object> setDeviceOfflineCacheEnabled(boolean zmailDeviceOfflineCacheEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDeviceOfflineCacheEnabled, zmailDeviceOfflineCacheEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * Whether offline reading of documents on device is allowed
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1412)
    public void unsetDeviceOfflineCacheEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDeviceOfflineCacheEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Whether offline reading of documents on device is allowed
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1412)
    public Map<String,Object> unsetDeviceOfflineCacheEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDeviceOfflineCacheEnabled, "");
        return attrs;
    }

    /**
     * Whether device is password protected in native apps
     *
     * @return zmailDevicePasscodeEnabled, or false if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1396)
    public boolean isDevicePasscodeEnabled() {
        return getBooleanAttr(Provisioning.A_zmailDevicePasscodeEnabled, false);
    }

    /**
     * Whether device is password protected in native apps
     *
     * @param zmailDevicePasscodeEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1396)
    public void setDevicePasscodeEnabled(boolean zmailDevicePasscodeEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDevicePasscodeEnabled, zmailDevicePasscodeEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Whether device is password protected in native apps
     *
     * @param zmailDevicePasscodeEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1396)
    public Map<String,Object> setDevicePasscodeEnabled(boolean zmailDevicePasscodeEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDevicePasscodeEnabled, zmailDevicePasscodeEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * Whether device is password protected in native apps
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1396)
    public void unsetDevicePasscodeEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDevicePasscodeEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Whether device is password protected in native apps
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1396)
    public Map<String,Object> unsetDevicePasscodeEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDevicePasscodeEnabled, "");
        return attrs;
    }

    /**
     * passcode lockout duration. Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * <p>Use getDevicePasscodeLockoutDurationAsString to access value as a string.
     *
     * @see #getDevicePasscodeLockoutDurationAsString()
     *
     * @return zmailDevicePasscodeLockoutDuration in millseconds, or -1 if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1398)
    public long getDevicePasscodeLockoutDuration() {
        return getTimeInterval(Provisioning.A_zmailDevicePasscodeLockoutDuration, -1L);
    }

    /**
     * passcode lockout duration. Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @return zmailDevicePasscodeLockoutDuration, or null if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1398)
    public String getDevicePasscodeLockoutDurationAsString() {
        return getAttr(Provisioning.A_zmailDevicePasscodeLockoutDuration, null);
    }

    /**
     * passcode lockout duration. Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param zmailDevicePasscodeLockoutDuration new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1398)
    public void setDevicePasscodeLockoutDuration(String zmailDevicePasscodeLockoutDuration) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDevicePasscodeLockoutDuration, zmailDevicePasscodeLockoutDuration);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * passcode lockout duration. Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param zmailDevicePasscodeLockoutDuration new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1398)
    public Map<String,Object> setDevicePasscodeLockoutDuration(String zmailDevicePasscodeLockoutDuration, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDevicePasscodeLockoutDuration, zmailDevicePasscodeLockoutDuration);
        return attrs;
    }

    /**
     * passcode lockout duration. Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1398)
    public void unsetDevicePasscodeLockoutDuration() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDevicePasscodeLockoutDuration, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * passcode lockout duration. Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1398)
    public Map<String,Object> unsetDevicePasscodeLockoutDuration(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDevicePasscodeLockoutDuration, "");
        return attrs;
    }

    /**
     * maximum amount of mail quota a domain admin can set on a user
     *
     * @return zmailDomainAdminMaxMailQuota, or -1 if unset
     */
    @ZAttr(id=398)
    public long getDomainAdminMaxMailQuota() {
        return getLongAttr(Provisioning.A_zmailDomainAdminMaxMailQuota, -1L);
    }

    /**
     * maximum amount of mail quota a domain admin can set on a user
     *
     * @param zmailDomainAdminMaxMailQuota new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=398)
    public void setDomainAdminMaxMailQuota(long zmailDomainAdminMaxMailQuota) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDomainAdminMaxMailQuota, Long.toString(zmailDomainAdminMaxMailQuota));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * maximum amount of mail quota a domain admin can set on a user
     *
     * @param zmailDomainAdminMaxMailQuota new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=398)
    public Map<String,Object> setDomainAdminMaxMailQuota(long zmailDomainAdminMaxMailQuota, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDomainAdminMaxMailQuota, Long.toString(zmailDomainAdminMaxMailQuota));
        return attrs;
    }

    /**
     * maximum amount of mail quota a domain admin can set on a user
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=398)
    public void unsetDomainAdminMaxMailQuota() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDomainAdminMaxMailQuota, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * maximum amount of mail quota a domain admin can set on a user
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=398)
    public Map<String,Object> unsetDomainAdminMaxMailQuota(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDomainAdminMaxMailQuota, "");
        return attrs;
    }

    /**
     * enable/disable dumpster
     *
     * @return zmailDumpsterEnabled, or false if unset
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1128)
    public boolean isDumpsterEnabled() {
        return getBooleanAttr(Provisioning.A_zmailDumpsterEnabled, false);
    }

    /**
     * enable/disable dumpster
     *
     * @param zmailDumpsterEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1128)
    public void setDumpsterEnabled(boolean zmailDumpsterEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDumpsterEnabled, zmailDumpsterEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * enable/disable dumpster
     *
     * @param zmailDumpsterEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1128)
    public Map<String,Object> setDumpsterEnabled(boolean zmailDumpsterEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDumpsterEnabled, zmailDumpsterEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * enable/disable dumpster
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1128)
    public void unsetDumpsterEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDumpsterEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * enable/disable dumpster
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1128)
    public Map<String,Object> unsetDumpsterEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDumpsterEnabled, "");
        return attrs;
    }

    /**
     * disables purging from dumpster when set to FALSE
     *
     * @return zmailDumpsterPurgeEnabled, or true if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1315)
    public boolean isDumpsterPurgeEnabled() {
        return getBooleanAttr(Provisioning.A_zmailDumpsterPurgeEnabled, true);
    }

    /**
     * disables purging from dumpster when set to FALSE
     *
     * @param zmailDumpsterPurgeEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1315)
    public void setDumpsterPurgeEnabled(boolean zmailDumpsterPurgeEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDumpsterPurgeEnabled, zmailDumpsterPurgeEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * disables purging from dumpster when set to FALSE
     *
     * @param zmailDumpsterPurgeEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1315)
    public Map<String,Object> setDumpsterPurgeEnabled(boolean zmailDumpsterPurgeEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDumpsterPurgeEnabled, zmailDumpsterPurgeEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * disables purging from dumpster when set to FALSE
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1315)
    public void unsetDumpsterPurgeEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDumpsterPurgeEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * disables purging from dumpster when set to FALSE
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1315)
    public Map<String,Object> unsetDumpsterPurgeEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDumpsterPurgeEnabled, "");
        return attrs;
    }

    /**
     * limits how much of a dumpster data is viewable by the end user, based
     * on the age since being put in dumpster. Must be in valid duration
     * format: {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h -
     * hours, m - minutes, s - seconds, d - days, ms - milliseconds. If time
     * unit is not specified, the default is s(seconds).
     *
     * <p>Use getDumpsterUserVisibleAgeAsString to access value as a string.
     *
     * @see #getDumpsterUserVisibleAgeAsString()
     *
     * @return zmailDumpsterUserVisibleAge in millseconds, or 2592000000 (30d)  if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1314)
    public long getDumpsterUserVisibleAge() {
        return getTimeInterval(Provisioning.A_zmailDumpsterUserVisibleAge, 2592000000L);
    }

    /**
     * limits how much of a dumpster data is viewable by the end user, based
     * on the age since being put in dumpster. Must be in valid duration
     * format: {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h -
     * hours, m - minutes, s - seconds, d - days, ms - milliseconds. If time
     * unit is not specified, the default is s(seconds).
     *
     * @return zmailDumpsterUserVisibleAge, or "30d" if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1314)
    public String getDumpsterUserVisibleAgeAsString() {
        return getAttr(Provisioning.A_zmailDumpsterUserVisibleAge, "30d");
    }

    /**
     * limits how much of a dumpster data is viewable by the end user, based
     * on the age since being put in dumpster. Must be in valid duration
     * format: {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h -
     * hours, m - minutes, s - seconds, d - days, ms - milliseconds. If time
     * unit is not specified, the default is s(seconds).
     *
     * @param zmailDumpsterUserVisibleAge new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1314)
    public void setDumpsterUserVisibleAge(String zmailDumpsterUserVisibleAge) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDumpsterUserVisibleAge, zmailDumpsterUserVisibleAge);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * limits how much of a dumpster data is viewable by the end user, based
     * on the age since being put in dumpster. Must be in valid duration
     * format: {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h -
     * hours, m - minutes, s - seconds, d - days, ms - milliseconds. If time
     * unit is not specified, the default is s(seconds).
     *
     * @param zmailDumpsterUserVisibleAge new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1314)
    public Map<String,Object> setDumpsterUserVisibleAge(String zmailDumpsterUserVisibleAge, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDumpsterUserVisibleAge, zmailDumpsterUserVisibleAge);
        return attrs;
    }

    /**
     * limits how much of a dumpster data is viewable by the end user, based
     * on the age since being put in dumpster. Must be in valid duration
     * format: {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h -
     * hours, m - minutes, s - seconds, d - days, ms - milliseconds. If time
     * unit is not specified, the default is s(seconds).
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1314)
    public void unsetDumpsterUserVisibleAge() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDumpsterUserVisibleAge, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * limits how much of a dumpster data is viewable by the end user, based
     * on the age since being put in dumpster. Must be in valid duration
     * format: {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h -
     * hours, m - minutes, s - seconds, d - days, ms - milliseconds. If time
     * unit is not specified, the default is s(seconds).
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1314)
    public Map<String,Object> unsetDumpsterUserVisibleAge(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailDumpsterUserVisibleAge, "");
        return attrs;
    }

    /**
     * Duration after the last time the external virtual account was
     * automatically disabled by the system after which the external virtual
     * account would be automatically deleted. Value of 0 indicates that the
     * external virtual account should never be automatically deleted.
     * Applicable only when zmailIsExternalVirtualAccount on the account is
     * set to TRUE. . Must be in valid duration format: {digits}{time-unit}.
     * digits: 0-9, time-unit: [hmsd]|ms. h - hours, m - minutes, s -
     * seconds, d - days, ms - milliseconds. If time unit is not specified,
     * the default is s(seconds).
     *
     * <p>Use getExternalAccountLifetimeAfterDisabledAsString to access value as a string.
     *
     * @see #getExternalAccountLifetimeAfterDisabledAsString()
     *
     * @return zmailExternalAccountLifetimeAfterDisabled in millseconds, or 2592000000 (30d)  if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1372)
    public long getExternalAccountLifetimeAfterDisabled() {
        return getTimeInterval(Provisioning.A_zmailExternalAccountLifetimeAfterDisabled, 2592000000L);
    }

    /**
     * Duration after the last time the external virtual account was
     * automatically disabled by the system after which the external virtual
     * account would be automatically deleted. Value of 0 indicates that the
     * external virtual account should never be automatically deleted.
     * Applicable only when zmailIsExternalVirtualAccount on the account is
     * set to TRUE. . Must be in valid duration format: {digits}{time-unit}.
     * digits: 0-9, time-unit: [hmsd]|ms. h - hours, m - minutes, s -
     * seconds, d - days, ms - milliseconds. If time unit is not specified,
     * the default is s(seconds).
     *
     * @return zmailExternalAccountLifetimeAfterDisabled, or "30d" if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1372)
    public String getExternalAccountLifetimeAfterDisabledAsString() {
        return getAttr(Provisioning.A_zmailExternalAccountLifetimeAfterDisabled, "30d");
    }

    /**
     * Duration after the last time the external virtual account was
     * automatically disabled by the system after which the external virtual
     * account would be automatically deleted. Value of 0 indicates that the
     * external virtual account should never be automatically deleted.
     * Applicable only when zmailIsExternalVirtualAccount on the account is
     * set to TRUE. . Must be in valid duration format: {digits}{time-unit}.
     * digits: 0-9, time-unit: [hmsd]|ms. h - hours, m - minutes, s -
     * seconds, d - days, ms - milliseconds. If time unit is not specified,
     * the default is s(seconds).
     *
     * @param zmailExternalAccountLifetimeAfterDisabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1372)
    public void setExternalAccountLifetimeAfterDisabled(String zmailExternalAccountLifetimeAfterDisabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailExternalAccountLifetimeAfterDisabled, zmailExternalAccountLifetimeAfterDisabled);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Duration after the last time the external virtual account was
     * automatically disabled by the system after which the external virtual
     * account would be automatically deleted. Value of 0 indicates that the
     * external virtual account should never be automatically deleted.
     * Applicable only when zmailIsExternalVirtualAccount on the account is
     * set to TRUE. . Must be in valid duration format: {digits}{time-unit}.
     * digits: 0-9, time-unit: [hmsd]|ms. h - hours, m - minutes, s -
     * seconds, d - days, ms - milliseconds. If time unit is not specified,
     * the default is s(seconds).
     *
     * @param zmailExternalAccountLifetimeAfterDisabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1372)
    public Map<String,Object> setExternalAccountLifetimeAfterDisabled(String zmailExternalAccountLifetimeAfterDisabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailExternalAccountLifetimeAfterDisabled, zmailExternalAccountLifetimeAfterDisabled);
        return attrs;
    }

    /**
     * Duration after the last time the external virtual account was
     * automatically disabled by the system after which the external virtual
     * account would be automatically deleted. Value of 0 indicates that the
     * external virtual account should never be automatically deleted.
     * Applicable only when zmailIsExternalVirtualAccount on the account is
     * set to TRUE. . Must be in valid duration format: {digits}{time-unit}.
     * digits: 0-9, time-unit: [hmsd]|ms. h - hours, m - minutes, s -
     * seconds, d - days, ms - milliseconds. If time unit is not specified,
     * the default is s(seconds).
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1372)
    public void unsetExternalAccountLifetimeAfterDisabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailExternalAccountLifetimeAfterDisabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Duration after the last time the external virtual account was
     * automatically disabled by the system after which the external virtual
     * account would be automatically deleted. Value of 0 indicates that the
     * external virtual account should never be automatically deleted.
     * Applicable only when zmailIsExternalVirtualAccount on the account is
     * set to TRUE. . Must be in valid duration format: {digits}{time-unit}.
     * digits: 0-9, time-unit: [hmsd]|ms. h - hours, m - minutes, s -
     * seconds, d - days, ms - milliseconds. If time unit is not specified,
     * the default is s(seconds).
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1372)
    public Map<String,Object> unsetExternalAccountLifetimeAfterDisabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailExternalAccountLifetimeAfterDisabled, "");
        return attrs;
    }

    /**
     * whether checking against zmailExternalShareWhitelistDomain for
     * external user sharing is enabled
     *
     * @return zmailExternalShareDomainWhitelistEnabled, or false if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1264)
    public boolean isExternalShareDomainWhitelistEnabled() {
        return getBooleanAttr(Provisioning.A_zmailExternalShareDomainWhitelistEnabled, false);
    }

    /**
     * whether checking against zmailExternalShareWhitelistDomain for
     * external user sharing is enabled
     *
     * @param zmailExternalShareDomainWhitelistEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1264)
    public void setExternalShareDomainWhitelistEnabled(boolean zmailExternalShareDomainWhitelistEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailExternalShareDomainWhitelistEnabled, zmailExternalShareDomainWhitelistEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether checking against zmailExternalShareWhitelistDomain for
     * external user sharing is enabled
     *
     * @param zmailExternalShareDomainWhitelistEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1264)
    public Map<String,Object> setExternalShareDomainWhitelistEnabled(boolean zmailExternalShareDomainWhitelistEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailExternalShareDomainWhitelistEnabled, zmailExternalShareDomainWhitelistEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether checking against zmailExternalShareWhitelistDomain for
     * external user sharing is enabled
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1264)
    public void unsetExternalShareDomainWhitelistEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailExternalShareDomainWhitelistEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether checking against zmailExternalShareWhitelistDomain for
     * external user sharing is enabled
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1264)
    public Map<String,Object> unsetExternalShareDomainWhitelistEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailExternalShareDomainWhitelistEnabled, "");
        return attrs;
    }

    /**
     * Maximum allowed lifetime of shares to external users. A value of 0
     * indicates that there&#039;s no limit on an external share&#039;s
     * lifetime. . Must be in valid duration format: {digits}{time-unit}.
     * digits: 0-9, time-unit: [hmsd]|ms. h - hours, m - minutes, s -
     * seconds, d - days, ms - milliseconds. If time unit is not specified,
     * the default is s(seconds).
     *
     * <p>Use getExternalShareLifetimeAsString to access value as a string.
     *
     * @see #getExternalShareLifetimeAsString()
     *
     * @return zmailExternalShareLifetime in millseconds, or 0 (0)  if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1260)
    public long getExternalShareLifetime() {
        return getTimeInterval(Provisioning.A_zmailExternalShareLifetime, 0L);
    }

    /**
     * Maximum allowed lifetime of shares to external users. A value of 0
     * indicates that there&#039;s no limit on an external share&#039;s
     * lifetime. . Must be in valid duration format: {digits}{time-unit}.
     * digits: 0-9, time-unit: [hmsd]|ms. h - hours, m - minutes, s -
     * seconds, d - days, ms - milliseconds. If time unit is not specified,
     * the default is s(seconds).
     *
     * @return zmailExternalShareLifetime, or "0" if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1260)
    public String getExternalShareLifetimeAsString() {
        return getAttr(Provisioning.A_zmailExternalShareLifetime, "0");
    }

    /**
     * Maximum allowed lifetime of shares to external users. A value of 0
     * indicates that there&#039;s no limit on an external share&#039;s
     * lifetime. . Must be in valid duration format: {digits}{time-unit}.
     * digits: 0-9, time-unit: [hmsd]|ms. h - hours, m - minutes, s -
     * seconds, d - days, ms - milliseconds. If time unit is not specified,
     * the default is s(seconds).
     *
     * @param zmailExternalShareLifetime new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1260)
    public void setExternalShareLifetime(String zmailExternalShareLifetime) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailExternalShareLifetime, zmailExternalShareLifetime);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Maximum allowed lifetime of shares to external users. A value of 0
     * indicates that there&#039;s no limit on an external share&#039;s
     * lifetime. . Must be in valid duration format: {digits}{time-unit}.
     * digits: 0-9, time-unit: [hmsd]|ms. h - hours, m - minutes, s -
     * seconds, d - days, ms - milliseconds. If time unit is not specified,
     * the default is s(seconds).
     *
     * @param zmailExternalShareLifetime new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1260)
    public Map<String,Object> setExternalShareLifetime(String zmailExternalShareLifetime, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailExternalShareLifetime, zmailExternalShareLifetime);
        return attrs;
    }

    /**
     * Maximum allowed lifetime of shares to external users. A value of 0
     * indicates that there&#039;s no limit on an external share&#039;s
     * lifetime. . Must be in valid duration format: {digits}{time-unit}.
     * digits: 0-9, time-unit: [hmsd]|ms. h - hours, m - minutes, s -
     * seconds, d - days, ms - milliseconds. If time unit is not specified,
     * the default is s(seconds).
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1260)
    public void unsetExternalShareLifetime() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailExternalShareLifetime, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Maximum allowed lifetime of shares to external users. A value of 0
     * indicates that there&#039;s no limit on an external share&#039;s
     * lifetime. . Must be in valid duration format: {digits}{time-unit}.
     * digits: 0-9, time-unit: [hmsd]|ms. h - hours, m - minutes, s -
     * seconds, d - days, ms - milliseconds. If time unit is not specified,
     * the default is s(seconds).
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1260)
    public Map<String,Object> unsetExternalShareLifetime(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailExternalShareLifetime, "");
        return attrs;
    }

    /**
     * list of external domains that users can share files and folders with
     *
     * @return zmailExternalShareWhitelistDomain, or empty array if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1263)
    public String[] getExternalShareWhitelistDomain() {
        return getMultiAttr(Provisioning.A_zmailExternalShareWhitelistDomain);
    }

    /**
     * list of external domains that users can share files and folders with
     *
     * @param zmailExternalShareWhitelistDomain new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1263)
    public void setExternalShareWhitelistDomain(String[] zmailExternalShareWhitelistDomain) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailExternalShareWhitelistDomain, zmailExternalShareWhitelistDomain);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * list of external domains that users can share files and folders with
     *
     * @param zmailExternalShareWhitelistDomain new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1263)
    public Map<String,Object> setExternalShareWhitelistDomain(String[] zmailExternalShareWhitelistDomain, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailExternalShareWhitelistDomain, zmailExternalShareWhitelistDomain);
        return attrs;
    }

    /**
     * list of external domains that users can share files and folders with
     *
     * @param zmailExternalShareWhitelistDomain new to add to existing values
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1263)
    public void addExternalShareWhitelistDomain(String zmailExternalShareWhitelistDomain) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "+" + Provisioning.A_zmailExternalShareWhitelistDomain, zmailExternalShareWhitelistDomain);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * list of external domains that users can share files and folders with
     *
     * @param zmailExternalShareWhitelistDomain new to add to existing values
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1263)
    public Map<String,Object> addExternalShareWhitelistDomain(String zmailExternalShareWhitelistDomain, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "+" + Provisioning.A_zmailExternalShareWhitelistDomain, zmailExternalShareWhitelistDomain);
        return attrs;
    }

    /**
     * list of external domains that users can share files and folders with
     *
     * @param zmailExternalShareWhitelistDomain existing value to remove
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1263)
    public void removeExternalShareWhitelistDomain(String zmailExternalShareWhitelistDomain) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "-" + Provisioning.A_zmailExternalShareWhitelistDomain, zmailExternalShareWhitelistDomain);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * list of external domains that users can share files and folders with
     *
     * @param zmailExternalShareWhitelistDomain existing value to remove
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1263)
    public Map<String,Object> removeExternalShareWhitelistDomain(String zmailExternalShareWhitelistDomain, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "-" + Provisioning.A_zmailExternalShareWhitelistDomain, zmailExternalShareWhitelistDomain);
        return attrs;
    }

    /**
     * list of external domains that users can share files and folders with
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1263)
    public void unsetExternalShareWhitelistDomain() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailExternalShareWhitelistDomain, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * list of external domains that users can share files and folders with
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1263)
    public Map<String,Object> unsetExternalShareWhitelistDomain(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailExternalShareWhitelistDomain, "");
        return attrs;
    }

    /**
     * switch for turning external user sharing on/off
     *
     * @return zmailExternalSharingEnabled, or true if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1261)
    public boolean isExternalSharingEnabled() {
        return getBooleanAttr(Provisioning.A_zmailExternalSharingEnabled, true);
    }

    /**
     * switch for turning external user sharing on/off
     *
     * @param zmailExternalSharingEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1261)
    public void setExternalSharingEnabled(boolean zmailExternalSharingEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailExternalSharingEnabled, zmailExternalSharingEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * switch for turning external user sharing on/off
     *
     * @param zmailExternalSharingEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1261)
    public Map<String,Object> setExternalSharingEnabled(boolean zmailExternalSharingEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailExternalSharingEnabled, zmailExternalSharingEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * switch for turning external user sharing on/off
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1261)
    public void unsetExternalSharingEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailExternalSharingEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * switch for turning external user sharing on/off
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1261)
    public Map<String,Object> unsetExternalSharingEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailExternalSharingEnabled, "");
        return attrs;
    }

    /**
     * whether email features and tabs are enabled in the web client if
     * accessed from the admin console
     *
     * @return zmailFeatureAdminMailEnabled, or true if unset
     *
     * @since ZCS 7.1.0
     */
    @ZAttr(id=1170)
    public boolean isFeatureAdminMailEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureAdminMailEnabled, true);
    }

    /**
     * whether email features and tabs are enabled in the web client if
     * accessed from the admin console
     *
     * @param zmailFeatureAdminMailEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.1.0
     */
    @ZAttr(id=1170)
    public void setFeatureAdminMailEnabled(boolean zmailFeatureAdminMailEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureAdminMailEnabled, zmailFeatureAdminMailEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether email features and tabs are enabled in the web client if
     * accessed from the admin console
     *
     * @param zmailFeatureAdminMailEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.1.0
     */
    @ZAttr(id=1170)
    public Map<String,Object> setFeatureAdminMailEnabled(boolean zmailFeatureAdminMailEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureAdminMailEnabled, zmailFeatureAdminMailEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether email features and tabs are enabled in the web client if
     * accessed from the admin console
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.1.0
     */
    @ZAttr(id=1170)
    public void unsetFeatureAdminMailEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureAdminMailEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether email features and tabs are enabled in the web client if
     * accessed from the admin console
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.1.0
     */
    @ZAttr(id=1170)
    public Map<String,Object> unsetFeatureAdminMailEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureAdminMailEnabled, "");
        return attrs;
    }

    /**
     * Deprecated since: 8.0.0. Deprecated as of bug 56924. Orig desc:
     * advanced search button enabled
     *
     * @return zmailFeatureAdvancedSearchEnabled, or true if unset
     */
    @ZAttr(id=138)
    public boolean isFeatureAdvancedSearchEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureAdvancedSearchEnabled, true);
    }

    /**
     * Deprecated since: 8.0.0. Deprecated as of bug 56924. Orig desc:
     * advanced search button enabled
     *
     * @param zmailFeatureAdvancedSearchEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=138)
    public void setFeatureAdvancedSearchEnabled(boolean zmailFeatureAdvancedSearchEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureAdvancedSearchEnabled, zmailFeatureAdvancedSearchEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Deprecated since: 8.0.0. Deprecated as of bug 56924. Orig desc:
     * advanced search button enabled
     *
     * @param zmailFeatureAdvancedSearchEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=138)
    public Map<String,Object> setFeatureAdvancedSearchEnabled(boolean zmailFeatureAdvancedSearchEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureAdvancedSearchEnabled, zmailFeatureAdvancedSearchEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * Deprecated since: 8.0.0. Deprecated as of bug 56924. Orig desc:
     * advanced search button enabled
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=138)
    public void unsetFeatureAdvancedSearchEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureAdvancedSearchEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Deprecated since: 8.0.0. Deprecated as of bug 56924. Orig desc:
     * advanced search button enabled
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=138)
    public Map<String,Object> unsetFeatureAdvancedSearchEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureAdvancedSearchEnabled, "");
        return attrs;
    }

    /**
     * whether or not to enable rerouting spam messages to Junk folder in
     * ZCS, exposing Junk folder and actions in the web UI, and exposing Junk
     * folder to IMAP clients.
     *
     * @return zmailFeatureAntispamEnabled, or true if unset
     *
     * @since ZCS 7.1.0
     */
    @ZAttr(id=1168)
    public boolean isFeatureAntispamEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureAntispamEnabled, true);
    }

    /**
     * whether or not to enable rerouting spam messages to Junk folder in
     * ZCS, exposing Junk folder and actions in the web UI, and exposing Junk
     * folder to IMAP clients.
     *
     * @param zmailFeatureAntispamEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.1.0
     */
    @ZAttr(id=1168)
    public void setFeatureAntispamEnabled(boolean zmailFeatureAntispamEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureAntispamEnabled, zmailFeatureAntispamEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether or not to enable rerouting spam messages to Junk folder in
     * ZCS, exposing Junk folder and actions in the web UI, and exposing Junk
     * folder to IMAP clients.
     *
     * @param zmailFeatureAntispamEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.1.0
     */
    @ZAttr(id=1168)
    public Map<String,Object> setFeatureAntispamEnabled(boolean zmailFeatureAntispamEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureAntispamEnabled, zmailFeatureAntispamEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether or not to enable rerouting spam messages to Junk folder in
     * ZCS, exposing Junk folder and actions in the web UI, and exposing Junk
     * folder to IMAP clients.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.1.0
     */
    @ZAttr(id=1168)
    public void unsetFeatureAntispamEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureAntispamEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether or not to enable rerouting spam messages to Junk folder in
     * ZCS, exposing Junk folder and actions in the web UI, and exposing Junk
     * folder to IMAP clients.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.1.0
     */
    @ZAttr(id=1168)
    public Map<String,Object> unsetFeatureAntispamEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureAntispamEnabled, "");
        return attrs;
    }

    /**
     * Docs features enabled in briefcase
     *
     * @return zmailFeatureBriefcaseDocsEnabled, or true if unset
     *
     * @since ZCS 6.0.2
     */
    @ZAttr(id=1055)
    public boolean isFeatureBriefcaseDocsEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureBriefcaseDocsEnabled, true);
    }

    /**
     * Docs features enabled in briefcase
     *
     * @param zmailFeatureBriefcaseDocsEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.2
     */
    @ZAttr(id=1055)
    public void setFeatureBriefcaseDocsEnabled(boolean zmailFeatureBriefcaseDocsEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureBriefcaseDocsEnabled, zmailFeatureBriefcaseDocsEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Docs features enabled in briefcase
     *
     * @param zmailFeatureBriefcaseDocsEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.2
     */
    @ZAttr(id=1055)
    public Map<String,Object> setFeatureBriefcaseDocsEnabled(boolean zmailFeatureBriefcaseDocsEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureBriefcaseDocsEnabled, zmailFeatureBriefcaseDocsEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * Docs features enabled in briefcase
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.2
     */
    @ZAttr(id=1055)
    public void unsetFeatureBriefcaseDocsEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureBriefcaseDocsEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Docs features enabled in briefcase
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.2
     */
    @ZAttr(id=1055)
    public Map<String,Object> unsetFeatureBriefcaseDocsEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureBriefcaseDocsEnabled, "");
        return attrs;
    }

    /**
     * Slides features enabled in briefcase
     *
     * @return zmailFeatureBriefcaseSlidesEnabled, or false if unset
     *
     * @since ZCS 6.0.2
     */
    @ZAttr(id=1054)
    public boolean isFeatureBriefcaseSlidesEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureBriefcaseSlidesEnabled, false);
    }

    /**
     * Slides features enabled in briefcase
     *
     * @param zmailFeatureBriefcaseSlidesEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.2
     */
    @ZAttr(id=1054)
    public void setFeatureBriefcaseSlidesEnabled(boolean zmailFeatureBriefcaseSlidesEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureBriefcaseSlidesEnabled, zmailFeatureBriefcaseSlidesEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Slides features enabled in briefcase
     *
     * @param zmailFeatureBriefcaseSlidesEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.2
     */
    @ZAttr(id=1054)
    public Map<String,Object> setFeatureBriefcaseSlidesEnabled(boolean zmailFeatureBriefcaseSlidesEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureBriefcaseSlidesEnabled, zmailFeatureBriefcaseSlidesEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * Slides features enabled in briefcase
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.2
     */
    @ZAttr(id=1054)
    public void unsetFeatureBriefcaseSlidesEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureBriefcaseSlidesEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Slides features enabled in briefcase
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.2
     */
    @ZAttr(id=1054)
    public Map<String,Object> unsetFeatureBriefcaseSlidesEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureBriefcaseSlidesEnabled, "");
        return attrs;
    }

    /**
     * Spreadsheet features enabled in briefcase
     *
     * @return zmailFeatureBriefcaseSpreadsheetEnabled, or false if unset
     *
     * @since ZCS 6.0.2
     */
    @ZAttr(id=1053)
    public boolean isFeatureBriefcaseSpreadsheetEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureBriefcaseSpreadsheetEnabled, false);
    }

    /**
     * Spreadsheet features enabled in briefcase
     *
     * @param zmailFeatureBriefcaseSpreadsheetEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.2
     */
    @ZAttr(id=1053)
    public void setFeatureBriefcaseSpreadsheetEnabled(boolean zmailFeatureBriefcaseSpreadsheetEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureBriefcaseSpreadsheetEnabled, zmailFeatureBriefcaseSpreadsheetEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Spreadsheet features enabled in briefcase
     *
     * @param zmailFeatureBriefcaseSpreadsheetEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.2
     */
    @ZAttr(id=1053)
    public Map<String,Object> setFeatureBriefcaseSpreadsheetEnabled(boolean zmailFeatureBriefcaseSpreadsheetEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureBriefcaseSpreadsheetEnabled, zmailFeatureBriefcaseSpreadsheetEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * Spreadsheet features enabled in briefcase
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.2
     */
    @ZAttr(id=1053)
    public void unsetFeatureBriefcaseSpreadsheetEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureBriefcaseSpreadsheetEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Spreadsheet features enabled in briefcase
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.2
     */
    @ZAttr(id=1053)
    public Map<String,Object> unsetFeatureBriefcaseSpreadsheetEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureBriefcaseSpreadsheetEnabled, "");
        return attrs;
    }

    /**
     * whether to allow use of briefcase feature
     *
     * @return zmailFeatureBriefcasesEnabled, or false if unset
     */
    @ZAttr(id=498)
    public boolean isFeatureBriefcasesEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureBriefcasesEnabled, false);
    }

    /**
     * whether to allow use of briefcase feature
     *
     * @param zmailFeatureBriefcasesEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=498)
    public void setFeatureBriefcasesEnabled(boolean zmailFeatureBriefcasesEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureBriefcasesEnabled, zmailFeatureBriefcasesEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to allow use of briefcase feature
     *
     * @param zmailFeatureBriefcasesEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=498)
    public Map<String,Object> setFeatureBriefcasesEnabled(boolean zmailFeatureBriefcasesEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureBriefcasesEnabled, zmailFeatureBriefcasesEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether to allow use of briefcase feature
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=498)
    public void unsetFeatureBriefcasesEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureBriefcasesEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to allow use of briefcase feature
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=498)
    public Map<String,Object> unsetFeatureBriefcasesEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureBriefcasesEnabled, "");
        return attrs;
    }

    /**
     * calendar features
     *
     * @return zmailFeatureCalendarEnabled, or true if unset
     */
    @ZAttr(id=136)
    public boolean isFeatureCalendarEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureCalendarEnabled, true);
    }

    /**
     * calendar features
     *
     * @param zmailFeatureCalendarEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=136)
    public void setFeatureCalendarEnabled(boolean zmailFeatureCalendarEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureCalendarEnabled, zmailFeatureCalendarEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * calendar features
     *
     * @param zmailFeatureCalendarEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=136)
    public Map<String,Object> setFeatureCalendarEnabled(boolean zmailFeatureCalendarEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureCalendarEnabled, zmailFeatureCalendarEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * calendar features
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=136)
    public void unsetFeatureCalendarEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureCalendarEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * calendar features
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=136)
    public Map<String,Object> unsetFeatureCalendarEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureCalendarEnabled, "");
        return attrs;
    }

    /**
     * whether receiving reminders on the designated device for appointments
     * and tasks is enabled
     *
     * @return zmailFeatureCalendarReminderDeviceEmailEnabled, or false if unset
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1150)
    public boolean isFeatureCalendarReminderDeviceEmailEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureCalendarReminderDeviceEmailEnabled, false);
    }

    /**
     * whether receiving reminders on the designated device for appointments
     * and tasks is enabled
     *
     * @param zmailFeatureCalendarReminderDeviceEmailEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1150)
    public void setFeatureCalendarReminderDeviceEmailEnabled(boolean zmailFeatureCalendarReminderDeviceEmailEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureCalendarReminderDeviceEmailEnabled, zmailFeatureCalendarReminderDeviceEmailEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether receiving reminders on the designated device for appointments
     * and tasks is enabled
     *
     * @param zmailFeatureCalendarReminderDeviceEmailEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1150)
    public Map<String,Object> setFeatureCalendarReminderDeviceEmailEnabled(boolean zmailFeatureCalendarReminderDeviceEmailEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureCalendarReminderDeviceEmailEnabled, zmailFeatureCalendarReminderDeviceEmailEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether receiving reminders on the designated device for appointments
     * and tasks is enabled
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1150)
    public void unsetFeatureCalendarReminderDeviceEmailEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureCalendarReminderDeviceEmailEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether receiving reminders on the designated device for appointments
     * and tasks is enabled
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1150)
    public Map<String,Object> unsetFeatureCalendarReminderDeviceEmailEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureCalendarReminderDeviceEmailEnabled, "");
        return attrs;
    }

    /**
     * calendar upsell enabled
     *
     * @return zmailFeatureCalendarUpsellEnabled, or false if unset
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=531)
    public boolean isFeatureCalendarUpsellEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureCalendarUpsellEnabled, false);
    }

    /**
     * calendar upsell enabled
     *
     * @param zmailFeatureCalendarUpsellEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=531)
    public void setFeatureCalendarUpsellEnabled(boolean zmailFeatureCalendarUpsellEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureCalendarUpsellEnabled, zmailFeatureCalendarUpsellEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * calendar upsell enabled
     *
     * @param zmailFeatureCalendarUpsellEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=531)
    public Map<String,Object> setFeatureCalendarUpsellEnabled(boolean zmailFeatureCalendarUpsellEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureCalendarUpsellEnabled, zmailFeatureCalendarUpsellEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * calendar upsell enabled
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=531)
    public void unsetFeatureCalendarUpsellEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureCalendarUpsellEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * calendar upsell enabled
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=531)
    public Map<String,Object> unsetFeatureCalendarUpsellEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureCalendarUpsellEnabled, "");
        return attrs;
    }

    /**
     * calendar upsell URL
     *
     * @return zmailFeatureCalendarUpsellURL, or null if unset
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=532)
    public String getFeatureCalendarUpsellURL() {
        return getAttr(Provisioning.A_zmailFeatureCalendarUpsellURL, null);
    }

    /**
     * calendar upsell URL
     *
     * @param zmailFeatureCalendarUpsellURL new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=532)
    public void setFeatureCalendarUpsellURL(String zmailFeatureCalendarUpsellURL) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureCalendarUpsellURL, zmailFeatureCalendarUpsellURL);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * calendar upsell URL
     *
     * @param zmailFeatureCalendarUpsellURL new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=532)
    public Map<String,Object> setFeatureCalendarUpsellURL(String zmailFeatureCalendarUpsellURL, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureCalendarUpsellURL, zmailFeatureCalendarUpsellURL);
        return attrs;
    }

    /**
     * calendar upsell URL
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=532)
    public void unsetFeatureCalendarUpsellURL() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureCalendarUpsellURL, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * calendar upsell URL
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=532)
    public Map<String,Object> unsetFeatureCalendarUpsellURL(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureCalendarUpsellURL, "");
        return attrs;
    }

    /**
     * password changing
     *
     * @return zmailFeatureChangePasswordEnabled, or true if unset
     */
    @ZAttr(id=141)
    public boolean isFeatureChangePasswordEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureChangePasswordEnabled, true);
    }

    /**
     * password changing
     *
     * @param zmailFeatureChangePasswordEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=141)
    public void setFeatureChangePasswordEnabled(boolean zmailFeatureChangePasswordEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureChangePasswordEnabled, zmailFeatureChangePasswordEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * password changing
     *
     * @param zmailFeatureChangePasswordEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=141)
    public Map<String,Object> setFeatureChangePasswordEnabled(boolean zmailFeatureChangePasswordEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureChangePasswordEnabled, zmailFeatureChangePasswordEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * password changing
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=141)
    public void unsetFeatureChangePasswordEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureChangePasswordEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * password changing
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=141)
    public Map<String,Object> unsetFeatureChangePasswordEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureChangePasswordEnabled, "");
        return attrs;
    }

    /**
     * whether or not compose messages in a new windows is allowed
     *
     * @return zmailFeatureComposeInNewWindowEnabled, or true if unset
     *
     * @since ZCS 5.0.1
     */
    @ZAttr(id=584)
    public boolean isFeatureComposeInNewWindowEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureComposeInNewWindowEnabled, true);
    }

    /**
     * whether or not compose messages in a new windows is allowed
     *
     * @param zmailFeatureComposeInNewWindowEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.1
     */
    @ZAttr(id=584)
    public void setFeatureComposeInNewWindowEnabled(boolean zmailFeatureComposeInNewWindowEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureComposeInNewWindowEnabled, zmailFeatureComposeInNewWindowEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether or not compose messages in a new windows is allowed
     *
     * @param zmailFeatureComposeInNewWindowEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.1
     */
    @ZAttr(id=584)
    public Map<String,Object> setFeatureComposeInNewWindowEnabled(boolean zmailFeatureComposeInNewWindowEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureComposeInNewWindowEnabled, zmailFeatureComposeInNewWindowEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether or not compose messages in a new windows is allowed
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.1
     */
    @ZAttr(id=584)
    public void unsetFeatureComposeInNewWindowEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureComposeInNewWindowEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether or not compose messages in a new windows is allowed
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.1
     */
    @ZAttr(id=584)
    public Map<String,Object> unsetFeatureComposeInNewWindowEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureComposeInNewWindowEnabled, "");
        return attrs;
    }

    /**
     * whether a confirmation page should be display after an operation is
     * done in the UI
     *
     * @return zmailFeatureConfirmationPageEnabled, or false if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=806)
    public boolean isFeatureConfirmationPageEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureConfirmationPageEnabled, false);
    }

    /**
     * whether a confirmation page should be display after an operation is
     * done in the UI
     *
     * @param zmailFeatureConfirmationPageEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=806)
    public void setFeatureConfirmationPageEnabled(boolean zmailFeatureConfirmationPageEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureConfirmationPageEnabled, zmailFeatureConfirmationPageEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether a confirmation page should be display after an operation is
     * done in the UI
     *
     * @param zmailFeatureConfirmationPageEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=806)
    public Map<String,Object> setFeatureConfirmationPageEnabled(boolean zmailFeatureConfirmationPageEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureConfirmationPageEnabled, zmailFeatureConfirmationPageEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether a confirmation page should be display after an operation is
     * done in the UI
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=806)
    public void unsetFeatureConfirmationPageEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureConfirmationPageEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether a confirmation page should be display after an operation is
     * done in the UI
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=806)
    public Map<String,Object> unsetFeatureConfirmationPageEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureConfirmationPageEnabled, "");
        return attrs;
    }

    /**
     * whether detailed contact search UI is enabled
     *
     * @return zmailFeatureContactsDetailedSearchEnabled, or false if unset
     *
     * @since ZCS 7.1.0
     */
    @ZAttr(id=1164)
    public boolean isFeatureContactsDetailedSearchEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureContactsDetailedSearchEnabled, false);
    }

    /**
     * whether detailed contact search UI is enabled
     *
     * @param zmailFeatureContactsDetailedSearchEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.1.0
     */
    @ZAttr(id=1164)
    public void setFeatureContactsDetailedSearchEnabled(boolean zmailFeatureContactsDetailedSearchEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureContactsDetailedSearchEnabled, zmailFeatureContactsDetailedSearchEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether detailed contact search UI is enabled
     *
     * @param zmailFeatureContactsDetailedSearchEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.1.0
     */
    @ZAttr(id=1164)
    public Map<String,Object> setFeatureContactsDetailedSearchEnabled(boolean zmailFeatureContactsDetailedSearchEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureContactsDetailedSearchEnabled, zmailFeatureContactsDetailedSearchEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether detailed contact search UI is enabled
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.1.0
     */
    @ZAttr(id=1164)
    public void unsetFeatureContactsDetailedSearchEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureContactsDetailedSearchEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether detailed contact search UI is enabled
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.1.0
     */
    @ZAttr(id=1164)
    public Map<String,Object> unsetFeatureContactsDetailedSearchEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureContactsDetailedSearchEnabled, "");
        return attrs;
    }

    /**
     * contact features
     *
     * @return zmailFeatureContactsEnabled, or true if unset
     */
    @ZAttr(id=135)
    public boolean isFeatureContactsEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureContactsEnabled, true);
    }

    /**
     * contact features
     *
     * @param zmailFeatureContactsEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=135)
    public void setFeatureContactsEnabled(boolean zmailFeatureContactsEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureContactsEnabled, zmailFeatureContactsEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * contact features
     *
     * @param zmailFeatureContactsEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=135)
    public Map<String,Object> setFeatureContactsEnabled(boolean zmailFeatureContactsEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureContactsEnabled, zmailFeatureContactsEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * contact features
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=135)
    public void unsetFeatureContactsEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureContactsEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * contact features
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=135)
    public Map<String,Object> unsetFeatureContactsEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureContactsEnabled, "");
        return attrs;
    }

    /**
     * address book upsell enabled
     *
     * @return zmailFeatureContactsUpsellEnabled, or false if unset
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=529)
    public boolean isFeatureContactsUpsellEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureContactsUpsellEnabled, false);
    }

    /**
     * address book upsell enabled
     *
     * @param zmailFeatureContactsUpsellEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=529)
    public void setFeatureContactsUpsellEnabled(boolean zmailFeatureContactsUpsellEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureContactsUpsellEnabled, zmailFeatureContactsUpsellEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * address book upsell enabled
     *
     * @param zmailFeatureContactsUpsellEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=529)
    public Map<String,Object> setFeatureContactsUpsellEnabled(boolean zmailFeatureContactsUpsellEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureContactsUpsellEnabled, zmailFeatureContactsUpsellEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * address book upsell enabled
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=529)
    public void unsetFeatureContactsUpsellEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureContactsUpsellEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * address book upsell enabled
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=529)
    public Map<String,Object> unsetFeatureContactsUpsellEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureContactsUpsellEnabled, "");
        return attrs;
    }

    /**
     * address book upsell URL
     *
     * @return zmailFeatureContactsUpsellURL, or null if unset
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=530)
    public String getFeatureContactsUpsellURL() {
        return getAttr(Provisioning.A_zmailFeatureContactsUpsellURL, null);
    }

    /**
     * address book upsell URL
     *
     * @param zmailFeatureContactsUpsellURL new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=530)
    public void setFeatureContactsUpsellURL(String zmailFeatureContactsUpsellURL) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureContactsUpsellURL, zmailFeatureContactsUpsellURL);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * address book upsell URL
     *
     * @param zmailFeatureContactsUpsellURL new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=530)
    public Map<String,Object> setFeatureContactsUpsellURL(String zmailFeatureContactsUpsellURL, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureContactsUpsellURL, zmailFeatureContactsUpsellURL);
        return attrs;
    }

    /**
     * address book upsell URL
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=530)
    public void unsetFeatureContactsUpsellURL() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureContactsUpsellURL, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * address book upsell URL
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=530)
    public Map<String,Object> unsetFeatureContactsUpsellURL(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureContactsUpsellURL, "");
        return attrs;
    }

    /**
     * conversations
     *
     * @return zmailFeatureConversationsEnabled, or true if unset
     */
    @ZAttr(id=140)
    public boolean isFeatureConversationsEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureConversationsEnabled, true);
    }

    /**
     * conversations
     *
     * @param zmailFeatureConversationsEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=140)
    public void setFeatureConversationsEnabled(boolean zmailFeatureConversationsEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureConversationsEnabled, zmailFeatureConversationsEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * conversations
     *
     * @param zmailFeatureConversationsEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=140)
    public Map<String,Object> setFeatureConversationsEnabled(boolean zmailFeatureConversationsEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureConversationsEnabled, zmailFeatureConversationsEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * conversations
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=140)
    public void unsetFeatureConversationsEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureConversationsEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * conversations
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=140)
    public Map<String,Object> unsetFeatureConversationsEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureConversationsEnabled, "");
        return attrs;
    }

    /**
     * whether Crocodoc feature is enabled in the web client
     *
     * @return zmailFeatureCrocodocEnabled, or false if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1381)
    public boolean isFeatureCrocodocEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureCrocodocEnabled, false);
    }

    /**
     * whether Crocodoc feature is enabled in the web client
     *
     * @param zmailFeatureCrocodocEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1381)
    public void setFeatureCrocodocEnabled(boolean zmailFeatureCrocodocEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureCrocodocEnabled, zmailFeatureCrocodocEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether Crocodoc feature is enabled in the web client
     *
     * @param zmailFeatureCrocodocEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1381)
    public Map<String,Object> setFeatureCrocodocEnabled(boolean zmailFeatureCrocodocEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureCrocodocEnabled, zmailFeatureCrocodocEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether Crocodoc feature is enabled in the web client
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1381)
    public void unsetFeatureCrocodocEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureCrocodocEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether Crocodoc feature is enabled in the web client
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1381)
    public Map<String,Object> unsetFeatureCrocodocEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureCrocodocEnabled, "");
        return attrs;
    }

    /**
     * enable end-user mail discarding defined in mail filters features
     *
     * @return zmailFeatureDiscardInFiltersEnabled, or true if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=773)
    public boolean isFeatureDiscardInFiltersEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureDiscardInFiltersEnabled, true);
    }

    /**
     * enable end-user mail discarding defined in mail filters features
     *
     * @param zmailFeatureDiscardInFiltersEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=773)
    public void setFeatureDiscardInFiltersEnabled(boolean zmailFeatureDiscardInFiltersEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureDiscardInFiltersEnabled, zmailFeatureDiscardInFiltersEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * enable end-user mail discarding defined in mail filters features
     *
     * @param zmailFeatureDiscardInFiltersEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=773)
    public Map<String,Object> setFeatureDiscardInFiltersEnabled(boolean zmailFeatureDiscardInFiltersEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureDiscardInFiltersEnabled, zmailFeatureDiscardInFiltersEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * enable end-user mail discarding defined in mail filters features
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=773)
    public void unsetFeatureDiscardInFiltersEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureDiscardInFiltersEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * enable end-user mail discarding defined in mail filters features
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=773)
    public Map<String,Object> unsetFeatureDiscardInFiltersEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureDiscardInFiltersEnabled, "");
        return attrs;
    }

    /**
     * whether expanding distribution list members feature is enabled
     *
     * @return zmailFeatureDistributionListExpandMembersEnabled, or true if unset
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1134)
    public boolean isFeatureDistributionListExpandMembersEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureDistributionListExpandMembersEnabled, true);
    }

    /**
     * whether expanding distribution list members feature is enabled
     *
     * @param zmailFeatureDistributionListExpandMembersEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1134)
    public void setFeatureDistributionListExpandMembersEnabled(boolean zmailFeatureDistributionListExpandMembersEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureDistributionListExpandMembersEnabled, zmailFeatureDistributionListExpandMembersEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether expanding distribution list members feature is enabled
     *
     * @param zmailFeatureDistributionListExpandMembersEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1134)
    public Map<String,Object> setFeatureDistributionListExpandMembersEnabled(boolean zmailFeatureDistributionListExpandMembersEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureDistributionListExpandMembersEnabled, zmailFeatureDistributionListExpandMembersEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether expanding distribution list members feature is enabled
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1134)
    public void unsetFeatureDistributionListExpandMembersEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureDistributionListExpandMembersEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether expanding distribution list members feature is enabled
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1134)
    public Map<String,Object> unsetFeatureDistributionListExpandMembersEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureDistributionListExpandMembersEnabled, "");
        return attrs;
    }

    /**
     * Whether to display the distribution list folder in address book
     *
     * @return zmailFeatureDistributionListFolderEnabled, or true if unset
     *
     * @since ZCS 8.0.4
     */
    @ZAttr(id=1438)
    public boolean isFeatureDistributionListFolderEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureDistributionListFolderEnabled, true);
    }

    /**
     * Whether to display the distribution list folder in address book
     *
     * @param zmailFeatureDistributionListFolderEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.4
     */
    @ZAttr(id=1438)
    public void setFeatureDistributionListFolderEnabled(boolean zmailFeatureDistributionListFolderEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureDistributionListFolderEnabled, zmailFeatureDistributionListFolderEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Whether to display the distribution list folder in address book
     *
     * @param zmailFeatureDistributionListFolderEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.4
     */
    @ZAttr(id=1438)
    public Map<String,Object> setFeatureDistributionListFolderEnabled(boolean zmailFeatureDistributionListFolderEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureDistributionListFolderEnabled, zmailFeatureDistributionListFolderEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * Whether to display the distribution list folder in address book
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.4
     */
    @ZAttr(id=1438)
    public void unsetFeatureDistributionListFolderEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureDistributionListFolderEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Whether to display the distribution list folder in address book
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.4
     */
    @ZAttr(id=1438)
    public Map<String,Object> unsetFeatureDistributionListFolderEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureDistributionListFolderEnabled, "");
        return attrs;
    }

    /**
     * whether export folder feature is enabled
     *
     * @return zmailFeatureExportFolderEnabled, or true if unset
     *
     * @since ZCS 7.1.0
     */
    @ZAttr(id=1185)
    public boolean isFeatureExportFolderEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureExportFolderEnabled, true);
    }

    /**
     * whether export folder feature is enabled
     *
     * @param zmailFeatureExportFolderEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.1.0
     */
    @ZAttr(id=1185)
    public void setFeatureExportFolderEnabled(boolean zmailFeatureExportFolderEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureExportFolderEnabled, zmailFeatureExportFolderEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether export folder feature is enabled
     *
     * @param zmailFeatureExportFolderEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.1.0
     */
    @ZAttr(id=1185)
    public Map<String,Object> setFeatureExportFolderEnabled(boolean zmailFeatureExportFolderEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureExportFolderEnabled, zmailFeatureExportFolderEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether export folder feature is enabled
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.1.0
     */
    @ZAttr(id=1185)
    public void unsetFeatureExportFolderEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureExportFolderEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether export folder feature is enabled
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.1.0
     */
    @ZAttr(id=1185)
    public Map<String,Object> unsetFeatureExportFolderEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureExportFolderEnabled, "");
        return attrs;
    }

    /**
     * whether external feedback feature is enabled
     *
     * @return zmailFeatureExternalFeedbackEnabled, or false if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1373)
    public boolean isFeatureExternalFeedbackEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureExternalFeedbackEnabled, false);
    }

    /**
     * whether external feedback feature is enabled
     *
     * @param zmailFeatureExternalFeedbackEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1373)
    public void setFeatureExternalFeedbackEnabled(boolean zmailFeatureExternalFeedbackEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureExternalFeedbackEnabled, zmailFeatureExternalFeedbackEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether external feedback feature is enabled
     *
     * @param zmailFeatureExternalFeedbackEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1373)
    public Map<String,Object> setFeatureExternalFeedbackEnabled(boolean zmailFeatureExternalFeedbackEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureExternalFeedbackEnabled, zmailFeatureExternalFeedbackEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether external feedback feature is enabled
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1373)
    public void unsetFeatureExternalFeedbackEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureExternalFeedbackEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether external feedback feature is enabled
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1373)
    public Map<String,Object> unsetFeatureExternalFeedbackEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureExternalFeedbackEnabled, "");
        return attrs;
    }

    /**
     * filter prefs enabled
     *
     * @return zmailFeatureFiltersEnabled, or true if unset
     */
    @ZAttr(id=143)
    public boolean isFeatureFiltersEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureFiltersEnabled, true);
    }

    /**
     * filter prefs enabled
     *
     * @param zmailFeatureFiltersEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=143)
    public void setFeatureFiltersEnabled(boolean zmailFeatureFiltersEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureFiltersEnabled, zmailFeatureFiltersEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * filter prefs enabled
     *
     * @param zmailFeatureFiltersEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=143)
    public Map<String,Object> setFeatureFiltersEnabled(boolean zmailFeatureFiltersEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureFiltersEnabled, zmailFeatureFiltersEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * filter prefs enabled
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=143)
    public void unsetFeatureFiltersEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureFiltersEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * filter prefs enabled
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=143)
    public Map<String,Object> unsetFeatureFiltersEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureFiltersEnabled, "");
        return attrs;
    }

    /**
     * whether to allow use of flagging feature
     *
     * @return zmailFeatureFlaggingEnabled, or true if unset
     */
    @ZAttr(id=499)
    public boolean isFeatureFlaggingEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureFlaggingEnabled, true);
    }

    /**
     * whether to allow use of flagging feature
     *
     * @param zmailFeatureFlaggingEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=499)
    public void setFeatureFlaggingEnabled(boolean zmailFeatureFlaggingEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureFlaggingEnabled, zmailFeatureFlaggingEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to allow use of flagging feature
     *
     * @param zmailFeatureFlaggingEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=499)
    public Map<String,Object> setFeatureFlaggingEnabled(boolean zmailFeatureFlaggingEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureFlaggingEnabled, zmailFeatureFlaggingEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether to allow use of flagging feature
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=499)
    public void unsetFeatureFlaggingEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureFlaggingEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to allow use of flagging feature
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=499)
    public Map<String,Object> unsetFeatureFlaggingEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureFlaggingEnabled, "");
        return attrs;
    }

    /**
     * whether free busy view is enabled in the web UI
     *
     * @return zmailFeatureFreeBusyViewEnabled, or false if unset
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1143)
    public boolean isFeatureFreeBusyViewEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureFreeBusyViewEnabled, false);
    }

    /**
     * whether free busy view is enabled in the web UI
     *
     * @param zmailFeatureFreeBusyViewEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1143)
    public void setFeatureFreeBusyViewEnabled(boolean zmailFeatureFreeBusyViewEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureFreeBusyViewEnabled, zmailFeatureFreeBusyViewEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether free busy view is enabled in the web UI
     *
     * @param zmailFeatureFreeBusyViewEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1143)
    public Map<String,Object> setFeatureFreeBusyViewEnabled(boolean zmailFeatureFreeBusyViewEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureFreeBusyViewEnabled, zmailFeatureFreeBusyViewEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether free busy view is enabled in the web UI
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1143)
    public void unsetFeatureFreeBusyViewEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureFreeBusyViewEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether free busy view is enabled in the web UI
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1143)
    public Map<String,Object> unsetFeatureFreeBusyViewEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureFreeBusyViewEnabled, "");
        return attrs;
    }

    /**
     * enable auto-completion from the GAL, zmailFeatureGalEnabled also has
     * to be enabled for the auto-completion feature
     *
     * @return zmailFeatureGalAutoCompleteEnabled, or true if unset
     */
    @ZAttr(id=359)
    public boolean isFeatureGalAutoCompleteEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureGalAutoCompleteEnabled, true);
    }

    /**
     * enable auto-completion from the GAL, zmailFeatureGalEnabled also has
     * to be enabled for the auto-completion feature
     *
     * @param zmailFeatureGalAutoCompleteEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=359)
    public void setFeatureGalAutoCompleteEnabled(boolean zmailFeatureGalAutoCompleteEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureGalAutoCompleteEnabled, zmailFeatureGalAutoCompleteEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * enable auto-completion from the GAL, zmailFeatureGalEnabled also has
     * to be enabled for the auto-completion feature
     *
     * @param zmailFeatureGalAutoCompleteEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=359)
    public Map<String,Object> setFeatureGalAutoCompleteEnabled(boolean zmailFeatureGalAutoCompleteEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureGalAutoCompleteEnabled, zmailFeatureGalAutoCompleteEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * enable auto-completion from the GAL, zmailFeatureGalEnabled also has
     * to be enabled for the auto-completion feature
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=359)
    public void unsetFeatureGalAutoCompleteEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureGalAutoCompleteEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * enable auto-completion from the GAL, zmailFeatureGalEnabled also has
     * to be enabled for the auto-completion feature
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=359)
    public Map<String,Object> unsetFeatureGalAutoCompleteEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureGalAutoCompleteEnabled, "");
        return attrs;
    }

    /**
     * whether GAL features are enabled
     *
     * @return zmailFeatureGalEnabled, or true if unset
     */
    @ZAttr(id=149)
    public boolean isFeatureGalEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureGalEnabled, true);
    }

    /**
     * whether GAL features are enabled
     *
     * @param zmailFeatureGalEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=149)
    public void setFeatureGalEnabled(boolean zmailFeatureGalEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureGalEnabled, zmailFeatureGalEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether GAL features are enabled
     *
     * @param zmailFeatureGalEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=149)
    public Map<String,Object> setFeatureGalEnabled(boolean zmailFeatureGalEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureGalEnabled, zmailFeatureGalEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether GAL features are enabled
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=149)
    public void unsetFeatureGalEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureGalEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether GAL features are enabled
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=149)
    public Map<String,Object> unsetFeatureGalEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureGalEnabled, "");
        return attrs;
    }

    /**
     * whether GAL sync feature is enabled
     *
     * @return zmailFeatureGalSyncEnabled, or true if unset
     *
     * @since ZCS 5.0.10
     */
    @ZAttr(id=711)
    public boolean isFeatureGalSyncEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureGalSyncEnabled, true);
    }

    /**
     * whether GAL sync feature is enabled
     *
     * @param zmailFeatureGalSyncEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.10
     */
    @ZAttr(id=711)
    public void setFeatureGalSyncEnabled(boolean zmailFeatureGalSyncEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureGalSyncEnabled, zmailFeatureGalSyncEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether GAL sync feature is enabled
     *
     * @param zmailFeatureGalSyncEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.10
     */
    @ZAttr(id=711)
    public Map<String,Object> setFeatureGalSyncEnabled(boolean zmailFeatureGalSyncEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureGalSyncEnabled, zmailFeatureGalSyncEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether GAL sync feature is enabled
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.10
     */
    @ZAttr(id=711)
    public void unsetFeatureGalSyncEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureGalSyncEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether GAL sync feature is enabled
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.10
     */
    @ZAttr(id=711)
    public Map<String,Object> unsetFeatureGalSyncEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureGalSyncEnabled, "");
        return attrs;
    }

    /**
     * group calendar features. if set to FALSE, calendar works as a personal
     * calendar and attendees and scheduling etc are turned off in web UI
     *
     * @return zmailFeatureGroupCalendarEnabled, or true if unset
     */
    @ZAttr(id=481)
    public boolean isFeatureGroupCalendarEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureGroupCalendarEnabled, true);
    }

    /**
     * group calendar features. if set to FALSE, calendar works as a personal
     * calendar and attendees and scheduling etc are turned off in web UI
     *
     * @param zmailFeatureGroupCalendarEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=481)
    public void setFeatureGroupCalendarEnabled(boolean zmailFeatureGroupCalendarEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureGroupCalendarEnabled, zmailFeatureGroupCalendarEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * group calendar features. if set to FALSE, calendar works as a personal
     * calendar and attendees and scheduling etc are turned off in web UI
     *
     * @param zmailFeatureGroupCalendarEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=481)
    public Map<String,Object> setFeatureGroupCalendarEnabled(boolean zmailFeatureGroupCalendarEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureGroupCalendarEnabled, zmailFeatureGroupCalendarEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * group calendar features. if set to FALSE, calendar works as a personal
     * calendar and attendees and scheduling etc are turned off in web UI
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=481)
    public void unsetFeatureGroupCalendarEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureGroupCalendarEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * group calendar features. if set to FALSE, calendar works as a personal
     * calendar and attendees and scheduling etc are turned off in web UI
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=481)
    public Map<String,Object> unsetFeatureGroupCalendarEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureGroupCalendarEnabled, "");
        return attrs;
    }

    /**
     * enabled html composing
     *
     * @return zmailFeatureHtmlComposeEnabled, or true if unset
     */
    @ZAttr(id=219)
    public boolean isFeatureHtmlComposeEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureHtmlComposeEnabled, true);
    }

    /**
     * enabled html composing
     *
     * @param zmailFeatureHtmlComposeEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=219)
    public void setFeatureHtmlComposeEnabled(boolean zmailFeatureHtmlComposeEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureHtmlComposeEnabled, zmailFeatureHtmlComposeEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * enabled html composing
     *
     * @param zmailFeatureHtmlComposeEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=219)
    public Map<String,Object> setFeatureHtmlComposeEnabled(boolean zmailFeatureHtmlComposeEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureHtmlComposeEnabled, zmailFeatureHtmlComposeEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * enabled html composing
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=219)
    public void unsetFeatureHtmlComposeEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureHtmlComposeEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * enabled html composing
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=219)
    public Map<String,Object> unsetFeatureHtmlComposeEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureHtmlComposeEnabled, "");
        return attrs;
    }

    /**
     * IM features
     *
     * @return zmailFeatureIMEnabled, or false if unset
     */
    @ZAttr(id=305)
    public boolean isFeatureIMEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureIMEnabled, false);
    }

    /**
     * IM features
     *
     * @param zmailFeatureIMEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=305)
    public void setFeatureIMEnabled(boolean zmailFeatureIMEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureIMEnabled, zmailFeatureIMEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * IM features
     *
     * @param zmailFeatureIMEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=305)
    public Map<String,Object> setFeatureIMEnabled(boolean zmailFeatureIMEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureIMEnabled, zmailFeatureIMEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * IM features
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=305)
    public void unsetFeatureIMEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureIMEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * IM features
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=305)
    public Map<String,Object> unsetFeatureIMEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureIMEnabled, "");
        return attrs;
    }

    /**
     * whether to allow use of identities feature
     *
     * @return zmailFeatureIdentitiesEnabled, or true if unset
     */
    @ZAttr(id=415)
    public boolean isFeatureIdentitiesEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureIdentitiesEnabled, true);
    }

    /**
     * whether to allow use of identities feature
     *
     * @param zmailFeatureIdentitiesEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=415)
    public void setFeatureIdentitiesEnabled(boolean zmailFeatureIdentitiesEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureIdentitiesEnabled, zmailFeatureIdentitiesEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to allow use of identities feature
     *
     * @param zmailFeatureIdentitiesEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=415)
    public Map<String,Object> setFeatureIdentitiesEnabled(boolean zmailFeatureIdentitiesEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureIdentitiesEnabled, zmailFeatureIdentitiesEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether to allow use of identities feature
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=415)
    public void unsetFeatureIdentitiesEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureIdentitiesEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to allow use of identities feature
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=415)
    public Map<String,Object> unsetFeatureIdentitiesEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureIdentitiesEnabled, "");
        return attrs;
    }

    /**
     * whether user is allowed to retrieve mail from an external IMAP data
     * source
     *
     * @return zmailFeatureImapDataSourceEnabled, or true if unset
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=568)
    public boolean isFeatureImapDataSourceEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureImapDataSourceEnabled, true);
    }

    /**
     * whether user is allowed to retrieve mail from an external IMAP data
     * source
     *
     * @param zmailFeatureImapDataSourceEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=568)
    public void setFeatureImapDataSourceEnabled(boolean zmailFeatureImapDataSourceEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureImapDataSourceEnabled, zmailFeatureImapDataSourceEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether user is allowed to retrieve mail from an external IMAP data
     * source
     *
     * @param zmailFeatureImapDataSourceEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=568)
    public Map<String,Object> setFeatureImapDataSourceEnabled(boolean zmailFeatureImapDataSourceEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureImapDataSourceEnabled, zmailFeatureImapDataSourceEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether user is allowed to retrieve mail from an external IMAP data
     * source
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=568)
    public void unsetFeatureImapDataSourceEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureImapDataSourceEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether user is allowed to retrieve mail from an external IMAP data
     * source
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=568)
    public Map<String,Object> unsetFeatureImapDataSourceEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureImapDataSourceEnabled, "");
        return attrs;
    }

    /**
     * Deprecated since: 7.1.0. deprecated in favor of
     * zmailFeatureImportFolderEnabled and zmailFeatureExportFolderEnabled
     * for bug 53745. Orig desc: whether import export folder feature is
     * enabled
     *
     * @return zmailFeatureImportExportFolderEnabled, or true if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=750)
    public boolean isFeatureImportExportFolderEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureImportExportFolderEnabled, true);
    }

    /**
     * Deprecated since: 7.1.0. deprecated in favor of
     * zmailFeatureImportFolderEnabled and zmailFeatureExportFolderEnabled
     * for bug 53745. Orig desc: whether import export folder feature is
     * enabled
     *
     * @param zmailFeatureImportExportFolderEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=750)
    public void setFeatureImportExportFolderEnabled(boolean zmailFeatureImportExportFolderEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureImportExportFolderEnabled, zmailFeatureImportExportFolderEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Deprecated since: 7.1.0. deprecated in favor of
     * zmailFeatureImportFolderEnabled and zmailFeatureExportFolderEnabled
     * for bug 53745. Orig desc: whether import export folder feature is
     * enabled
     *
     * @param zmailFeatureImportExportFolderEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=750)
    public Map<String,Object> setFeatureImportExportFolderEnabled(boolean zmailFeatureImportExportFolderEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureImportExportFolderEnabled, zmailFeatureImportExportFolderEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * Deprecated since: 7.1.0. deprecated in favor of
     * zmailFeatureImportFolderEnabled and zmailFeatureExportFolderEnabled
     * for bug 53745. Orig desc: whether import export folder feature is
     * enabled
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=750)
    public void unsetFeatureImportExportFolderEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureImportExportFolderEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Deprecated since: 7.1.0. deprecated in favor of
     * zmailFeatureImportFolderEnabled and zmailFeatureExportFolderEnabled
     * for bug 53745. Orig desc: whether import export folder feature is
     * enabled
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=750)
    public Map<String,Object> unsetFeatureImportExportFolderEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureImportExportFolderEnabled, "");
        return attrs;
    }

    /**
     * whether import folder feature is enabled
     *
     * @return zmailFeatureImportFolderEnabled, or true if unset
     *
     * @since ZCS 7.1.0
     */
    @ZAttr(id=1184)
    public boolean isFeatureImportFolderEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureImportFolderEnabled, true);
    }

    /**
     * whether import folder feature is enabled
     *
     * @param zmailFeatureImportFolderEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.1.0
     */
    @ZAttr(id=1184)
    public void setFeatureImportFolderEnabled(boolean zmailFeatureImportFolderEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureImportFolderEnabled, zmailFeatureImportFolderEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether import folder feature is enabled
     *
     * @param zmailFeatureImportFolderEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.1.0
     */
    @ZAttr(id=1184)
    public Map<String,Object> setFeatureImportFolderEnabled(boolean zmailFeatureImportFolderEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureImportFolderEnabled, zmailFeatureImportFolderEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether import folder feature is enabled
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.1.0
     */
    @ZAttr(id=1184)
    public void unsetFeatureImportFolderEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureImportFolderEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether import folder feature is enabled
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.1.0
     */
    @ZAttr(id=1184)
    public Map<String,Object> unsetFeatureImportFolderEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureImportFolderEnabled, "");
        return attrs;
    }

    /**
     * preference to set initial search
     *
     * @return zmailFeatureInitialSearchPreferenceEnabled, or true if unset
     */
    @ZAttr(id=142)
    public boolean isFeatureInitialSearchPreferenceEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureInitialSearchPreferenceEnabled, true);
    }

    /**
     * preference to set initial search
     *
     * @param zmailFeatureInitialSearchPreferenceEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=142)
    public void setFeatureInitialSearchPreferenceEnabled(boolean zmailFeatureInitialSearchPreferenceEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureInitialSearchPreferenceEnabled, zmailFeatureInitialSearchPreferenceEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * preference to set initial search
     *
     * @param zmailFeatureInitialSearchPreferenceEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=142)
    public Map<String,Object> setFeatureInitialSearchPreferenceEnabled(boolean zmailFeatureInitialSearchPreferenceEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureInitialSearchPreferenceEnabled, zmailFeatureInitialSearchPreferenceEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * preference to set initial search
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=142)
    public void unsetFeatureInitialSearchPreferenceEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureInitialSearchPreferenceEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * preference to set initial search
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=142)
    public Map<String,Object> unsetFeatureInitialSearchPreferenceEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureInitialSearchPreferenceEnabled, "");
        return attrs;
    }

    /**
     * Enable instant notifications
     *
     * @return zmailFeatureInstantNotify, or true if unset
     */
    @ZAttr(id=521)
    public boolean isFeatureInstantNotify() {
        return getBooleanAttr(Provisioning.A_zmailFeatureInstantNotify, true);
    }

    /**
     * Enable instant notifications
     *
     * @param zmailFeatureInstantNotify new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=521)
    public void setFeatureInstantNotify(boolean zmailFeatureInstantNotify) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureInstantNotify, zmailFeatureInstantNotify ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Enable instant notifications
     *
     * @param zmailFeatureInstantNotify new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=521)
    public Map<String,Object> setFeatureInstantNotify(boolean zmailFeatureInstantNotify, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureInstantNotify, zmailFeatureInstantNotify ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * Enable instant notifications
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=521)
    public void unsetFeatureInstantNotify() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureInstantNotify, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Enable instant notifications
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=521)
    public Map<String,Object> unsetFeatureInstantNotify(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureInstantNotify, "");
        return attrs;
    }

    /**
     * enable/disable MAPI (Microsoft Outlook) Connector
     *
     * @return zmailFeatureMAPIConnectorEnabled, or true if unset
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1127)
    public boolean isFeatureMAPIConnectorEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureMAPIConnectorEnabled, true);
    }

    /**
     * enable/disable MAPI (Microsoft Outlook) Connector
     *
     * @param zmailFeatureMAPIConnectorEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1127)
    public void setFeatureMAPIConnectorEnabled(boolean zmailFeatureMAPIConnectorEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureMAPIConnectorEnabled, zmailFeatureMAPIConnectorEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * enable/disable MAPI (Microsoft Outlook) Connector
     *
     * @param zmailFeatureMAPIConnectorEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1127)
    public Map<String,Object> setFeatureMAPIConnectorEnabled(boolean zmailFeatureMAPIConnectorEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureMAPIConnectorEnabled, zmailFeatureMAPIConnectorEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * enable/disable MAPI (Microsoft Outlook) Connector
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1127)
    public void unsetFeatureMAPIConnectorEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureMAPIConnectorEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * enable/disable MAPI (Microsoft Outlook) Connector
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1127)
    public Map<String,Object> unsetFeatureMAPIConnectorEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureMAPIConnectorEnabled, "");
        return attrs;
    }

    /**
     * email features enabled
     *
     * @return zmailFeatureMailEnabled, or true if unset
     */
    @ZAttr(id=489)
    public boolean isFeatureMailEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureMailEnabled, true);
    }

    /**
     * email features enabled
     *
     * @param zmailFeatureMailEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=489)
    public void setFeatureMailEnabled(boolean zmailFeatureMailEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureMailEnabled, zmailFeatureMailEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * email features enabled
     *
     * @param zmailFeatureMailEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=489)
    public Map<String,Object> setFeatureMailEnabled(boolean zmailFeatureMailEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureMailEnabled, zmailFeatureMailEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * email features enabled
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=489)
    public void unsetFeatureMailEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureMailEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * email features enabled
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=489)
    public Map<String,Object> unsetFeatureMailEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureMailEnabled, "");
        return attrs;
    }

    /**
     * enable end-user mail forwarding features
     *
     * @return zmailFeatureMailForwardingEnabled, or true if unset
     */
    @ZAttr(id=342)
    public boolean isFeatureMailForwardingEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureMailForwardingEnabled, true);
    }

    /**
     * enable end-user mail forwarding features
     *
     * @param zmailFeatureMailForwardingEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=342)
    public void setFeatureMailForwardingEnabled(boolean zmailFeatureMailForwardingEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureMailForwardingEnabled, zmailFeatureMailForwardingEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * enable end-user mail forwarding features
     *
     * @param zmailFeatureMailForwardingEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=342)
    public Map<String,Object> setFeatureMailForwardingEnabled(boolean zmailFeatureMailForwardingEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureMailForwardingEnabled, zmailFeatureMailForwardingEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * enable end-user mail forwarding features
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=342)
    public void unsetFeatureMailForwardingEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureMailForwardingEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * enable end-user mail forwarding features
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=342)
    public Map<String,Object> unsetFeatureMailForwardingEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureMailForwardingEnabled, "");
        return attrs;
    }

    /**
     * enable end-user mail forwarding defined in mail filters features
     *
     * @return zmailFeatureMailForwardingInFiltersEnabled, or true if unset
     *
     * @since ZCS 5.0.10
     */
    @ZAttr(id=704)
    public boolean isFeatureMailForwardingInFiltersEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureMailForwardingInFiltersEnabled, true);
    }

    /**
     * enable end-user mail forwarding defined in mail filters features
     *
     * @param zmailFeatureMailForwardingInFiltersEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.10
     */
    @ZAttr(id=704)
    public void setFeatureMailForwardingInFiltersEnabled(boolean zmailFeatureMailForwardingInFiltersEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureMailForwardingInFiltersEnabled, zmailFeatureMailForwardingInFiltersEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * enable end-user mail forwarding defined in mail filters features
     *
     * @param zmailFeatureMailForwardingInFiltersEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.10
     */
    @ZAttr(id=704)
    public Map<String,Object> setFeatureMailForwardingInFiltersEnabled(boolean zmailFeatureMailForwardingInFiltersEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureMailForwardingInFiltersEnabled, zmailFeatureMailForwardingInFiltersEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * enable end-user mail forwarding defined in mail filters features
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.10
     */
    @ZAttr(id=704)
    public void unsetFeatureMailForwardingInFiltersEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureMailForwardingInFiltersEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * enable end-user mail forwarding defined in mail filters features
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.10
     */
    @ZAttr(id=704)
    public Map<String,Object> unsetFeatureMailForwardingInFiltersEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureMailForwardingInFiltersEnabled, "");
        return attrs;
    }

    /**
     * Deprecated since: 5.0. done via skin template overrides. Orig desc:
     * whether user is allowed to set mail polling interval
     *
     * @return zmailFeatureMailPollingIntervalPreferenceEnabled, or true if unset
     */
    @ZAttr(id=441)
    public boolean isFeatureMailPollingIntervalPreferenceEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureMailPollingIntervalPreferenceEnabled, true);
    }

    /**
     * Deprecated since: 5.0. done via skin template overrides. Orig desc:
     * whether user is allowed to set mail polling interval
     *
     * @param zmailFeatureMailPollingIntervalPreferenceEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=441)
    public void setFeatureMailPollingIntervalPreferenceEnabled(boolean zmailFeatureMailPollingIntervalPreferenceEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureMailPollingIntervalPreferenceEnabled, zmailFeatureMailPollingIntervalPreferenceEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Deprecated since: 5.0. done via skin template overrides. Orig desc:
     * whether user is allowed to set mail polling interval
     *
     * @param zmailFeatureMailPollingIntervalPreferenceEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=441)
    public Map<String,Object> setFeatureMailPollingIntervalPreferenceEnabled(boolean zmailFeatureMailPollingIntervalPreferenceEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureMailPollingIntervalPreferenceEnabled, zmailFeatureMailPollingIntervalPreferenceEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * Deprecated since: 5.0. done via skin template overrides. Orig desc:
     * whether user is allowed to set mail polling interval
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=441)
    public void unsetFeatureMailPollingIntervalPreferenceEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureMailPollingIntervalPreferenceEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Deprecated since: 5.0. done via skin template overrides. Orig desc:
     * whether user is allowed to set mail polling interval
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=441)
    public Map<String,Object> unsetFeatureMailPollingIntervalPreferenceEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureMailPollingIntervalPreferenceEnabled, "");
        return attrs;
    }

    /**
     * mail priority feature
     *
     * @return zmailFeatureMailPriorityEnabled, or true if unset
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=566)
    public boolean isFeatureMailPriorityEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureMailPriorityEnabled, true);
    }

    /**
     * mail priority feature
     *
     * @param zmailFeatureMailPriorityEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=566)
    public void setFeatureMailPriorityEnabled(boolean zmailFeatureMailPriorityEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureMailPriorityEnabled, zmailFeatureMailPriorityEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * mail priority feature
     *
     * @param zmailFeatureMailPriorityEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=566)
    public Map<String,Object> setFeatureMailPriorityEnabled(boolean zmailFeatureMailPriorityEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureMailPriorityEnabled, zmailFeatureMailPriorityEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * mail priority feature
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=566)
    public void unsetFeatureMailPriorityEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureMailPriorityEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * mail priority feature
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=566)
    public Map<String,Object> unsetFeatureMailPriorityEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureMailPriorityEnabled, "");
        return attrs;
    }

    /**
     * whether the send later feature is enabled
     *
     * @return zmailFeatureMailSendLaterEnabled, or false if unset
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1137)
    public boolean isFeatureMailSendLaterEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureMailSendLaterEnabled, false);
    }

    /**
     * whether the send later feature is enabled
     *
     * @param zmailFeatureMailSendLaterEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1137)
    public void setFeatureMailSendLaterEnabled(boolean zmailFeatureMailSendLaterEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureMailSendLaterEnabled, zmailFeatureMailSendLaterEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether the send later feature is enabled
     *
     * @param zmailFeatureMailSendLaterEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1137)
    public Map<String,Object> setFeatureMailSendLaterEnabled(boolean zmailFeatureMailSendLaterEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureMailSendLaterEnabled, zmailFeatureMailSendLaterEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether the send later feature is enabled
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1137)
    public void unsetFeatureMailSendLaterEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureMailSendLaterEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether the send later feature is enabled
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1137)
    public Map<String,Object> unsetFeatureMailSendLaterEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureMailSendLaterEnabled, "");
        return attrs;
    }

    /**
     * email upsell enabled
     *
     * @return zmailFeatureMailUpsellEnabled, or false if unset
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=527)
    public boolean isFeatureMailUpsellEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureMailUpsellEnabled, false);
    }

    /**
     * email upsell enabled
     *
     * @param zmailFeatureMailUpsellEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=527)
    public void setFeatureMailUpsellEnabled(boolean zmailFeatureMailUpsellEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureMailUpsellEnabled, zmailFeatureMailUpsellEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * email upsell enabled
     *
     * @param zmailFeatureMailUpsellEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=527)
    public Map<String,Object> setFeatureMailUpsellEnabled(boolean zmailFeatureMailUpsellEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureMailUpsellEnabled, zmailFeatureMailUpsellEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * email upsell enabled
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=527)
    public void unsetFeatureMailUpsellEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureMailUpsellEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * email upsell enabled
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=527)
    public Map<String,Object> unsetFeatureMailUpsellEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureMailUpsellEnabled, "");
        return attrs;
    }

    /**
     * email upsell URL
     *
     * @return zmailFeatureMailUpsellURL, or null if unset
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=528)
    public String getFeatureMailUpsellURL() {
        return getAttr(Provisioning.A_zmailFeatureMailUpsellURL, null);
    }

    /**
     * email upsell URL
     *
     * @param zmailFeatureMailUpsellURL new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=528)
    public void setFeatureMailUpsellURL(String zmailFeatureMailUpsellURL) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureMailUpsellURL, zmailFeatureMailUpsellURL);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * email upsell URL
     *
     * @param zmailFeatureMailUpsellURL new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=528)
    public Map<String,Object> setFeatureMailUpsellURL(String zmailFeatureMailUpsellURL, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureMailUpsellURL, zmailFeatureMailUpsellURL);
        return attrs;
    }

    /**
     * email upsell URL
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=528)
    public void unsetFeatureMailUpsellURL() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureMailUpsellURL, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * email upsell URL
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=528)
    public Map<String,Object> unsetFeatureMailUpsellURL(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureMailUpsellURL, "");
        return attrs;
    }

    /**
     * whether to allow end user to publish and remove S/MIME certificates to
     * their GAL entry in the web UI
     *
     * @return zmailFeatureManageSMIMECertificateEnabled, or false if unset
     *
     * @since ZCS 7.1.0
     */
    @ZAttr(id=1183)
    public boolean isFeatureManageSMIMECertificateEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureManageSMIMECertificateEnabled, false);
    }

    /**
     * whether to allow end user to publish and remove S/MIME certificates to
     * their GAL entry in the web UI
     *
     * @param zmailFeatureManageSMIMECertificateEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.1.0
     */
    @ZAttr(id=1183)
    public void setFeatureManageSMIMECertificateEnabled(boolean zmailFeatureManageSMIMECertificateEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureManageSMIMECertificateEnabled, zmailFeatureManageSMIMECertificateEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to allow end user to publish and remove S/MIME certificates to
     * their GAL entry in the web UI
     *
     * @param zmailFeatureManageSMIMECertificateEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.1.0
     */
    @ZAttr(id=1183)
    public Map<String,Object> setFeatureManageSMIMECertificateEnabled(boolean zmailFeatureManageSMIMECertificateEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureManageSMIMECertificateEnabled, zmailFeatureManageSMIMECertificateEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether to allow end user to publish and remove S/MIME certificates to
     * their GAL entry in the web UI
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.1.0
     */
    @ZAttr(id=1183)
    public void unsetFeatureManageSMIMECertificateEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureManageSMIMECertificateEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to allow end user to publish and remove S/MIME certificates to
     * their GAL entry in the web UI
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.1.0
     */
    @ZAttr(id=1183)
    public Map<String,Object> unsetFeatureManageSMIMECertificateEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureManageSMIMECertificateEnabled, "");
        return attrs;
    }

    /**
     * enable end-user to manage zimlets
     *
     * @return zmailFeatureManageZimlets, or true if unset
     *
     * @since ZCS 6.0.2
     */
    @ZAttr(id=1051)
    public boolean isFeatureManageZimlets() {
        return getBooleanAttr(Provisioning.A_zmailFeatureManageZimlets, true);
    }

    /**
     * enable end-user to manage zimlets
     *
     * @param zmailFeatureManageZimlets new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.2
     */
    @ZAttr(id=1051)
    public void setFeatureManageZimlets(boolean zmailFeatureManageZimlets) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureManageZimlets, zmailFeatureManageZimlets ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * enable end-user to manage zimlets
     *
     * @param zmailFeatureManageZimlets new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.2
     */
    @ZAttr(id=1051)
    public Map<String,Object> setFeatureManageZimlets(boolean zmailFeatureManageZimlets, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureManageZimlets, zmailFeatureManageZimlets ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * enable end-user to manage zimlets
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.2
     */
    @ZAttr(id=1051)
    public void unsetFeatureManageZimlets() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureManageZimlets, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * enable end-user to manage zimlets
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.2
     */
    @ZAttr(id=1051)
    public Map<String,Object> unsetFeatureManageZimlets(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureManageZimlets, "");
        return attrs;
    }

    /**
     * whether to enforce mobile policy
     *
     * @return zmailFeatureMobilePolicyEnabled, or true if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=833)
    public boolean isFeatureMobilePolicyEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureMobilePolicyEnabled, true);
    }

    /**
     * whether to enforce mobile policy
     *
     * @param zmailFeatureMobilePolicyEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=833)
    public void setFeatureMobilePolicyEnabled(boolean zmailFeatureMobilePolicyEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureMobilePolicyEnabled, zmailFeatureMobilePolicyEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to enforce mobile policy
     *
     * @param zmailFeatureMobilePolicyEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=833)
    public Map<String,Object> setFeatureMobilePolicyEnabled(boolean zmailFeatureMobilePolicyEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureMobilePolicyEnabled, zmailFeatureMobilePolicyEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether to enforce mobile policy
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=833)
    public void unsetFeatureMobilePolicyEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureMobilePolicyEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to enforce mobile policy
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=833)
    public Map<String,Object> unsetFeatureMobilePolicyEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureMobilePolicyEnabled, "");
        return attrs;
    }

    /**
     * whether to permit mobile sync
     *
     * @return zmailFeatureMobileSyncEnabled, or false if unset
     */
    @ZAttr(id=347)
    public boolean isFeatureMobileSyncEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureMobileSyncEnabled, false);
    }

    /**
     * whether to permit mobile sync
     *
     * @param zmailFeatureMobileSyncEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=347)
    public void setFeatureMobileSyncEnabled(boolean zmailFeatureMobileSyncEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureMobileSyncEnabled, zmailFeatureMobileSyncEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to permit mobile sync
     *
     * @param zmailFeatureMobileSyncEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=347)
    public Map<String,Object> setFeatureMobileSyncEnabled(boolean zmailFeatureMobileSyncEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureMobileSyncEnabled, zmailFeatureMobileSyncEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether to permit mobile sync
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=347)
    public void unsetFeatureMobileSyncEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureMobileSyncEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to permit mobile sync
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=347)
    public Map<String,Object> unsetFeatureMobileSyncEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureMobileSyncEnabled, "");
        return attrs;
    }

    /**
     * Whether user can create address books
     *
     * @return zmailFeatureNewAddrBookEnabled, or true if unset
     *
     * @since ZCS 5.0.4
     */
    @ZAttr(id=631)
    public boolean isFeatureNewAddrBookEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureNewAddrBookEnabled, true);
    }

    /**
     * Whether user can create address books
     *
     * @param zmailFeatureNewAddrBookEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.4
     */
    @ZAttr(id=631)
    public void setFeatureNewAddrBookEnabled(boolean zmailFeatureNewAddrBookEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureNewAddrBookEnabled, zmailFeatureNewAddrBookEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Whether user can create address books
     *
     * @param zmailFeatureNewAddrBookEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.4
     */
    @ZAttr(id=631)
    public Map<String,Object> setFeatureNewAddrBookEnabled(boolean zmailFeatureNewAddrBookEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureNewAddrBookEnabled, zmailFeatureNewAddrBookEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * Whether user can create address books
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.4
     */
    @ZAttr(id=631)
    public void unsetFeatureNewAddrBookEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureNewAddrBookEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Whether user can create address books
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.4
     */
    @ZAttr(id=631)
    public Map<String,Object> unsetFeatureNewAddrBookEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureNewAddrBookEnabled, "");
        return attrs;
    }

    /**
     * Whether new mail notification feature should be allowed for this
     * account or in this cos
     *
     * @return zmailFeatureNewMailNotificationEnabled, or true if unset
     */
    @ZAttr(id=367)
    public boolean isFeatureNewMailNotificationEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureNewMailNotificationEnabled, true);
    }

    /**
     * Whether new mail notification feature should be allowed for this
     * account or in this cos
     *
     * @param zmailFeatureNewMailNotificationEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=367)
    public void setFeatureNewMailNotificationEnabled(boolean zmailFeatureNewMailNotificationEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureNewMailNotificationEnabled, zmailFeatureNewMailNotificationEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Whether new mail notification feature should be allowed for this
     * account or in this cos
     *
     * @param zmailFeatureNewMailNotificationEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=367)
    public Map<String,Object> setFeatureNewMailNotificationEnabled(boolean zmailFeatureNewMailNotificationEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureNewMailNotificationEnabled, zmailFeatureNewMailNotificationEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * Whether new mail notification feature should be allowed for this
     * account or in this cos
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=367)
    public void unsetFeatureNewMailNotificationEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureNewMailNotificationEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Whether new mail notification feature should be allowed for this
     * account or in this cos
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=367)
    public Map<String,Object> unsetFeatureNewMailNotificationEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureNewMailNotificationEnabled, "");
        return attrs;
    }

    /**
     * Deprecated since: 7.0.0. Deprecated per bugs 50465, 56201. Orig desc:
     * Whether notebook feature should be allowed for this account or in this
     * cos
     *
     * @return zmailFeatureNotebookEnabled, or false if unset
     */
    @ZAttr(id=356)
    public boolean isFeatureNotebookEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureNotebookEnabled, false);
    }

    /**
     * Deprecated since: 7.0.0. Deprecated per bugs 50465, 56201. Orig desc:
     * Whether notebook feature should be allowed for this account or in this
     * cos
     *
     * @param zmailFeatureNotebookEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=356)
    public void setFeatureNotebookEnabled(boolean zmailFeatureNotebookEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureNotebookEnabled, zmailFeatureNotebookEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Deprecated since: 7.0.0. Deprecated per bugs 50465, 56201. Orig desc:
     * Whether notebook feature should be allowed for this account or in this
     * cos
     *
     * @param zmailFeatureNotebookEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=356)
    public Map<String,Object> setFeatureNotebookEnabled(boolean zmailFeatureNotebookEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureNotebookEnabled, zmailFeatureNotebookEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * Deprecated since: 7.0.0. Deprecated per bugs 50465, 56201. Orig desc:
     * Whether notebook feature should be allowed for this account or in this
     * cos
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=356)
    public void unsetFeatureNotebookEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureNotebookEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Deprecated since: 7.0.0. Deprecated per bugs 50465, 56201. Orig desc:
     * Whether notebook feature should be allowed for this account or in this
     * cos
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=356)
    public Map<String,Object> unsetFeatureNotebookEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureNotebookEnabled, "");
        return attrs;
    }

    /**
     * whether or not open a new msg/conv in a new windows is allowed
     *
     * @return zmailFeatureOpenMailInNewWindowEnabled, or true if unset
     *
     * @since ZCS 5.0.1
     */
    @ZAttr(id=585)
    public boolean isFeatureOpenMailInNewWindowEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureOpenMailInNewWindowEnabled, true);
    }

    /**
     * whether or not open a new msg/conv in a new windows is allowed
     *
     * @param zmailFeatureOpenMailInNewWindowEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.1
     */
    @ZAttr(id=585)
    public void setFeatureOpenMailInNewWindowEnabled(boolean zmailFeatureOpenMailInNewWindowEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureOpenMailInNewWindowEnabled, zmailFeatureOpenMailInNewWindowEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether or not open a new msg/conv in a new windows is allowed
     *
     * @param zmailFeatureOpenMailInNewWindowEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.1
     */
    @ZAttr(id=585)
    public Map<String,Object> setFeatureOpenMailInNewWindowEnabled(boolean zmailFeatureOpenMailInNewWindowEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureOpenMailInNewWindowEnabled, zmailFeatureOpenMailInNewWindowEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether or not open a new msg/conv in a new windows is allowed
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.1
     */
    @ZAttr(id=585)
    public void unsetFeatureOpenMailInNewWindowEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureOpenMailInNewWindowEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether or not open a new msg/conv in a new windows is allowed
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.1
     */
    @ZAttr(id=585)
    public Map<String,Object> unsetFeatureOpenMailInNewWindowEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureOpenMailInNewWindowEnabled, "");
        return attrs;
    }

    /**
     * whether an account can modify its zmailPref* attributes
     *
     * @return zmailFeatureOptionsEnabled, or true if unset
     */
    @ZAttr(id=451)
    public boolean isFeatureOptionsEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureOptionsEnabled, true);
    }

    /**
     * whether an account can modify its zmailPref* attributes
     *
     * @param zmailFeatureOptionsEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=451)
    public void setFeatureOptionsEnabled(boolean zmailFeatureOptionsEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureOptionsEnabled, zmailFeatureOptionsEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether an account can modify its zmailPref* attributes
     *
     * @param zmailFeatureOptionsEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=451)
    public Map<String,Object> setFeatureOptionsEnabled(boolean zmailFeatureOptionsEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureOptionsEnabled, zmailFeatureOptionsEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether an account can modify its zmailPref* attributes
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=451)
    public void unsetFeatureOptionsEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureOptionsEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether an account can modify its zmailPref* attributes
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=451)
    public Map<String,Object> unsetFeatureOptionsEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureOptionsEnabled, "");
        return attrs;
    }

    /**
     * Whether out of office reply feature should be allowed for this account
     * or in this cos
     *
     * @return zmailFeatureOutOfOfficeReplyEnabled, or true if unset
     */
    @ZAttr(id=366)
    public boolean isFeatureOutOfOfficeReplyEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureOutOfOfficeReplyEnabled, true);
    }

    /**
     * Whether out of office reply feature should be allowed for this account
     * or in this cos
     *
     * @param zmailFeatureOutOfOfficeReplyEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=366)
    public void setFeatureOutOfOfficeReplyEnabled(boolean zmailFeatureOutOfOfficeReplyEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureOutOfOfficeReplyEnabled, zmailFeatureOutOfOfficeReplyEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Whether out of office reply feature should be allowed for this account
     * or in this cos
     *
     * @param zmailFeatureOutOfOfficeReplyEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=366)
    public Map<String,Object> setFeatureOutOfOfficeReplyEnabled(boolean zmailFeatureOutOfOfficeReplyEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureOutOfOfficeReplyEnabled, zmailFeatureOutOfOfficeReplyEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * Whether out of office reply feature should be allowed for this account
     * or in this cos
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=366)
    public void unsetFeatureOutOfOfficeReplyEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureOutOfOfficeReplyEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Whether out of office reply feature should be allowed for this account
     * or in this cos
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=366)
    public Map<String,Object> unsetFeatureOutOfOfficeReplyEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureOutOfOfficeReplyEnabled, "");
        return attrs;
    }

    /**
     * Deprecated since: 8.0.0. Deprecated per bug 56924. Orig desc: whether
     * people search feature is enabled
     *
     * @return zmailFeaturePeopleSearchEnabled, or true if unset
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1109)
    public boolean isFeaturePeopleSearchEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeaturePeopleSearchEnabled, true);
    }

    /**
     * Deprecated since: 8.0.0. Deprecated per bug 56924. Orig desc: whether
     * people search feature is enabled
     *
     * @param zmailFeaturePeopleSearchEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1109)
    public void setFeaturePeopleSearchEnabled(boolean zmailFeaturePeopleSearchEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeaturePeopleSearchEnabled, zmailFeaturePeopleSearchEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Deprecated since: 8.0.0. Deprecated per bug 56924. Orig desc: whether
     * people search feature is enabled
     *
     * @param zmailFeaturePeopleSearchEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1109)
    public Map<String,Object> setFeaturePeopleSearchEnabled(boolean zmailFeaturePeopleSearchEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeaturePeopleSearchEnabled, zmailFeaturePeopleSearchEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * Deprecated since: 8.0.0. Deprecated per bug 56924. Orig desc: whether
     * people search feature is enabled
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1109)
    public void unsetFeaturePeopleSearchEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeaturePeopleSearchEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Deprecated since: 8.0.0. Deprecated per bug 56924. Orig desc: whether
     * people search feature is enabled
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1109)
    public Map<String,Object> unsetFeaturePeopleSearchEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeaturePeopleSearchEnabled, "");
        return attrs;
    }

    /**
     * whether user is allowed to retrieve mail from an external POP3 data
     * source
     *
     * @return zmailFeaturePop3DataSourceEnabled, or true if unset
     */
    @ZAttr(id=416)
    public boolean isFeaturePop3DataSourceEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeaturePop3DataSourceEnabled, true);
    }

    /**
     * whether user is allowed to retrieve mail from an external POP3 data
     * source
     *
     * @param zmailFeaturePop3DataSourceEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=416)
    public void setFeaturePop3DataSourceEnabled(boolean zmailFeaturePop3DataSourceEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeaturePop3DataSourceEnabled, zmailFeaturePop3DataSourceEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether user is allowed to retrieve mail from an external POP3 data
     * source
     *
     * @param zmailFeaturePop3DataSourceEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=416)
    public Map<String,Object> setFeaturePop3DataSourceEnabled(boolean zmailFeaturePop3DataSourceEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeaturePop3DataSourceEnabled, zmailFeaturePop3DataSourceEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether user is allowed to retrieve mail from an external POP3 data
     * source
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=416)
    public void unsetFeaturePop3DataSourceEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeaturePop3DataSourceEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether user is allowed to retrieve mail from an external POP3 data
     * source
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=416)
    public Map<String,Object> unsetFeaturePop3DataSourceEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeaturePop3DataSourceEnabled, "");
        return attrs;
    }

    /**
     * portal features
     *
     * @return zmailFeaturePortalEnabled, or false if unset
     */
    @ZAttr(id=447)
    public boolean isFeaturePortalEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeaturePortalEnabled, false);
    }

    /**
     * portal features
     *
     * @param zmailFeaturePortalEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=447)
    public void setFeaturePortalEnabled(boolean zmailFeaturePortalEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeaturePortalEnabled, zmailFeaturePortalEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * portal features
     *
     * @param zmailFeaturePortalEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=447)
    public Map<String,Object> setFeaturePortalEnabled(boolean zmailFeaturePortalEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeaturePortalEnabled, zmailFeaturePortalEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * portal features
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=447)
    public void unsetFeaturePortalEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeaturePortalEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * portal features
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=447)
    public Map<String,Object> unsetFeaturePortalEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeaturePortalEnabled, "");
        return attrs;
    }

    /**
     * whether priority inbox feature is enabled
     *
     * @return zmailFeaturePriorityInboxEnabled, or true if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1271)
    public boolean isFeaturePriorityInboxEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeaturePriorityInboxEnabled, true);
    }

    /**
     * whether priority inbox feature is enabled
     *
     * @param zmailFeaturePriorityInboxEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1271)
    public void setFeaturePriorityInboxEnabled(boolean zmailFeaturePriorityInboxEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeaturePriorityInboxEnabled, zmailFeaturePriorityInboxEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether priority inbox feature is enabled
     *
     * @param zmailFeaturePriorityInboxEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1271)
    public Map<String,Object> setFeaturePriorityInboxEnabled(boolean zmailFeaturePriorityInboxEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeaturePriorityInboxEnabled, zmailFeaturePriorityInboxEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether priority inbox feature is enabled
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1271)
    public void unsetFeaturePriorityInboxEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeaturePriorityInboxEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether priority inbox feature is enabled
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1271)
    public Map<String,Object> unsetFeaturePriorityInboxEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeaturePriorityInboxEnabled, "");
        return attrs;
    }

    /**
     * whether the web UI shows UI elements related to read receipts
     *
     * @return zmailFeatureReadReceiptsEnabled, or true if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=821)
    public boolean isFeatureReadReceiptsEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureReadReceiptsEnabled, true);
    }

    /**
     * whether the web UI shows UI elements related to read receipts
     *
     * @param zmailFeatureReadReceiptsEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=821)
    public void setFeatureReadReceiptsEnabled(boolean zmailFeatureReadReceiptsEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureReadReceiptsEnabled, zmailFeatureReadReceiptsEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether the web UI shows UI elements related to read receipts
     *
     * @param zmailFeatureReadReceiptsEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=821)
    public Map<String,Object> setFeatureReadReceiptsEnabled(boolean zmailFeatureReadReceiptsEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureReadReceiptsEnabled, zmailFeatureReadReceiptsEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether the web UI shows UI elements related to read receipts
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=821)
    public void unsetFeatureReadReceiptsEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureReadReceiptsEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether the web UI shows UI elements related to read receipts
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=821)
    public Map<String,Object> unsetFeatureReadReceiptsEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureReadReceiptsEnabled, "");
        return attrs;
    }

    /**
     * whether S/MIME feature is enabled. Note: SMIME is a Network feature,
     * this attribute is effective only if SMIME is permitted by license.
     *
     * @return zmailFeatureSMIMEEnabled, or false if unset
     *
     * @since ZCS 7.1.0
     */
    @ZAttr(id=1186)
    public boolean isFeatureSMIMEEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureSMIMEEnabled, false);
    }

    /**
     * whether S/MIME feature is enabled. Note: SMIME is a Network feature,
     * this attribute is effective only if SMIME is permitted by license.
     *
     * @param zmailFeatureSMIMEEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.1.0
     */
    @ZAttr(id=1186)
    public void setFeatureSMIMEEnabled(boolean zmailFeatureSMIMEEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureSMIMEEnabled, zmailFeatureSMIMEEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether S/MIME feature is enabled. Note: SMIME is a Network feature,
     * this attribute is effective only if SMIME is permitted by license.
     *
     * @param zmailFeatureSMIMEEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.1.0
     */
    @ZAttr(id=1186)
    public Map<String,Object> setFeatureSMIMEEnabled(boolean zmailFeatureSMIMEEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureSMIMEEnabled, zmailFeatureSMIMEEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether S/MIME feature is enabled. Note: SMIME is a Network feature,
     * this attribute is effective only if SMIME is permitted by license.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.1.0
     */
    @ZAttr(id=1186)
    public void unsetFeatureSMIMEEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureSMIMEEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether S/MIME feature is enabled. Note: SMIME is a Network feature,
     * this attribute is effective only if SMIME is permitted by license.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.1.0
     */
    @ZAttr(id=1186)
    public Map<String,Object> unsetFeatureSMIMEEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureSMIMEEnabled, "");
        return attrs;
    }

    /**
     * saved search feature
     *
     * @return zmailFeatureSavedSearchesEnabled, or true if unset
     */
    @ZAttr(id=139)
    public boolean isFeatureSavedSearchesEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureSavedSearchesEnabled, true);
    }

    /**
     * saved search feature
     *
     * @param zmailFeatureSavedSearchesEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=139)
    public void setFeatureSavedSearchesEnabled(boolean zmailFeatureSavedSearchesEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureSavedSearchesEnabled, zmailFeatureSavedSearchesEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * saved search feature
     *
     * @param zmailFeatureSavedSearchesEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=139)
    public Map<String,Object> setFeatureSavedSearchesEnabled(boolean zmailFeatureSavedSearchesEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureSavedSearchesEnabled, zmailFeatureSavedSearchesEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * saved search feature
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=139)
    public void unsetFeatureSavedSearchesEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureSavedSearchesEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * saved search feature
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=139)
    public Map<String,Object> unsetFeatureSavedSearchesEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureSavedSearchesEnabled, "");
        return attrs;
    }

    /**
     * enabled sharing
     *
     * @return zmailFeatureSharingEnabled, or true if unset
     */
    @ZAttr(id=335)
    public boolean isFeatureSharingEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureSharingEnabled, true);
    }

    /**
     * enabled sharing
     *
     * @param zmailFeatureSharingEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=335)
    public void setFeatureSharingEnabled(boolean zmailFeatureSharingEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureSharingEnabled, zmailFeatureSharingEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * enabled sharing
     *
     * @param zmailFeatureSharingEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=335)
    public Map<String,Object> setFeatureSharingEnabled(boolean zmailFeatureSharingEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureSharingEnabled, zmailFeatureSharingEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * enabled sharing
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=335)
    public void unsetFeatureSharingEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureSharingEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * enabled sharing
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=335)
    public Map<String,Object> unsetFeatureSharingEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureSharingEnabled, "");
        return attrs;
    }

    /**
     * Deprecated since: 6.0.0_GA. deprecated. Orig desc: keyboard shortcuts
     * aliases features
     *
     * @return zmailFeatureShortcutAliasesEnabled, or true if unset
     */
    @ZAttr(id=452)
    public boolean isFeatureShortcutAliasesEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureShortcutAliasesEnabled, true);
    }

    /**
     * Deprecated since: 6.0.0_GA. deprecated. Orig desc: keyboard shortcuts
     * aliases features
     *
     * @param zmailFeatureShortcutAliasesEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=452)
    public void setFeatureShortcutAliasesEnabled(boolean zmailFeatureShortcutAliasesEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureShortcutAliasesEnabled, zmailFeatureShortcutAliasesEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Deprecated since: 6.0.0_GA. deprecated. Orig desc: keyboard shortcuts
     * aliases features
     *
     * @param zmailFeatureShortcutAliasesEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=452)
    public Map<String,Object> setFeatureShortcutAliasesEnabled(boolean zmailFeatureShortcutAliasesEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureShortcutAliasesEnabled, zmailFeatureShortcutAliasesEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * Deprecated since: 6.0.0_GA. deprecated. Orig desc: keyboard shortcuts
     * aliases features
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=452)
    public void unsetFeatureShortcutAliasesEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureShortcutAliasesEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Deprecated since: 6.0.0_GA. deprecated. Orig desc: keyboard shortcuts
     * aliases features
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=452)
    public Map<String,Object> unsetFeatureShortcutAliasesEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureShortcutAliasesEnabled, "");
        return attrs;
    }

    /**
     * whether to allow use of signature feature
     *
     * @return zmailFeatureSignaturesEnabled, or true if unset
     */
    @ZAttr(id=494)
    public boolean isFeatureSignaturesEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureSignaturesEnabled, true);
    }

    /**
     * whether to allow use of signature feature
     *
     * @param zmailFeatureSignaturesEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=494)
    public void setFeatureSignaturesEnabled(boolean zmailFeatureSignaturesEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureSignaturesEnabled, zmailFeatureSignaturesEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to allow use of signature feature
     *
     * @param zmailFeatureSignaturesEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=494)
    public Map<String,Object> setFeatureSignaturesEnabled(boolean zmailFeatureSignaturesEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureSignaturesEnabled, zmailFeatureSignaturesEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether to allow use of signature feature
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=494)
    public void unsetFeatureSignaturesEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureSignaturesEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to allow use of signature feature
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=494)
    public Map<String,Object> unsetFeatureSignaturesEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureSignaturesEnabled, "");
        return attrs;
    }

    /**
     * Whether changing skin is allowed for this account or in this cos
     *
     * @return zmailFeatureSkinChangeEnabled, or true if unset
     */
    @ZAttr(id=354)
    public boolean isFeatureSkinChangeEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureSkinChangeEnabled, true);
    }

    /**
     * Whether changing skin is allowed for this account or in this cos
     *
     * @param zmailFeatureSkinChangeEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=354)
    public void setFeatureSkinChangeEnabled(boolean zmailFeatureSkinChangeEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureSkinChangeEnabled, zmailFeatureSkinChangeEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Whether changing skin is allowed for this account or in this cos
     *
     * @param zmailFeatureSkinChangeEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=354)
    public Map<String,Object> setFeatureSkinChangeEnabled(boolean zmailFeatureSkinChangeEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureSkinChangeEnabled, zmailFeatureSkinChangeEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * Whether changing skin is allowed for this account or in this cos
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=354)
    public void unsetFeatureSkinChangeEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureSkinChangeEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Whether changing skin is allowed for this account or in this cos
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=354)
    public Map<String,Object> unsetFeatureSkinChangeEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureSkinChangeEnabled, "");
        return attrs;
    }

    /**
     * message social filters enabled in the web client UI
     *
     * <p>Valid values: [LinkedIn, Facebook, SocialCast, Twitter]
     *
     * @return zmailFeatureSocialFiltersEnabled, or empty array if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1272)
    public String[] getFeatureSocialFiltersEnabledAsString() {
        String[] value = getMultiAttr(Provisioning.A_zmailFeatureSocialFiltersEnabled); return value.length > 0 ? value : new String[] {"SocialCast","LinkedIn","Twitter","Facebook"};
    }

    /**
     * message social filters enabled in the web client UI
     *
     * <p>Valid values: [LinkedIn, Facebook, SocialCast, Twitter]
     *
     * @param zmailFeatureSocialFiltersEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1272)
    public void setFeatureSocialFiltersEnabled(ZAttrProvisioning.FeatureSocialFiltersEnabled zmailFeatureSocialFiltersEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureSocialFiltersEnabled, zmailFeatureSocialFiltersEnabled.toString());
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * message social filters enabled in the web client UI
     *
     * <p>Valid values: [LinkedIn, Facebook, SocialCast, Twitter]
     *
     * @param zmailFeatureSocialFiltersEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1272)
    public Map<String,Object> setFeatureSocialFiltersEnabled(ZAttrProvisioning.FeatureSocialFiltersEnabled zmailFeatureSocialFiltersEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureSocialFiltersEnabled, zmailFeatureSocialFiltersEnabled.toString());
        return attrs;
    }

    /**
     * message social filters enabled in the web client UI
     *
     * <p>Valid values: [LinkedIn, Facebook, SocialCast, Twitter]
     *
     * @param zmailFeatureSocialFiltersEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1272)
    public void setFeatureSocialFiltersEnabledAsString(String[] zmailFeatureSocialFiltersEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureSocialFiltersEnabled, zmailFeatureSocialFiltersEnabled);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * message social filters enabled in the web client UI
     *
     * <p>Valid values: [LinkedIn, Facebook, SocialCast, Twitter]
     *
     * @param zmailFeatureSocialFiltersEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1272)
    public Map<String,Object> setFeatureSocialFiltersEnabledAsString(String[] zmailFeatureSocialFiltersEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureSocialFiltersEnabled, zmailFeatureSocialFiltersEnabled);
        return attrs;
    }

    /**
     * message social filters enabled in the web client UI
     *
     * <p>Valid values: [LinkedIn, Facebook, SocialCast, Twitter]
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1272)
    public void unsetFeatureSocialFiltersEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureSocialFiltersEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * message social filters enabled in the web client UI
     *
     * <p>Valid values: [LinkedIn, Facebook, SocialCast, Twitter]
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1272)
    public Map<String,Object> unsetFeatureSocialFiltersEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureSocialFiltersEnabled, "");
        return attrs;
    }

    /**
     * whether Socialcast integration is enabled in the web client
     *
     * @return zmailFeatureSocialcastEnabled, or false if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1388)
    public boolean isFeatureSocialcastEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureSocialcastEnabled, false);
    }

    /**
     * whether Socialcast integration is enabled in the web client
     *
     * @param zmailFeatureSocialcastEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1388)
    public void setFeatureSocialcastEnabled(boolean zmailFeatureSocialcastEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureSocialcastEnabled, zmailFeatureSocialcastEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether Socialcast integration is enabled in the web client
     *
     * @param zmailFeatureSocialcastEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1388)
    public Map<String,Object> setFeatureSocialcastEnabled(boolean zmailFeatureSocialcastEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureSocialcastEnabled, zmailFeatureSocialcastEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether Socialcast integration is enabled in the web client
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1388)
    public void unsetFeatureSocialcastEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureSocialcastEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether Socialcast integration is enabled in the web client
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1388)
    public Map<String,Object> unsetFeatureSocialcastEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureSocialcastEnabled, "");
        return attrs;
    }

    /**
     * tagging feature
     *
     * @return zmailFeatureTaggingEnabled, or true if unset
     */
    @ZAttr(id=137)
    public boolean isFeatureTaggingEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureTaggingEnabled, true);
    }

    /**
     * tagging feature
     *
     * @param zmailFeatureTaggingEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=137)
    public void setFeatureTaggingEnabled(boolean zmailFeatureTaggingEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureTaggingEnabled, zmailFeatureTaggingEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * tagging feature
     *
     * @param zmailFeatureTaggingEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=137)
    public Map<String,Object> setFeatureTaggingEnabled(boolean zmailFeatureTaggingEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureTaggingEnabled, zmailFeatureTaggingEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * tagging feature
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=137)
    public void unsetFeatureTaggingEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureTaggingEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * tagging feature
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=137)
    public Map<String,Object> unsetFeatureTaggingEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureTaggingEnabled, "");
        return attrs;
    }

    /**
     * whether to allow use of tasks feature
     *
     * @return zmailFeatureTasksEnabled, or true if unset
     */
    @ZAttr(id=436)
    public boolean isFeatureTasksEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureTasksEnabled, true);
    }

    /**
     * whether to allow use of tasks feature
     *
     * @param zmailFeatureTasksEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=436)
    public void setFeatureTasksEnabled(boolean zmailFeatureTasksEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureTasksEnabled, zmailFeatureTasksEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to allow use of tasks feature
     *
     * @param zmailFeatureTasksEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=436)
    public Map<String,Object> setFeatureTasksEnabled(boolean zmailFeatureTasksEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureTasksEnabled, zmailFeatureTasksEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether to allow use of tasks feature
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=436)
    public void unsetFeatureTasksEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureTasksEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to allow use of tasks feature
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=436)
    public Map<String,Object> unsetFeatureTasksEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureTasksEnabled, "");
        return attrs;
    }

    /**
     * option to view attachments in html
     *
     * @return zmailFeatureViewInHtmlEnabled, or false if unset
     */
    @ZAttr(id=312)
    public boolean isFeatureViewInHtmlEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureViewInHtmlEnabled, false);
    }

    /**
     * option to view attachments in html
     *
     * @param zmailFeatureViewInHtmlEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=312)
    public void setFeatureViewInHtmlEnabled(boolean zmailFeatureViewInHtmlEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureViewInHtmlEnabled, zmailFeatureViewInHtmlEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * option to view attachments in html
     *
     * @param zmailFeatureViewInHtmlEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=312)
    public Map<String,Object> setFeatureViewInHtmlEnabled(boolean zmailFeatureViewInHtmlEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureViewInHtmlEnabled, zmailFeatureViewInHtmlEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * option to view attachments in html
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=312)
    public void unsetFeatureViewInHtmlEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureViewInHtmlEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * option to view attachments in html
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=312)
    public Map<String,Object> unsetFeatureViewInHtmlEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureViewInHtmlEnabled, "");
        return attrs;
    }

    /**
     * whether or not changing voicemail pin is enabled
     *
     * @return zmailFeatureVoiceChangePinEnabled, or true if unset
     *
     * @since ZCS 5.0.19
     */
    @ZAttr(id=1050)
    public boolean isFeatureVoiceChangePinEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureVoiceChangePinEnabled, true);
    }

    /**
     * whether or not changing voicemail pin is enabled
     *
     * @param zmailFeatureVoiceChangePinEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.19
     */
    @ZAttr(id=1050)
    public void setFeatureVoiceChangePinEnabled(boolean zmailFeatureVoiceChangePinEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureVoiceChangePinEnabled, zmailFeatureVoiceChangePinEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether or not changing voicemail pin is enabled
     *
     * @param zmailFeatureVoiceChangePinEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.19
     */
    @ZAttr(id=1050)
    public Map<String,Object> setFeatureVoiceChangePinEnabled(boolean zmailFeatureVoiceChangePinEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureVoiceChangePinEnabled, zmailFeatureVoiceChangePinEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether or not changing voicemail pin is enabled
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.19
     */
    @ZAttr(id=1050)
    public void unsetFeatureVoiceChangePinEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureVoiceChangePinEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether or not changing voicemail pin is enabled
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.19
     */
    @ZAttr(id=1050)
    public Map<String,Object> unsetFeatureVoiceChangePinEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureVoiceChangePinEnabled, "");
        return attrs;
    }

    /**
     * Voicemail features enabled
     *
     * @return zmailFeatureVoiceEnabled, or false if unset
     */
    @ZAttr(id=445)
    public boolean isFeatureVoiceEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureVoiceEnabled, false);
    }

    /**
     * Voicemail features enabled
     *
     * @param zmailFeatureVoiceEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=445)
    public void setFeatureVoiceEnabled(boolean zmailFeatureVoiceEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureVoiceEnabled, zmailFeatureVoiceEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Voicemail features enabled
     *
     * @param zmailFeatureVoiceEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=445)
    public Map<String,Object> setFeatureVoiceEnabled(boolean zmailFeatureVoiceEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureVoiceEnabled, zmailFeatureVoiceEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * Voicemail features enabled
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=445)
    public void unsetFeatureVoiceEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureVoiceEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Voicemail features enabled
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=445)
    public Map<String,Object> unsetFeatureVoiceEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureVoiceEnabled, "");
        return attrs;
    }

    /**
     * voice upsell enabled
     *
     * @return zmailFeatureVoiceUpsellEnabled, or false if unset
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=533)
    public boolean isFeatureVoiceUpsellEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureVoiceUpsellEnabled, false);
    }

    /**
     * voice upsell enabled
     *
     * @param zmailFeatureVoiceUpsellEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=533)
    public void setFeatureVoiceUpsellEnabled(boolean zmailFeatureVoiceUpsellEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureVoiceUpsellEnabled, zmailFeatureVoiceUpsellEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * voice upsell enabled
     *
     * @param zmailFeatureVoiceUpsellEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=533)
    public Map<String,Object> setFeatureVoiceUpsellEnabled(boolean zmailFeatureVoiceUpsellEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureVoiceUpsellEnabled, zmailFeatureVoiceUpsellEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * voice upsell enabled
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=533)
    public void unsetFeatureVoiceUpsellEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureVoiceUpsellEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * voice upsell enabled
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=533)
    public Map<String,Object> unsetFeatureVoiceUpsellEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureVoiceUpsellEnabled, "");
        return attrs;
    }

    /**
     * voice upsell URL
     *
     * @return zmailFeatureVoiceUpsellURL, or null if unset
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=534)
    public String getFeatureVoiceUpsellURL() {
        return getAttr(Provisioning.A_zmailFeatureVoiceUpsellURL, null);
    }

    /**
     * voice upsell URL
     *
     * @param zmailFeatureVoiceUpsellURL new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=534)
    public void setFeatureVoiceUpsellURL(String zmailFeatureVoiceUpsellURL) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureVoiceUpsellURL, zmailFeatureVoiceUpsellURL);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * voice upsell URL
     *
     * @param zmailFeatureVoiceUpsellURL new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=534)
    public Map<String,Object> setFeatureVoiceUpsellURL(String zmailFeatureVoiceUpsellURL, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureVoiceUpsellURL, zmailFeatureVoiceUpsellURL);
        return attrs;
    }

    /**
     * voice upsell URL
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=534)
    public void unsetFeatureVoiceUpsellURL() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureVoiceUpsellURL, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * voice upsell URL
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=534)
    public Map<String,Object> unsetFeatureVoiceUpsellURL(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureVoiceUpsellURL, "");
        return attrs;
    }

    /**
     * Deprecated since: 6.0.0_GA. deprecated per bug 40170. Orig desc:
     * whether web search feature is enabled
     *
     * @return zmailFeatureWebSearchEnabled, or true if unset
     *
     * @since ZCS 5.0.2
     */
    @ZAttr(id=602)
    public boolean isFeatureWebSearchEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureWebSearchEnabled, true);
    }

    /**
     * Deprecated since: 6.0.0_GA. deprecated per bug 40170. Orig desc:
     * whether web search feature is enabled
     *
     * @param zmailFeatureWebSearchEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.2
     */
    @ZAttr(id=602)
    public void setFeatureWebSearchEnabled(boolean zmailFeatureWebSearchEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureWebSearchEnabled, zmailFeatureWebSearchEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Deprecated since: 6.0.0_GA. deprecated per bug 40170. Orig desc:
     * whether web search feature is enabled
     *
     * @param zmailFeatureWebSearchEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.2
     */
    @ZAttr(id=602)
    public Map<String,Object> setFeatureWebSearchEnabled(boolean zmailFeatureWebSearchEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureWebSearchEnabled, zmailFeatureWebSearchEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * Deprecated since: 6.0.0_GA. deprecated per bug 40170. Orig desc:
     * whether web search feature is enabled
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.2
     */
    @ZAttr(id=602)
    public void unsetFeatureWebSearchEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureWebSearchEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Deprecated since: 6.0.0_GA. deprecated per bug 40170. Orig desc:
     * whether web search feature is enabled
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.2
     */
    @ZAttr(id=602)
    public Map<String,Object> unsetFeatureWebSearchEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureWebSearchEnabled, "");
        return attrs;
    }

    /**
     * Zmail Assistant enabled
     *
     * @return zmailFeatureZmailAssistantEnabled, or true if unset
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=544)
    public boolean isFeatureZmailAssistantEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFeatureZmailAssistantEnabled, true);
    }

    /**
     * Zmail Assistant enabled
     *
     * @param zmailFeatureZmailAssistantEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=544)
    public void setFeatureZmailAssistantEnabled(boolean zmailFeatureZmailAssistantEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureZmailAssistantEnabled, zmailFeatureZmailAssistantEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Zmail Assistant enabled
     *
     * @param zmailFeatureZmailAssistantEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=544)
    public Map<String,Object> setFeatureZmailAssistantEnabled(boolean zmailFeatureZmailAssistantEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureZmailAssistantEnabled, zmailFeatureZmailAssistantEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * Zmail Assistant enabled
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=544)
    public void unsetFeatureZmailAssistantEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureZmailAssistantEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Zmail Assistant enabled
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=544)
    public Map<String,Object> unsetFeatureZmailAssistantEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFeatureZmailAssistantEnabled, "");
        return attrs;
    }

    /**
     * whether crash reporting is enabled in the Android client
     *
     * @return zmailFileAndroidCrashReportingEnabled, or true if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1385)
    public boolean isFileAndroidCrashReportingEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFileAndroidCrashReportingEnabled, true);
    }

    /**
     * whether crash reporting is enabled in the Android client
     *
     * @param zmailFileAndroidCrashReportingEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1385)
    public void setFileAndroidCrashReportingEnabled(boolean zmailFileAndroidCrashReportingEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFileAndroidCrashReportingEnabled, zmailFileAndroidCrashReportingEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether crash reporting is enabled in the Android client
     *
     * @param zmailFileAndroidCrashReportingEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1385)
    public Map<String,Object> setFileAndroidCrashReportingEnabled(boolean zmailFileAndroidCrashReportingEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFileAndroidCrashReportingEnabled, zmailFileAndroidCrashReportingEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether crash reporting is enabled in the Android client
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1385)
    public void unsetFileAndroidCrashReportingEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFileAndroidCrashReportingEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether crash reporting is enabled in the Android client
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1385)
    public Map<String,Object> unsetFileAndroidCrashReportingEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFileAndroidCrashReportingEnabled, "");
        return attrs;
    }

    /**
     * template for constructing the body of a file deletion warning message
     *
     * @return zmailFileDeletionNotificationBody, or null if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1313)
    public String getFileDeletionNotificationBody() {
        return getAttr(Provisioning.A_zmailFileDeletionNotificationBody, null);
    }

    /**
     * template for constructing the body of a file deletion warning message
     *
     * @param zmailFileDeletionNotificationBody new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1313)
    public void setFileDeletionNotificationBody(String zmailFileDeletionNotificationBody) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFileDeletionNotificationBody, zmailFileDeletionNotificationBody);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * template for constructing the body of a file deletion warning message
     *
     * @param zmailFileDeletionNotificationBody new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1313)
    public Map<String,Object> setFileDeletionNotificationBody(String zmailFileDeletionNotificationBody, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFileDeletionNotificationBody, zmailFileDeletionNotificationBody);
        return attrs;
    }

    /**
     * template for constructing the body of a file deletion warning message
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1313)
    public void unsetFileDeletionNotificationBody() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFileDeletionNotificationBody, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * template for constructing the body of a file deletion warning message
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1313)
    public Map<String,Object> unsetFileDeletionNotificationBody(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFileDeletionNotificationBody, "");
        return attrs;
    }

    /**
     * template for constructing the subject of a file deletion warning
     * message
     *
     * @return zmailFileDeletionNotificationSubject, or null if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1312)
    public String getFileDeletionNotificationSubject() {
        return getAttr(Provisioning.A_zmailFileDeletionNotificationSubject, null);
    }

    /**
     * template for constructing the subject of a file deletion warning
     * message
     *
     * @param zmailFileDeletionNotificationSubject new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1312)
    public void setFileDeletionNotificationSubject(String zmailFileDeletionNotificationSubject) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFileDeletionNotificationSubject, zmailFileDeletionNotificationSubject);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * template for constructing the subject of a file deletion warning
     * message
     *
     * @param zmailFileDeletionNotificationSubject new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1312)
    public Map<String,Object> setFileDeletionNotificationSubject(String zmailFileDeletionNotificationSubject, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFileDeletionNotificationSubject, zmailFileDeletionNotificationSubject);
        return attrs;
    }

    /**
     * template for constructing the subject of a file deletion warning
     * message
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1312)
    public void unsetFileDeletionNotificationSubject() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFileDeletionNotificationSubject, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * template for constructing the subject of a file deletion warning
     * message
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1312)
    public Map<String,Object> unsetFileDeletionNotificationSubject(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFileDeletionNotificationSubject, "");
        return attrs;
    }

    /**
     * template for constructing the body of a file expiration warning
     * message
     *
     * @return zmailFileExpirationWarningBody, or null if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1311)
    public String getFileExpirationWarningBody() {
        return getAttr(Provisioning.A_zmailFileExpirationWarningBody, null);
    }

    /**
     * template for constructing the body of a file expiration warning
     * message
     *
     * @param zmailFileExpirationWarningBody new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1311)
    public void setFileExpirationWarningBody(String zmailFileExpirationWarningBody) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFileExpirationWarningBody, zmailFileExpirationWarningBody);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * template for constructing the body of a file expiration warning
     * message
     *
     * @param zmailFileExpirationWarningBody new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1311)
    public Map<String,Object> setFileExpirationWarningBody(String zmailFileExpirationWarningBody, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFileExpirationWarningBody, zmailFileExpirationWarningBody);
        return attrs;
    }

    /**
     * template for constructing the body of a file expiration warning
     * message
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1311)
    public void unsetFileExpirationWarningBody() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFileExpirationWarningBody, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * template for constructing the body of a file expiration warning
     * message
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1311)
    public Map<String,Object> unsetFileExpirationWarningBody(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFileExpirationWarningBody, "");
        return attrs;
    }

    /**
     * template for constructing the subject of a file expiration warning
     * message
     *
     * @return zmailFileExpirationWarningSubject, or null if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1310)
    public String getFileExpirationWarningSubject() {
        return getAttr(Provisioning.A_zmailFileExpirationWarningSubject, null);
    }

    /**
     * template for constructing the subject of a file expiration warning
     * message
     *
     * @param zmailFileExpirationWarningSubject new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1310)
    public void setFileExpirationWarningSubject(String zmailFileExpirationWarningSubject) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFileExpirationWarningSubject, zmailFileExpirationWarningSubject);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * template for constructing the subject of a file expiration warning
     * message
     *
     * @param zmailFileExpirationWarningSubject new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1310)
    public Map<String,Object> setFileExpirationWarningSubject(String zmailFileExpirationWarningSubject, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFileExpirationWarningSubject, zmailFileExpirationWarningSubject);
        return attrs;
    }

    /**
     * template for constructing the subject of a file expiration warning
     * message
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1310)
    public void unsetFileExpirationWarningSubject() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFileExpirationWarningSubject, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * template for constructing the subject of a file expiration warning
     * message
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1310)
    public Map<String,Object> unsetFileExpirationWarningSubject(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFileExpirationWarningSubject, "");
        return attrs;
    }

    /**
     * Period of inactivity after which file owner receives a deletion
     * warning email. Must be in valid duration format: {digits}{time-unit}.
     * digits: 0-9, time-unit: [hmsd]|ms. h - hours, m - minutes, s -
     * seconds, d - days, ms - milliseconds. If time unit is not specified,
     * the default is s(seconds).
     *
     * <p>Use getFileExpirationWarningThresholdAsString to access value as a string.
     *
     * @see #getFileExpirationWarningThresholdAsString()
     *
     * @return zmailFileExpirationWarningThreshold in millseconds, or -1 if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1308)
    public long getFileExpirationWarningThreshold() {
        return getTimeInterval(Provisioning.A_zmailFileExpirationWarningThreshold, -1L);
    }

    /**
     * Period of inactivity after which file owner receives a deletion
     * warning email. Must be in valid duration format: {digits}{time-unit}.
     * digits: 0-9, time-unit: [hmsd]|ms. h - hours, m - minutes, s -
     * seconds, d - days, ms - milliseconds. If time unit is not specified,
     * the default is s(seconds).
     *
     * @return zmailFileExpirationWarningThreshold, or null if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1308)
    public String getFileExpirationWarningThresholdAsString() {
        return getAttr(Provisioning.A_zmailFileExpirationWarningThreshold, null);
    }

    /**
     * Period of inactivity after which file owner receives a deletion
     * warning email. Must be in valid duration format: {digits}{time-unit}.
     * digits: 0-9, time-unit: [hmsd]|ms. h - hours, m - minutes, s -
     * seconds, d - days, ms - milliseconds. If time unit is not specified,
     * the default is s(seconds).
     *
     * @param zmailFileExpirationWarningThreshold new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1308)
    public void setFileExpirationWarningThreshold(String zmailFileExpirationWarningThreshold) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFileExpirationWarningThreshold, zmailFileExpirationWarningThreshold);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Period of inactivity after which file owner receives a deletion
     * warning email. Must be in valid duration format: {digits}{time-unit}.
     * digits: 0-9, time-unit: [hmsd]|ms. h - hours, m - minutes, s -
     * seconds, d - days, ms - milliseconds. If time unit is not specified,
     * the default is s(seconds).
     *
     * @param zmailFileExpirationWarningThreshold new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1308)
    public Map<String,Object> setFileExpirationWarningThreshold(String zmailFileExpirationWarningThreshold, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFileExpirationWarningThreshold, zmailFileExpirationWarningThreshold);
        return attrs;
    }

    /**
     * Period of inactivity after which file owner receives a deletion
     * warning email. Must be in valid duration format: {digits}{time-unit}.
     * digits: 0-9, time-unit: [hmsd]|ms. h - hours, m - minutes, s -
     * seconds, d - days, ms - milliseconds. If time unit is not specified,
     * the default is s(seconds).
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1308)
    public void unsetFileExpirationWarningThreshold() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFileExpirationWarningThreshold, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Period of inactivity after which file owner receives a deletion
     * warning email. Must be in valid duration format: {digits}{time-unit}.
     * digits: 0-9, time-unit: [hmsd]|ms. h - hours, m - minutes, s -
     * seconds, d - days, ms - milliseconds. If time unit is not specified,
     * the default is s(seconds).
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1308)
    public Map<String,Object> unsetFileExpirationWarningThreshold(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFileExpirationWarningThreshold, "");
        return attrs;
    }

    /**
     * Maximum allowed lifetime of file shares to external users. A value of
     * 0 indicates that there&#039;s no limit on an external file
     * share&#039;s lifetime. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * <p>Use getFileExternalShareLifetimeAsString to access value as a string.
     *
     * @see #getFileExternalShareLifetimeAsString()
     *
     * @return zmailFileExternalShareLifetime in millseconds, or 7776000000 (90d)  if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1363)
    public long getFileExternalShareLifetime() {
        return getTimeInterval(Provisioning.A_zmailFileExternalShareLifetime, 7776000000L);
    }

    /**
     * Maximum allowed lifetime of file shares to external users. A value of
     * 0 indicates that there&#039;s no limit on an external file
     * share&#039;s lifetime. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @return zmailFileExternalShareLifetime, or "90d" if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1363)
    public String getFileExternalShareLifetimeAsString() {
        return getAttr(Provisioning.A_zmailFileExternalShareLifetime, "90d");
    }

    /**
     * Maximum allowed lifetime of file shares to external users. A value of
     * 0 indicates that there&#039;s no limit on an external file
     * share&#039;s lifetime. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param zmailFileExternalShareLifetime new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1363)
    public void setFileExternalShareLifetime(String zmailFileExternalShareLifetime) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFileExternalShareLifetime, zmailFileExternalShareLifetime);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Maximum allowed lifetime of file shares to external users. A value of
     * 0 indicates that there&#039;s no limit on an external file
     * share&#039;s lifetime. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param zmailFileExternalShareLifetime new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1363)
    public Map<String,Object> setFileExternalShareLifetime(String zmailFileExternalShareLifetime, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFileExternalShareLifetime, zmailFileExternalShareLifetime);
        return attrs;
    }

    /**
     * Maximum allowed lifetime of file shares to external users. A value of
     * 0 indicates that there&#039;s no limit on an external file
     * share&#039;s lifetime. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1363)
    public void unsetFileExternalShareLifetime() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFileExternalShareLifetime, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Maximum allowed lifetime of file shares to external users. A value of
     * 0 indicates that there&#039;s no limit on an external file
     * share&#039;s lifetime. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1363)
    public Map<String,Object> unsetFileExternalShareLifetime(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFileExternalShareLifetime, "");
        return attrs;
    }

    /**
     * whether crash reporting is enabled in the IOS client
     *
     * @return zmailFileIOSCrashReportingEnabled, or true if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1390)
    public boolean isFileIOSCrashReportingEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFileIOSCrashReportingEnabled, true);
    }

    /**
     * whether crash reporting is enabled in the IOS client
     *
     * @param zmailFileIOSCrashReportingEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1390)
    public void setFileIOSCrashReportingEnabled(boolean zmailFileIOSCrashReportingEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFileIOSCrashReportingEnabled, zmailFileIOSCrashReportingEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether crash reporting is enabled in the IOS client
     *
     * @param zmailFileIOSCrashReportingEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1390)
    public Map<String,Object> setFileIOSCrashReportingEnabled(boolean zmailFileIOSCrashReportingEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFileIOSCrashReportingEnabled, zmailFileIOSCrashReportingEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether crash reporting is enabled in the IOS client
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1390)
    public void unsetFileIOSCrashReportingEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFileIOSCrashReportingEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether crash reporting is enabled in the IOS client
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1390)
    public Map<String,Object> unsetFileIOSCrashReportingEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFileIOSCrashReportingEnabled, "");
        return attrs;
    }

    /**
     * Period of inactivity after which a file gets deleted. Must be in valid
     * duration format: {digits}{time-unit}. digits: 0-9, time-unit:
     * [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days, ms -
     * milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * <p>Use getFileLifetimeAsString to access value as a string.
     *
     * @see #getFileLifetimeAsString()
     *
     * @return zmailFileLifetime in millseconds, or -1 if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1309)
    public long getFileLifetime() {
        return getTimeInterval(Provisioning.A_zmailFileLifetime, -1L);
    }

    /**
     * Period of inactivity after which a file gets deleted. Must be in valid
     * duration format: {digits}{time-unit}. digits: 0-9, time-unit:
     * [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days, ms -
     * milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @return zmailFileLifetime, or null if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1309)
    public String getFileLifetimeAsString() {
        return getAttr(Provisioning.A_zmailFileLifetime, null);
    }

    /**
     * Period of inactivity after which a file gets deleted. Must be in valid
     * duration format: {digits}{time-unit}. digits: 0-9, time-unit:
     * [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days, ms -
     * milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @param zmailFileLifetime new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1309)
    public void setFileLifetime(String zmailFileLifetime) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFileLifetime, zmailFileLifetime);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Period of inactivity after which a file gets deleted. Must be in valid
     * duration format: {digits}{time-unit}. digits: 0-9, time-unit:
     * [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days, ms -
     * milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @param zmailFileLifetime new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1309)
    public Map<String,Object> setFileLifetime(String zmailFileLifetime, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFileLifetime, zmailFileLifetime);
        return attrs;
    }

    /**
     * Period of inactivity after which a file gets deleted. Must be in valid
     * duration format: {digits}{time-unit}. digits: 0-9, time-unit:
     * [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days, ms -
     * milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1309)
    public void unsetFileLifetime() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFileLifetime, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Period of inactivity after which a file gets deleted. Must be in valid
     * duration format: {digits}{time-unit}. digits: 0-9, time-unit:
     * [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days, ms -
     * milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1309)
    public Map<String,Object> unsetFileLifetime(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFileLifetime, "");
        return attrs;
    }

    /**
     * Maximum allowed lifetime of public file shares. A value of 0 indicates
     * that there&#039;s no limit on a public file share&#039;s lifetime. .
     * Must be in valid duration format: {digits}{time-unit}. digits: 0-9,
     * time-unit: [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days,
     * ms - milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * <p>Use getFilePublicShareLifetimeAsString to access value as a string.
     *
     * @see #getFilePublicShareLifetimeAsString()
     *
     * @return zmailFilePublicShareLifetime in millseconds, or 0 (0)  if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1364)
    public long getFilePublicShareLifetime() {
        return getTimeInterval(Provisioning.A_zmailFilePublicShareLifetime, 0L);
    }

    /**
     * Maximum allowed lifetime of public file shares. A value of 0 indicates
     * that there&#039;s no limit on a public file share&#039;s lifetime. .
     * Must be in valid duration format: {digits}{time-unit}. digits: 0-9,
     * time-unit: [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days,
     * ms - milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @return zmailFilePublicShareLifetime, or "0" if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1364)
    public String getFilePublicShareLifetimeAsString() {
        return getAttr(Provisioning.A_zmailFilePublicShareLifetime, "0");
    }

    /**
     * Maximum allowed lifetime of public file shares. A value of 0 indicates
     * that there&#039;s no limit on a public file share&#039;s lifetime. .
     * Must be in valid duration format: {digits}{time-unit}. digits: 0-9,
     * time-unit: [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days,
     * ms - milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @param zmailFilePublicShareLifetime new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1364)
    public void setFilePublicShareLifetime(String zmailFilePublicShareLifetime) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFilePublicShareLifetime, zmailFilePublicShareLifetime);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Maximum allowed lifetime of public file shares. A value of 0 indicates
     * that there&#039;s no limit on a public file share&#039;s lifetime. .
     * Must be in valid duration format: {digits}{time-unit}. digits: 0-9,
     * time-unit: [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days,
     * ms - milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @param zmailFilePublicShareLifetime new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1364)
    public Map<String,Object> setFilePublicShareLifetime(String zmailFilePublicShareLifetime, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFilePublicShareLifetime, zmailFilePublicShareLifetime);
        return attrs;
    }

    /**
     * Maximum allowed lifetime of public file shares. A value of 0 indicates
     * that there&#039;s no limit on a public file share&#039;s lifetime. .
     * Must be in valid duration format: {digits}{time-unit}. digits: 0-9,
     * time-unit: [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days,
     * ms - milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1364)
    public void unsetFilePublicShareLifetime() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFilePublicShareLifetime, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Maximum allowed lifetime of public file shares. A value of 0 indicates
     * that there&#039;s no limit on a public file share&#039;s lifetime. .
     * Must be in valid duration format: {digits}{time-unit}. digits: 0-9,
     * time-unit: [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days,
     * ms - milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1364)
    public Map<String,Object> unsetFilePublicShareLifetime(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFilePublicShareLifetime, "");
        return attrs;
    }

    /**
     * Maximum allowed lifetime of file shares to internal users or groups. A
     * value of 0 indicates that there&#039;s no limit on an internal file
     * share&#039;s lifetime. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * <p>Use getFileShareLifetimeAsString to access value as a string.
     *
     * @see #getFileShareLifetimeAsString()
     *
     * @return zmailFileShareLifetime in millseconds, or 0 (0)  if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1362)
    public long getFileShareLifetime() {
        return getTimeInterval(Provisioning.A_zmailFileShareLifetime, 0L);
    }

    /**
     * Maximum allowed lifetime of file shares to internal users or groups. A
     * value of 0 indicates that there&#039;s no limit on an internal file
     * share&#039;s lifetime. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @return zmailFileShareLifetime, or "0" if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1362)
    public String getFileShareLifetimeAsString() {
        return getAttr(Provisioning.A_zmailFileShareLifetime, "0");
    }

    /**
     * Maximum allowed lifetime of file shares to internal users or groups. A
     * value of 0 indicates that there&#039;s no limit on an internal file
     * share&#039;s lifetime. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param zmailFileShareLifetime new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1362)
    public void setFileShareLifetime(String zmailFileShareLifetime) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFileShareLifetime, zmailFileShareLifetime);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Maximum allowed lifetime of file shares to internal users or groups. A
     * value of 0 indicates that there&#039;s no limit on an internal file
     * share&#039;s lifetime. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param zmailFileShareLifetime new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1362)
    public Map<String,Object> setFileShareLifetime(String zmailFileShareLifetime, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFileShareLifetime, zmailFileShareLifetime);
        return attrs;
    }

    /**
     * Maximum allowed lifetime of file shares to internal users or groups. A
     * value of 0 indicates that there&#039;s no limit on an internal file
     * share&#039;s lifetime. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1362)
    public void unsetFileShareLifetime() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFileShareLifetime, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Maximum allowed lifetime of file shares to internal users or groups. A
     * value of 0 indicates that there&#039;s no limit on an internal file
     * share&#039;s lifetime. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1362)
    public Map<String,Object> unsetFileShareLifetime(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFileShareLifetime, "");
        return attrs;
    }

    /**
     * Maximum size in bytes for each attachment.
     *
     * @return zmailFileUploadMaxSizePerFile, or 2147483648 if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1350)
    public long getFileUploadMaxSizePerFile() {
        return getLongAttr(Provisioning.A_zmailFileUploadMaxSizePerFile, 2147483648L);
    }

    /**
     * Maximum size in bytes for each attachment.
     *
     * @param zmailFileUploadMaxSizePerFile new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1350)
    public void setFileUploadMaxSizePerFile(long zmailFileUploadMaxSizePerFile) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFileUploadMaxSizePerFile, Long.toString(zmailFileUploadMaxSizePerFile));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Maximum size in bytes for each attachment.
     *
     * @param zmailFileUploadMaxSizePerFile new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1350)
    public Map<String,Object> setFileUploadMaxSizePerFile(long zmailFileUploadMaxSizePerFile, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFileUploadMaxSizePerFile, Long.toString(zmailFileUploadMaxSizePerFile));
        return attrs;
    }

    /**
     * Maximum size in bytes for each attachment.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1350)
    public void unsetFileUploadMaxSizePerFile() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFileUploadMaxSizePerFile, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Maximum size in bytes for each attachment.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1350)
    public Map<String,Object> unsetFileUploadMaxSizePerFile(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFileUploadMaxSizePerFile, "");
        return attrs;
    }

    /**
     * how long a file version is kept around. Must be in valid duration
     * format: {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h -
     * hours, m - minutes, s - seconds, d - days, ms - milliseconds. If time
     * unit is not specified, the default is s(seconds).
     *
     * <p>Use getFileVersionLifetimeAsString to access value as a string.
     *
     * @see #getFileVersionLifetimeAsString()
     *
     * @return zmailFileVersionLifetime in millseconds, or -1 if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1325)
    public long getFileVersionLifetime() {
        return getTimeInterval(Provisioning.A_zmailFileVersionLifetime, -1L);
    }

    /**
     * how long a file version is kept around. Must be in valid duration
     * format: {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h -
     * hours, m - minutes, s - seconds, d - days, ms - milliseconds. If time
     * unit is not specified, the default is s(seconds).
     *
     * @return zmailFileVersionLifetime, or null if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1325)
    public String getFileVersionLifetimeAsString() {
        return getAttr(Provisioning.A_zmailFileVersionLifetime, null);
    }

    /**
     * how long a file version is kept around. Must be in valid duration
     * format: {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h -
     * hours, m - minutes, s - seconds, d - days, ms - milliseconds. If time
     * unit is not specified, the default is s(seconds).
     *
     * @param zmailFileVersionLifetime new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1325)
    public void setFileVersionLifetime(String zmailFileVersionLifetime) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFileVersionLifetime, zmailFileVersionLifetime);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * how long a file version is kept around. Must be in valid duration
     * format: {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h -
     * hours, m - minutes, s - seconds, d - days, ms - milliseconds. If time
     * unit is not specified, the default is s(seconds).
     *
     * @param zmailFileVersionLifetime new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1325)
    public Map<String,Object> setFileVersionLifetime(String zmailFileVersionLifetime, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFileVersionLifetime, zmailFileVersionLifetime);
        return attrs;
    }

    /**
     * how long a file version is kept around. Must be in valid duration
     * format: {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h -
     * hours, m - minutes, s - seconds, d - days, ms - milliseconds. If time
     * unit is not specified, the default is s(seconds).
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1325)
    public void unsetFileVersionLifetime() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFileVersionLifetime, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * how long a file version is kept around. Must be in valid duration
     * format: {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h -
     * hours, m - minutes, s - seconds, d - days, ms - milliseconds. If time
     * unit is not specified, the default is s(seconds).
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1325)
    public Map<String,Object> unsetFileVersionLifetime(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFileVersionLifetime, "");
        return attrs;
    }

    /**
     * whether file versioning is enabled
     *
     * @return zmailFileVersioningEnabled, or false if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1324)
    public boolean isFileVersioningEnabled() {
        return getBooleanAttr(Provisioning.A_zmailFileVersioningEnabled, false);
    }

    /**
     * whether file versioning is enabled
     *
     * @param zmailFileVersioningEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1324)
    public void setFileVersioningEnabled(boolean zmailFileVersioningEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFileVersioningEnabled, zmailFileVersioningEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether file versioning is enabled
     *
     * @param zmailFileVersioningEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1324)
    public Map<String,Object> setFileVersioningEnabled(boolean zmailFileVersioningEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFileVersioningEnabled, zmailFileVersioningEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether file versioning is enabled
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1324)
    public void unsetFileVersioningEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFileVersioningEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether file versioning is enabled
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1324)
    public Map<String,Object> unsetFileVersioningEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFileVersioningEnabled, "");
        return attrs;
    }

    /**
     * Maximum number of messages that can be processed in a single
     * ApplyFilterRules operation.
     *
     * @return zmailFilterBatchSize, or 10000 if unset
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1158)
    public int getFilterBatchSize() {
        return getIntAttr(Provisioning.A_zmailFilterBatchSize, 10000);
    }

    /**
     * Maximum number of messages that can be processed in a single
     * ApplyFilterRules operation.
     *
     * @param zmailFilterBatchSize new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1158)
    public void setFilterBatchSize(int zmailFilterBatchSize) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFilterBatchSize, Integer.toString(zmailFilterBatchSize));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Maximum number of messages that can be processed in a single
     * ApplyFilterRules operation.
     *
     * @param zmailFilterBatchSize new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1158)
    public Map<String,Object> setFilterBatchSize(int zmailFilterBatchSize, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFilterBatchSize, Integer.toString(zmailFilterBatchSize));
        return attrs;
    }

    /**
     * Maximum number of messages that can be processed in a single
     * ApplyFilterRules operation.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1158)
    public void unsetFilterBatchSize() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFilterBatchSize, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Maximum number of messages that can be processed in a single
     * ApplyFilterRules operation.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1158)
    public Map<String,Object> unsetFilterBatchSize(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFilterBatchSize, "");
        return attrs;
    }

    /**
     * The amount of time to sleep between every two messages during
     * ApplyFilterRules. Increasing this value will even out server load at
     * the expense of slowing down the operation. . Must be in valid duration
     * format: {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h -
     * hours, m - minutes, s - seconds, d - days, ms - milliseconds. If time
     * unit is not specified, the default is s(seconds).
     *
     * <p>Use getFilterSleepIntervalAsString to access value as a string.
     *
     * @see #getFilterSleepIntervalAsString()
     *
     * @return zmailFilterSleepInterval in millseconds, or 1 (1ms)  if unset
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1159)
    public long getFilterSleepInterval() {
        return getTimeInterval(Provisioning.A_zmailFilterSleepInterval, 1L);
    }

    /**
     * The amount of time to sleep between every two messages during
     * ApplyFilterRules. Increasing this value will even out server load at
     * the expense of slowing down the operation. . Must be in valid duration
     * format: {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h -
     * hours, m - minutes, s - seconds, d - days, ms - milliseconds. If time
     * unit is not specified, the default is s(seconds).
     *
     * @return zmailFilterSleepInterval, or "1ms" if unset
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1159)
    public String getFilterSleepIntervalAsString() {
        return getAttr(Provisioning.A_zmailFilterSleepInterval, "1ms");
    }

    /**
     * The amount of time to sleep between every two messages during
     * ApplyFilterRules. Increasing this value will even out server load at
     * the expense of slowing down the operation. . Must be in valid duration
     * format: {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h -
     * hours, m - minutes, s - seconds, d - days, ms - milliseconds. If time
     * unit is not specified, the default is s(seconds).
     *
     * @param zmailFilterSleepInterval new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1159)
    public void setFilterSleepInterval(String zmailFilterSleepInterval) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFilterSleepInterval, zmailFilterSleepInterval);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * The amount of time to sleep between every two messages during
     * ApplyFilterRules. Increasing this value will even out server load at
     * the expense of slowing down the operation. . Must be in valid duration
     * format: {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h -
     * hours, m - minutes, s - seconds, d - days, ms - milliseconds. If time
     * unit is not specified, the default is s(seconds).
     *
     * @param zmailFilterSleepInterval new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1159)
    public Map<String,Object> setFilterSleepInterval(String zmailFilterSleepInterval, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFilterSleepInterval, zmailFilterSleepInterval);
        return attrs;
    }

    /**
     * The amount of time to sleep between every two messages during
     * ApplyFilterRules. Increasing this value will even out server load at
     * the expense of slowing down the operation. . Must be in valid duration
     * format: {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h -
     * hours, m - minutes, s - seconds, d - days, ms - milliseconds. If time
     * unit is not specified, the default is s(seconds).
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1159)
    public void unsetFilterSleepInterval() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFilterSleepInterval, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * The amount of time to sleep between every two messages during
     * ApplyFilterRules. Increasing this value will even out server load at
     * the expense of slowing down the operation. . Must be in valid duration
     * format: {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h -
     * hours, m - minutes, s - seconds, d - days, ms - milliseconds. If time
     * unit is not specified, the default is s(seconds).
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1159)
    public Map<String,Object> unsetFilterSleepInterval(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFilterSleepInterval, "");
        return attrs;
    }

    /**
     * Whether to force clear zmail auth cookies when SOAP session ends
     * (i.e. force logout on browser tab close)
     *
     * @return zmailForceClearCookies, or false if unset
     *
     * @since ZCS 8.0.4
     */
    @ZAttr(id=1437)
    public boolean isForceClearCookies() {
        return getBooleanAttr(Provisioning.A_zmailForceClearCookies, false);
    }

    /**
     * Whether to force clear zmail auth cookies when SOAP session ends
     * (i.e. force logout on browser tab close)
     *
     * @param zmailForceClearCookies new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.4
     */
    @ZAttr(id=1437)
    public void setForceClearCookies(boolean zmailForceClearCookies) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailForceClearCookies, zmailForceClearCookies ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Whether to force clear zmail auth cookies when SOAP session ends
     * (i.e. force logout on browser tab close)
     *
     * @param zmailForceClearCookies new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.4
     */
    @ZAttr(id=1437)
    public Map<String,Object> setForceClearCookies(boolean zmailForceClearCookies, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailForceClearCookies, zmailForceClearCookies ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * Whether to force clear zmail auth cookies when SOAP session ends
     * (i.e. force logout on browser tab close)
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.4
     */
    @ZAttr(id=1437)
    public void unsetForceClearCookies() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailForceClearCookies, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Whether to force clear zmail auth cookies when SOAP session ends
     * (i.e. force logout on browser tab close)
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.4
     */
    @ZAttr(id=1437)
    public Map<String,Object> unsetForceClearCookies(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailForceClearCookies, "");
        return attrs;
    }

    /**
     * Exchange user password for free/busy lookup and propagation
     *
     * @return zmailFreebusyExchangeAuthPassword, or null if unset
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=609)
    public String getFreebusyExchangeAuthPassword() {
        return getAttr(Provisioning.A_zmailFreebusyExchangeAuthPassword, null);
    }

    /**
     * Exchange user password for free/busy lookup and propagation
     *
     * @param zmailFreebusyExchangeAuthPassword new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=609)
    public void setFreebusyExchangeAuthPassword(String zmailFreebusyExchangeAuthPassword) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFreebusyExchangeAuthPassword, zmailFreebusyExchangeAuthPassword);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Exchange user password for free/busy lookup and propagation
     *
     * @param zmailFreebusyExchangeAuthPassword new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=609)
    public Map<String,Object> setFreebusyExchangeAuthPassword(String zmailFreebusyExchangeAuthPassword, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFreebusyExchangeAuthPassword, zmailFreebusyExchangeAuthPassword);
        return attrs;
    }

    /**
     * Exchange user password for free/busy lookup and propagation
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=609)
    public void unsetFreebusyExchangeAuthPassword() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFreebusyExchangeAuthPassword, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Exchange user password for free/busy lookup and propagation
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=609)
    public Map<String,Object> unsetFreebusyExchangeAuthPassword(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFreebusyExchangeAuthPassword, "");
        return attrs;
    }

    /**
     * auth scheme to use
     *
     * <p>Valid values: [form, basic]
     *
     * @return zmailFreebusyExchangeAuthScheme, or null if unset and/or has invalid value
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=611)
    public ZAttrProvisioning.FreebusyExchangeAuthScheme getFreebusyExchangeAuthScheme() {
        try { String v = getAttr(Provisioning.A_zmailFreebusyExchangeAuthScheme); return v == null ? null : ZAttrProvisioning.FreebusyExchangeAuthScheme.fromString(v); } catch(org.zmail.common.service.ServiceException e) { return null; }
    }

    /**
     * auth scheme to use
     *
     * <p>Valid values: [form, basic]
     *
     * @return zmailFreebusyExchangeAuthScheme, or null if unset
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=611)
    public String getFreebusyExchangeAuthSchemeAsString() {
        return getAttr(Provisioning.A_zmailFreebusyExchangeAuthScheme, null);
    }

    /**
     * auth scheme to use
     *
     * <p>Valid values: [form, basic]
     *
     * @param zmailFreebusyExchangeAuthScheme new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=611)
    public void setFreebusyExchangeAuthScheme(ZAttrProvisioning.FreebusyExchangeAuthScheme zmailFreebusyExchangeAuthScheme) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFreebusyExchangeAuthScheme, zmailFreebusyExchangeAuthScheme.toString());
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * auth scheme to use
     *
     * <p>Valid values: [form, basic]
     *
     * @param zmailFreebusyExchangeAuthScheme new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=611)
    public Map<String,Object> setFreebusyExchangeAuthScheme(ZAttrProvisioning.FreebusyExchangeAuthScheme zmailFreebusyExchangeAuthScheme, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFreebusyExchangeAuthScheme, zmailFreebusyExchangeAuthScheme.toString());
        return attrs;
    }

    /**
     * auth scheme to use
     *
     * <p>Valid values: [form, basic]
     *
     * @param zmailFreebusyExchangeAuthScheme new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=611)
    public void setFreebusyExchangeAuthSchemeAsString(String zmailFreebusyExchangeAuthScheme) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFreebusyExchangeAuthScheme, zmailFreebusyExchangeAuthScheme);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * auth scheme to use
     *
     * <p>Valid values: [form, basic]
     *
     * @param zmailFreebusyExchangeAuthScheme new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=611)
    public Map<String,Object> setFreebusyExchangeAuthSchemeAsString(String zmailFreebusyExchangeAuthScheme, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFreebusyExchangeAuthScheme, zmailFreebusyExchangeAuthScheme);
        return attrs;
    }

    /**
     * auth scheme to use
     *
     * <p>Valid values: [form, basic]
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=611)
    public void unsetFreebusyExchangeAuthScheme() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFreebusyExchangeAuthScheme, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * auth scheme to use
     *
     * <p>Valid values: [form, basic]
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=611)
    public Map<String,Object> unsetFreebusyExchangeAuthScheme(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFreebusyExchangeAuthScheme, "");
        return attrs;
    }

    /**
     * Exchange username for free/busy lookup and propagation
     *
     * @return zmailFreebusyExchangeAuthUsername, or null if unset
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=608)
    public String getFreebusyExchangeAuthUsername() {
        return getAttr(Provisioning.A_zmailFreebusyExchangeAuthUsername, null);
    }

    /**
     * Exchange username for free/busy lookup and propagation
     *
     * @param zmailFreebusyExchangeAuthUsername new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=608)
    public void setFreebusyExchangeAuthUsername(String zmailFreebusyExchangeAuthUsername) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFreebusyExchangeAuthUsername, zmailFreebusyExchangeAuthUsername);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Exchange username for free/busy lookup and propagation
     *
     * @param zmailFreebusyExchangeAuthUsername new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=608)
    public Map<String,Object> setFreebusyExchangeAuthUsername(String zmailFreebusyExchangeAuthUsername, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFreebusyExchangeAuthUsername, zmailFreebusyExchangeAuthUsername);
        return attrs;
    }

    /**
     * Exchange username for free/busy lookup and propagation
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=608)
    public void unsetFreebusyExchangeAuthUsername() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFreebusyExchangeAuthUsername, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Exchange username for free/busy lookup and propagation
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=608)
    public Map<String,Object> unsetFreebusyExchangeAuthUsername(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFreebusyExchangeAuthUsername, "");
        return attrs;
    }

    /**
     * The duration of f/b block pushed to Exchange server.. Must be in valid
     * duration format: {digits}{time-unit}. digits: 0-9, time-unit:
     * [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days, ms -
     * milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * <p>Use getFreebusyExchangeCachedIntervalAsString to access value as a string.
     *
     * @see #getFreebusyExchangeCachedIntervalAsString()
     *
     * @return zmailFreebusyExchangeCachedInterval in millseconds, or -1 if unset
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=621)
    public long getFreebusyExchangeCachedInterval() {
        return getTimeInterval(Provisioning.A_zmailFreebusyExchangeCachedInterval, -1L);
    }

    /**
     * The duration of f/b block pushed to Exchange server.. Must be in valid
     * duration format: {digits}{time-unit}. digits: 0-9, time-unit:
     * [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days, ms -
     * milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @return zmailFreebusyExchangeCachedInterval, or null if unset
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=621)
    public String getFreebusyExchangeCachedIntervalAsString() {
        return getAttr(Provisioning.A_zmailFreebusyExchangeCachedInterval, null);
    }

    /**
     * The duration of f/b block pushed to Exchange server.. Must be in valid
     * duration format: {digits}{time-unit}. digits: 0-9, time-unit:
     * [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days, ms -
     * milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @param zmailFreebusyExchangeCachedInterval new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=621)
    public void setFreebusyExchangeCachedInterval(String zmailFreebusyExchangeCachedInterval) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFreebusyExchangeCachedInterval, zmailFreebusyExchangeCachedInterval);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * The duration of f/b block pushed to Exchange server.. Must be in valid
     * duration format: {digits}{time-unit}. digits: 0-9, time-unit:
     * [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days, ms -
     * milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @param zmailFreebusyExchangeCachedInterval new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=621)
    public Map<String,Object> setFreebusyExchangeCachedInterval(String zmailFreebusyExchangeCachedInterval, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFreebusyExchangeCachedInterval, zmailFreebusyExchangeCachedInterval);
        return attrs;
    }

    /**
     * The duration of f/b block pushed to Exchange server.. Must be in valid
     * duration format: {digits}{time-unit}. digits: 0-9, time-unit:
     * [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days, ms -
     * milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=621)
    public void unsetFreebusyExchangeCachedInterval() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFreebusyExchangeCachedInterval, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * The duration of f/b block pushed to Exchange server.. Must be in valid
     * duration format: {digits}{time-unit}. digits: 0-9, time-unit:
     * [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days, ms -
     * milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=621)
    public Map<String,Object> unsetFreebusyExchangeCachedInterval(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFreebusyExchangeCachedInterval, "");
        return attrs;
    }

    /**
     * The value of duration is used to indicate the start date (in the past
     * relative to today) of the f/b interval pushed to Exchange server..
     * Must be in valid duration format: {digits}{time-unit}. digits: 0-9,
     * time-unit: [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days,
     * ms - milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * <p>Use getFreebusyExchangeCachedIntervalStartAsString to access value as a string.
     *
     * @see #getFreebusyExchangeCachedIntervalStartAsString()
     *
     * @return zmailFreebusyExchangeCachedIntervalStart in millseconds, or -1 if unset
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=620)
    public long getFreebusyExchangeCachedIntervalStart() {
        return getTimeInterval(Provisioning.A_zmailFreebusyExchangeCachedIntervalStart, -1L);
    }

    /**
     * The value of duration is used to indicate the start date (in the past
     * relative to today) of the f/b interval pushed to Exchange server..
     * Must be in valid duration format: {digits}{time-unit}. digits: 0-9,
     * time-unit: [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days,
     * ms - milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @return zmailFreebusyExchangeCachedIntervalStart, or null if unset
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=620)
    public String getFreebusyExchangeCachedIntervalStartAsString() {
        return getAttr(Provisioning.A_zmailFreebusyExchangeCachedIntervalStart, null);
    }

    /**
     * The value of duration is used to indicate the start date (in the past
     * relative to today) of the f/b interval pushed to Exchange server..
     * Must be in valid duration format: {digits}{time-unit}. digits: 0-9,
     * time-unit: [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days,
     * ms - milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @param zmailFreebusyExchangeCachedIntervalStart new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=620)
    public void setFreebusyExchangeCachedIntervalStart(String zmailFreebusyExchangeCachedIntervalStart) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFreebusyExchangeCachedIntervalStart, zmailFreebusyExchangeCachedIntervalStart);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * The value of duration is used to indicate the start date (in the past
     * relative to today) of the f/b interval pushed to Exchange server..
     * Must be in valid duration format: {digits}{time-unit}. digits: 0-9,
     * time-unit: [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days,
     * ms - milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @param zmailFreebusyExchangeCachedIntervalStart new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=620)
    public Map<String,Object> setFreebusyExchangeCachedIntervalStart(String zmailFreebusyExchangeCachedIntervalStart, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFreebusyExchangeCachedIntervalStart, zmailFreebusyExchangeCachedIntervalStart);
        return attrs;
    }

    /**
     * The value of duration is used to indicate the start date (in the past
     * relative to today) of the f/b interval pushed to Exchange server..
     * Must be in valid duration format: {digits}{time-unit}. digits: 0-9,
     * time-unit: [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days,
     * ms - milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=620)
    public void unsetFreebusyExchangeCachedIntervalStart() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFreebusyExchangeCachedIntervalStart, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * The value of duration is used to indicate the start date (in the past
     * relative to today) of the f/b interval pushed to Exchange server..
     * Must be in valid duration format: {digits}{time-unit}. digits: 0-9,
     * time-unit: [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days,
     * ms - milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=620)
    public Map<String,Object> unsetFreebusyExchangeCachedIntervalStart(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFreebusyExchangeCachedIntervalStart, "");
        return attrs;
    }

    /**
     * URL to Exchange server for free/busy lookup and propagation
     *
     * @return zmailFreebusyExchangeURL, or null if unset
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=607)
    public String getFreebusyExchangeURL() {
        return getAttr(Provisioning.A_zmailFreebusyExchangeURL, null);
    }

    /**
     * URL to Exchange server for free/busy lookup and propagation
     *
     * @param zmailFreebusyExchangeURL new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=607)
    public void setFreebusyExchangeURL(String zmailFreebusyExchangeURL) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFreebusyExchangeURL, zmailFreebusyExchangeURL);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * URL to Exchange server for free/busy lookup and propagation
     *
     * @param zmailFreebusyExchangeURL new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=607)
    public Map<String,Object> setFreebusyExchangeURL(String zmailFreebusyExchangeURL, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFreebusyExchangeURL, zmailFreebusyExchangeURL);
        return attrs;
    }

    /**
     * URL to Exchange server for free/busy lookup and propagation
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=607)
    public void unsetFreebusyExchangeURL() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFreebusyExchangeURL, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * URL to Exchange server for free/busy lookup and propagation
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=607)
    public Map<String,Object> unsetFreebusyExchangeURL(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFreebusyExchangeURL, "");
        return attrs;
    }

    /**
     * O and OU used in legacyExchangeDN attribute
     *
     * @return zmailFreebusyExchangeUserOrg, or null if unset
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=610)
    public String getFreebusyExchangeUserOrg() {
        return getAttr(Provisioning.A_zmailFreebusyExchangeUserOrg, null);
    }

    /**
     * O and OU used in legacyExchangeDN attribute
     *
     * @param zmailFreebusyExchangeUserOrg new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=610)
    public void setFreebusyExchangeUserOrg(String zmailFreebusyExchangeUserOrg) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFreebusyExchangeUserOrg, zmailFreebusyExchangeUserOrg);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * O and OU used in legacyExchangeDN attribute
     *
     * @param zmailFreebusyExchangeUserOrg new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=610)
    public Map<String,Object> setFreebusyExchangeUserOrg(String zmailFreebusyExchangeUserOrg, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFreebusyExchangeUserOrg, zmailFreebusyExchangeUserOrg);
        return attrs;
    }

    /**
     * O and OU used in legacyExchangeDN attribute
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=610)
    public void unsetFreebusyExchangeUserOrg() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFreebusyExchangeUserOrg, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * O and OU used in legacyExchangeDN attribute
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=610)
    public Map<String,Object> unsetFreebusyExchangeUserOrg(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFreebusyExchangeUserOrg, "");
        return attrs;
    }

    /**
     * when set to TRUE, free/busy for the account is not calculated from
     * local mailbox.
     *
     * @return zmailFreebusyLocalMailboxNotActive, or false if unset
     *
     * @since ZCS 5.0.11
     */
    @ZAttr(id=752)
    public boolean isFreebusyLocalMailboxNotActive() {
        return getBooleanAttr(Provisioning.A_zmailFreebusyLocalMailboxNotActive, false);
    }

    /**
     * when set to TRUE, free/busy for the account is not calculated from
     * local mailbox.
     *
     * @param zmailFreebusyLocalMailboxNotActive new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.11
     */
    @ZAttr(id=752)
    public void setFreebusyLocalMailboxNotActive(boolean zmailFreebusyLocalMailboxNotActive) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFreebusyLocalMailboxNotActive, zmailFreebusyLocalMailboxNotActive ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * when set to TRUE, free/busy for the account is not calculated from
     * local mailbox.
     *
     * @param zmailFreebusyLocalMailboxNotActive new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.11
     */
    @ZAttr(id=752)
    public Map<String,Object> setFreebusyLocalMailboxNotActive(boolean zmailFreebusyLocalMailboxNotActive, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFreebusyLocalMailboxNotActive, zmailFreebusyLocalMailboxNotActive ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * when set to TRUE, free/busy for the account is not calculated from
     * local mailbox.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.11
     */
    @ZAttr(id=752)
    public void unsetFreebusyLocalMailboxNotActive() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFreebusyLocalMailboxNotActive, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * when set to TRUE, free/busy for the account is not calculated from
     * local mailbox.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.11
     */
    @ZAttr(id=752)
    public Map<String,Object> unsetFreebusyLocalMailboxNotActive(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailFreebusyLocalMailboxNotActive, "");
        return attrs;
    }

    /**
     * whether to use gal sync account for autocomplete
     *
     * @return zmailGalSyncAccountBasedAutoCompleteEnabled, or true if unset
     *
     * @since ZCS 6.0.0_BETA2
     */
    @ZAttr(id=1027)
    public boolean isGalSyncAccountBasedAutoCompleteEnabled() {
        return getBooleanAttr(Provisioning.A_zmailGalSyncAccountBasedAutoCompleteEnabled, true);
    }

    /**
     * whether to use gal sync account for autocomplete
     *
     * @param zmailGalSyncAccountBasedAutoCompleteEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA2
     */
    @ZAttr(id=1027)
    public void setGalSyncAccountBasedAutoCompleteEnabled(boolean zmailGalSyncAccountBasedAutoCompleteEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailGalSyncAccountBasedAutoCompleteEnabled, zmailGalSyncAccountBasedAutoCompleteEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to use gal sync account for autocomplete
     *
     * @param zmailGalSyncAccountBasedAutoCompleteEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA2
     */
    @ZAttr(id=1027)
    public Map<String,Object> setGalSyncAccountBasedAutoCompleteEnabled(boolean zmailGalSyncAccountBasedAutoCompleteEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailGalSyncAccountBasedAutoCompleteEnabled, zmailGalSyncAccountBasedAutoCompleteEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether to use gal sync account for autocomplete
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA2
     */
    @ZAttr(id=1027)
    public void unsetGalSyncAccountBasedAutoCompleteEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailGalSyncAccountBasedAutoCompleteEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to use gal sync account for autocomplete
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA2
     */
    @ZAttr(id=1027)
    public Map<String,Object> unsetGalSyncAccountBasedAutoCompleteEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailGalSyncAccountBasedAutoCompleteEnabled, "");
        return attrs;
    }

    /**
     * available IM interop gateways
     *
     * @return zmailIMAvailableInteropGateways, or empty array if unset
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=571)
    public String[] getIMAvailableInteropGateways() {
        return getMultiAttr(Provisioning.A_zmailIMAvailableInteropGateways);
    }

    /**
     * available IM interop gateways
     *
     * @param zmailIMAvailableInteropGateways new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=571)
    public void setIMAvailableInteropGateways(String[] zmailIMAvailableInteropGateways) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailIMAvailableInteropGateways, zmailIMAvailableInteropGateways);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * available IM interop gateways
     *
     * @param zmailIMAvailableInteropGateways new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=571)
    public Map<String,Object> setIMAvailableInteropGateways(String[] zmailIMAvailableInteropGateways, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailIMAvailableInteropGateways, zmailIMAvailableInteropGateways);
        return attrs;
    }

    /**
     * available IM interop gateways
     *
     * @param zmailIMAvailableInteropGateways new to add to existing values
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=571)
    public void addIMAvailableInteropGateways(String zmailIMAvailableInteropGateways) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "+" + Provisioning.A_zmailIMAvailableInteropGateways, zmailIMAvailableInteropGateways);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * available IM interop gateways
     *
     * @param zmailIMAvailableInteropGateways new to add to existing values
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=571)
    public Map<String,Object> addIMAvailableInteropGateways(String zmailIMAvailableInteropGateways, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "+" + Provisioning.A_zmailIMAvailableInteropGateways, zmailIMAvailableInteropGateways);
        return attrs;
    }

    /**
     * available IM interop gateways
     *
     * @param zmailIMAvailableInteropGateways existing value to remove
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=571)
    public void removeIMAvailableInteropGateways(String zmailIMAvailableInteropGateways) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "-" + Provisioning.A_zmailIMAvailableInteropGateways, zmailIMAvailableInteropGateways);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * available IM interop gateways
     *
     * @param zmailIMAvailableInteropGateways existing value to remove
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=571)
    public Map<String,Object> removeIMAvailableInteropGateways(String zmailIMAvailableInteropGateways, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "-" + Provisioning.A_zmailIMAvailableInteropGateways, zmailIMAvailableInteropGateways);
        return attrs;
    }

    /**
     * available IM interop gateways
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=571)
    public void unsetIMAvailableInteropGateways() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailIMAvailableInteropGateways, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * available IM interop gateways
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=571)
    public Map<String,Object> unsetIMAvailableInteropGateways(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailIMAvailableInteropGateways, "");
        return attrs;
    }

    /**
     * Deprecated since: 6.0.0_GA. deprecated per bug 40069. Orig desc: IM
     * service
     *
     * <p>Valid values: [zmail, yahoo]
     *
     * @return zmailIMService, or ZAttrProvisioning.IMService.zmail if unset and/or has invalid value
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=762)
    public ZAttrProvisioning.IMService getIMService() {
        try { String v = getAttr(Provisioning.A_zmailIMService); return v == null ? ZAttrProvisioning.IMService.zmail : ZAttrProvisioning.IMService.fromString(v); } catch(org.zmail.common.service.ServiceException e) { return ZAttrProvisioning.IMService.zmail; }
    }

    /**
     * Deprecated since: 6.0.0_GA. deprecated per bug 40069. Orig desc: IM
     * service
     *
     * <p>Valid values: [zmail, yahoo]
     *
     * @return zmailIMService, or "zmail" if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=762)
    public String getIMServiceAsString() {
        return getAttr(Provisioning.A_zmailIMService, "zmail");
    }

    /**
     * Deprecated since: 6.0.0_GA. deprecated per bug 40069. Orig desc: IM
     * service
     *
     * <p>Valid values: [zmail, yahoo]
     *
     * @param zmailIMService new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=762)
    public void setIMService(ZAttrProvisioning.IMService zmailIMService) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailIMService, zmailIMService.toString());
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Deprecated since: 6.0.0_GA. deprecated per bug 40069. Orig desc: IM
     * service
     *
     * <p>Valid values: [zmail, yahoo]
     *
     * @param zmailIMService new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=762)
    public Map<String,Object> setIMService(ZAttrProvisioning.IMService zmailIMService, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailIMService, zmailIMService.toString());
        return attrs;
    }

    /**
     * Deprecated since: 6.0.0_GA. deprecated per bug 40069. Orig desc: IM
     * service
     *
     * <p>Valid values: [zmail, yahoo]
     *
     * @param zmailIMService new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=762)
    public void setIMServiceAsString(String zmailIMService) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailIMService, zmailIMService);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Deprecated since: 6.0.0_GA. deprecated per bug 40069. Orig desc: IM
     * service
     *
     * <p>Valid values: [zmail, yahoo]
     *
     * @param zmailIMService new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=762)
    public Map<String,Object> setIMServiceAsString(String zmailIMService, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailIMService, zmailIMService);
        return attrs;
    }

    /**
     * Deprecated since: 6.0.0_GA. deprecated per bug 40069. Orig desc: IM
     * service
     *
     * <p>Valid values: [zmail, yahoo]
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=762)
    public void unsetIMService() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailIMService, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Deprecated since: 6.0.0_GA. deprecated per bug 40069. Orig desc: IM
     * service
     *
     * <p>Valid values: [zmail, yahoo]
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=762)
    public Map<String,Object> unsetIMService(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailIMService, "");
        return attrs;
    }

    /**
     * Zmail Systems Unique ID
     *
     * @return zmailId, or null if unset
     */
    @ZAttr(id=1)
    public String getId() {
        return getAttr(Provisioning.A_zmailId, null);
    }

    /**
     * Zmail Systems Unique ID
     *
     * @param zmailId new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=1)
    public void setId(String zmailId) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailId, zmailId);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Zmail Systems Unique ID
     *
     * @param zmailId new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=1)
    public Map<String,Object> setId(String zmailId, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailId, zmailId);
        return attrs;
    }

    /**
     * Zmail Systems Unique ID
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=1)
    public void unsetId() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailId, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Zmail Systems Unique ID
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=1)
    public Map<String,Object> unsetId(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailId, "");
        return attrs;
    }

    /**
     * maximum number of identities allowed on an account
     *
     * @return zmailIdentityMaxNumEntries, or 20 if unset
     */
    @ZAttr(id=414)
    public int getIdentityMaxNumEntries() {
        return getIntAttr(Provisioning.A_zmailIdentityMaxNumEntries, 20);
    }

    /**
     * maximum number of identities allowed on an account
     *
     * @param zmailIdentityMaxNumEntries new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=414)
    public void setIdentityMaxNumEntries(int zmailIdentityMaxNumEntries) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailIdentityMaxNumEntries, Integer.toString(zmailIdentityMaxNumEntries));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * maximum number of identities allowed on an account
     *
     * @param zmailIdentityMaxNumEntries new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=414)
    public Map<String,Object> setIdentityMaxNumEntries(int zmailIdentityMaxNumEntries, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailIdentityMaxNumEntries, Integer.toString(zmailIdentityMaxNumEntries));
        return attrs;
    }

    /**
     * maximum number of identities allowed on an account
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=414)
    public void unsetIdentityMaxNumEntries() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailIdentityMaxNumEntries, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * maximum number of identities allowed on an account
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=414)
    public Map<String,Object> unsetIdentityMaxNumEntries(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailIdentityMaxNumEntries, "");
        return attrs;
    }

    /**
     * whether IMAP is enabled for an account
     *
     * @return zmailImapEnabled, or true if unset
     */
    @ZAttr(id=174)
    public boolean isImapEnabled() {
        return getBooleanAttr(Provisioning.A_zmailImapEnabled, true);
    }

    /**
     * whether IMAP is enabled for an account
     *
     * @param zmailImapEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=174)
    public void setImapEnabled(boolean zmailImapEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailImapEnabled, zmailImapEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether IMAP is enabled for an account
     *
     * @param zmailImapEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=174)
    public Map<String,Object> setImapEnabled(boolean zmailImapEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailImapEnabled, zmailImapEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether IMAP is enabled for an account
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=174)
    public void unsetImapEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailImapEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether IMAP is enabled for an account
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=174)
    public Map<String,Object> unsetImapEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailImapEnabled, "");
        return attrs;
    }

    /**
     * The address to which legal intercept messages will be sent.
     *
     * @return zmailInterceptAddress, or empty array if unset
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=614)
    public String[] getInterceptAddress() {
        return getMultiAttr(Provisioning.A_zmailInterceptAddress);
    }

    /**
     * The address to which legal intercept messages will be sent.
     *
     * @param zmailInterceptAddress new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=614)
    public void setInterceptAddress(String[] zmailInterceptAddress) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailInterceptAddress, zmailInterceptAddress);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * The address to which legal intercept messages will be sent.
     *
     * @param zmailInterceptAddress new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=614)
    public Map<String,Object> setInterceptAddress(String[] zmailInterceptAddress, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailInterceptAddress, zmailInterceptAddress);
        return attrs;
    }

    /**
     * The address to which legal intercept messages will be sent.
     *
     * @param zmailInterceptAddress new to add to existing values
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=614)
    public void addInterceptAddress(String zmailInterceptAddress) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "+" + Provisioning.A_zmailInterceptAddress, zmailInterceptAddress);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * The address to which legal intercept messages will be sent.
     *
     * @param zmailInterceptAddress new to add to existing values
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=614)
    public Map<String,Object> addInterceptAddress(String zmailInterceptAddress, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "+" + Provisioning.A_zmailInterceptAddress, zmailInterceptAddress);
        return attrs;
    }

    /**
     * The address to which legal intercept messages will be sent.
     *
     * @param zmailInterceptAddress existing value to remove
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=614)
    public void removeInterceptAddress(String zmailInterceptAddress) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "-" + Provisioning.A_zmailInterceptAddress, zmailInterceptAddress);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * The address to which legal intercept messages will be sent.
     *
     * @param zmailInterceptAddress existing value to remove
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=614)
    public Map<String,Object> removeInterceptAddress(String zmailInterceptAddress, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "-" + Provisioning.A_zmailInterceptAddress, zmailInterceptAddress);
        return attrs;
    }

    /**
     * The address to which legal intercept messages will be sent.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=614)
    public void unsetInterceptAddress() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailInterceptAddress, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * The address to which legal intercept messages will be sent.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=614)
    public Map<String,Object> unsetInterceptAddress(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailInterceptAddress, "");
        return attrs;
    }

    /**
     * Template used to construct the body of a legal intercept message.
     *
     * @return zmailInterceptBody, or "Intercepted message for ${ACCOUNT_ADDRESS}.${NEWLINE}Operation=${OPERATION}, folder=${FOLDER_NAME}, folder ID=${FOLDER_ID}." if unset
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=618)
    public String getInterceptBody() {
        return getAttr(Provisioning.A_zmailInterceptBody, "Intercepted message for ${ACCOUNT_ADDRESS}.${NEWLINE}Operation=${OPERATION}, folder=${FOLDER_NAME}, folder ID=${FOLDER_ID}.");
    }

    /**
     * Template used to construct the body of a legal intercept message.
     *
     * @param zmailInterceptBody new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=618)
    public void setInterceptBody(String zmailInterceptBody) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailInterceptBody, zmailInterceptBody);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Template used to construct the body of a legal intercept message.
     *
     * @param zmailInterceptBody new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=618)
    public Map<String,Object> setInterceptBody(String zmailInterceptBody, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailInterceptBody, zmailInterceptBody);
        return attrs;
    }

    /**
     * Template used to construct the body of a legal intercept message.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=618)
    public void unsetInterceptBody() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailInterceptBody, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Template used to construct the body of a legal intercept message.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=618)
    public Map<String,Object> unsetInterceptBody(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailInterceptBody, "");
        return attrs;
    }

    /**
     * Template used to construct the sender of a legal intercept message.
     *
     * @return zmailInterceptFrom, or "Postmaster <postmaster@${ACCOUNT_DOMAIN}>" if unset
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=616)
    public String getInterceptFrom() {
        return getAttr(Provisioning.A_zmailInterceptFrom, "Postmaster <postmaster@${ACCOUNT_DOMAIN}>");
    }

    /**
     * Template used to construct the sender of a legal intercept message.
     *
     * @param zmailInterceptFrom new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=616)
    public void setInterceptFrom(String zmailInterceptFrom) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailInterceptFrom, zmailInterceptFrom);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Template used to construct the sender of a legal intercept message.
     *
     * @param zmailInterceptFrom new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=616)
    public Map<String,Object> setInterceptFrom(String zmailInterceptFrom, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailInterceptFrom, zmailInterceptFrom);
        return attrs;
    }

    /**
     * Template used to construct the sender of a legal intercept message.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=616)
    public void unsetInterceptFrom() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailInterceptFrom, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Template used to construct the sender of a legal intercept message.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=616)
    public Map<String,Object> unsetInterceptFrom(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailInterceptFrom, "");
        return attrs;
    }

    /**
     * Specifies whether legal intercept messages should contain the entire
     * original message or just the headers.
     *
     * @return zmailInterceptSendHeadersOnly, or false if unset
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=615)
    public boolean isInterceptSendHeadersOnly() {
        return getBooleanAttr(Provisioning.A_zmailInterceptSendHeadersOnly, false);
    }

    /**
     * Specifies whether legal intercept messages should contain the entire
     * original message or just the headers.
     *
     * @param zmailInterceptSendHeadersOnly new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=615)
    public void setInterceptSendHeadersOnly(boolean zmailInterceptSendHeadersOnly) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailInterceptSendHeadersOnly, zmailInterceptSendHeadersOnly ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Specifies whether legal intercept messages should contain the entire
     * original message or just the headers.
     *
     * @param zmailInterceptSendHeadersOnly new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=615)
    public Map<String,Object> setInterceptSendHeadersOnly(boolean zmailInterceptSendHeadersOnly, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailInterceptSendHeadersOnly, zmailInterceptSendHeadersOnly ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * Specifies whether legal intercept messages should contain the entire
     * original message or just the headers.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=615)
    public void unsetInterceptSendHeadersOnly() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailInterceptSendHeadersOnly, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Specifies whether legal intercept messages should contain the entire
     * original message or just the headers.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=615)
    public Map<String,Object> unsetInterceptSendHeadersOnly(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailInterceptSendHeadersOnly, "");
        return attrs;
    }

    /**
     * Template used to construct the subject of a legal intercept message.
     *
     * @return zmailInterceptSubject, or "Intercepted message for ${ACCOUNT_ADDRESS}: ${MESSAGE_SUBJECT}" if unset
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=617)
    public String getInterceptSubject() {
        return getAttr(Provisioning.A_zmailInterceptSubject, "Intercepted message for ${ACCOUNT_ADDRESS}: ${MESSAGE_SUBJECT}");
    }

    /**
     * Template used to construct the subject of a legal intercept message.
     *
     * @param zmailInterceptSubject new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=617)
    public void setInterceptSubject(String zmailInterceptSubject) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailInterceptSubject, zmailInterceptSubject);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Template used to construct the subject of a legal intercept message.
     *
     * @param zmailInterceptSubject new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=617)
    public Map<String,Object> setInterceptSubject(String zmailInterceptSubject, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailInterceptSubject, zmailInterceptSubject);
        return attrs;
    }

    /**
     * Template used to construct the subject of a legal intercept message.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=617)
    public void unsetInterceptSubject() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailInterceptSubject, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Template used to construct the subject of a legal intercept message.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.3
     */
    @ZAttr(id=617)
    public Map<String,Object> unsetInterceptSubject(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailInterceptSubject, "");
        return attrs;
    }

    /**
     * additional domains considered as internal w.r.t. recipient
     *
     * @return zmailInternalSendersDomain, or empty array if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1319)
    public String[] getInternalSendersDomain() {
        return getMultiAttr(Provisioning.A_zmailInternalSendersDomain);
    }

    /**
     * additional domains considered as internal w.r.t. recipient
     *
     * @param zmailInternalSendersDomain new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1319)
    public void setInternalSendersDomain(String[] zmailInternalSendersDomain) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailInternalSendersDomain, zmailInternalSendersDomain);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * additional domains considered as internal w.r.t. recipient
     *
     * @param zmailInternalSendersDomain new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1319)
    public Map<String,Object> setInternalSendersDomain(String[] zmailInternalSendersDomain, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailInternalSendersDomain, zmailInternalSendersDomain);
        return attrs;
    }

    /**
     * additional domains considered as internal w.r.t. recipient
     *
     * @param zmailInternalSendersDomain new to add to existing values
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1319)
    public void addInternalSendersDomain(String zmailInternalSendersDomain) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "+" + Provisioning.A_zmailInternalSendersDomain, zmailInternalSendersDomain);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * additional domains considered as internal w.r.t. recipient
     *
     * @param zmailInternalSendersDomain new to add to existing values
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1319)
    public Map<String,Object> addInternalSendersDomain(String zmailInternalSendersDomain, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "+" + Provisioning.A_zmailInternalSendersDomain, zmailInternalSendersDomain);
        return attrs;
    }

    /**
     * additional domains considered as internal w.r.t. recipient
     *
     * @param zmailInternalSendersDomain existing value to remove
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1319)
    public void removeInternalSendersDomain(String zmailInternalSendersDomain) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "-" + Provisioning.A_zmailInternalSendersDomain, zmailInternalSendersDomain);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * additional domains considered as internal w.r.t. recipient
     *
     * @param zmailInternalSendersDomain existing value to remove
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1319)
    public Map<String,Object> removeInternalSendersDomain(String zmailInternalSendersDomain, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "-" + Provisioning.A_zmailInternalSendersDomain, zmailInternalSendersDomain);
        return attrs;
    }

    /**
     * additional domains considered as internal w.r.t. recipient
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1319)
    public void unsetInternalSendersDomain() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailInternalSendersDomain, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * additional domains considered as internal w.r.t. recipient
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1319)
    public Map<String,Object> unsetInternalSendersDomain(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailInternalSendersDomain, "");
        return attrs;
    }

    /**
     * Whether to index junk messages
     *
     * @return zmailJunkMessagesIndexingEnabled, or true if unset
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=579)
    public boolean isJunkMessagesIndexingEnabled() {
        return getBooleanAttr(Provisioning.A_zmailJunkMessagesIndexingEnabled, true);
    }

    /**
     * Whether to index junk messages
     *
     * @param zmailJunkMessagesIndexingEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=579)
    public void setJunkMessagesIndexingEnabled(boolean zmailJunkMessagesIndexingEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailJunkMessagesIndexingEnabled, zmailJunkMessagesIndexingEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Whether to index junk messages
     *
     * @param zmailJunkMessagesIndexingEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=579)
    public Map<String,Object> setJunkMessagesIndexingEnabled(boolean zmailJunkMessagesIndexingEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailJunkMessagesIndexingEnabled, zmailJunkMessagesIndexingEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * Whether to index junk messages
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=579)
    public void unsetJunkMessagesIndexingEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailJunkMessagesIndexingEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Whether to index junk messages
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=579)
    public Map<String,Object> unsetJunkMessagesIndexingEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailJunkMessagesIndexingEnabled, "");
        return attrs;
    }

    /**
     * locale of entry, e.g. en_US
     *
     * @return zmailLocale, or null if unset
     */
    @ZAttr(id=345)
    public String getLocaleAsString() {
        return getAttr(Provisioning.A_zmailLocale, null);
    }

    /**
     * locale of entry, e.g. en_US
     *
     * @param zmailLocale new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=345)
    public void setLocale(String zmailLocale) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailLocale, zmailLocale);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * locale of entry, e.g. en_US
     *
     * @param zmailLocale new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=345)
    public Map<String,Object> setLocale(String zmailLocale, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailLocale, zmailLocale);
        return attrs;
    }

    /**
     * locale of entry, e.g. en_US
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=345)
    public void unsetLocale() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailLocale, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * locale of entry, e.g. en_US
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=345)
    public Map<String,Object> unsetLocale(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailLocale, "");
        return attrs;
    }

    /**
     * If TRUE, a mailbox that exceeds its quota is still allowed to receive
     * mail, but is not allowed to send.
     *
     * @return zmailMailAllowReceiveButNotSendWhenOverQuota, or false if unset
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1099)
    public boolean isMailAllowReceiveButNotSendWhenOverQuota() {
        return getBooleanAttr(Provisioning.A_zmailMailAllowReceiveButNotSendWhenOverQuota, false);
    }

    /**
     * If TRUE, a mailbox that exceeds its quota is still allowed to receive
     * mail, but is not allowed to send.
     *
     * @param zmailMailAllowReceiveButNotSendWhenOverQuota new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1099)
    public void setMailAllowReceiveButNotSendWhenOverQuota(boolean zmailMailAllowReceiveButNotSendWhenOverQuota) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailAllowReceiveButNotSendWhenOverQuota, zmailMailAllowReceiveButNotSendWhenOverQuota ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * If TRUE, a mailbox that exceeds its quota is still allowed to receive
     * mail, but is not allowed to send.
     *
     * @param zmailMailAllowReceiveButNotSendWhenOverQuota new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1099)
    public Map<String,Object> setMailAllowReceiveButNotSendWhenOverQuota(boolean zmailMailAllowReceiveButNotSendWhenOverQuota, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailAllowReceiveButNotSendWhenOverQuota, zmailMailAllowReceiveButNotSendWhenOverQuota ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * If TRUE, a mailbox that exceeds its quota is still allowed to receive
     * mail, but is not allowed to send.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1099)
    public void unsetMailAllowReceiveButNotSendWhenOverQuota() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailAllowReceiveButNotSendWhenOverQuota, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * If TRUE, a mailbox that exceeds its quota is still allowed to receive
     * mail, but is not allowed to send.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1099)
    public Map<String,Object> unsetMailAllowReceiveButNotSendWhenOverQuota(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailAllowReceiveButNotSendWhenOverQuota, "");
        return attrs;
    }

    /**
     * Maximum number of entries for per user black list. This restricts the
     * number of values that can be set on the amavisBlacklistSender
     * attribute of an account. If set to 0, the per user white list feature
     * is disabled.
     *
     * @return zmailMailBlacklistMaxNumEntries, or 100 if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=799)
    public int getMailBlacklistMaxNumEntries() {
        return getIntAttr(Provisioning.A_zmailMailBlacklistMaxNumEntries, 100);
    }

    /**
     * Maximum number of entries for per user black list. This restricts the
     * number of values that can be set on the amavisBlacklistSender
     * attribute of an account. If set to 0, the per user white list feature
     * is disabled.
     *
     * @param zmailMailBlacklistMaxNumEntries new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=799)
    public void setMailBlacklistMaxNumEntries(int zmailMailBlacklistMaxNumEntries) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailBlacklistMaxNumEntries, Integer.toString(zmailMailBlacklistMaxNumEntries));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Maximum number of entries for per user black list. This restricts the
     * number of values that can be set on the amavisBlacklistSender
     * attribute of an account. If set to 0, the per user white list feature
     * is disabled.
     *
     * @param zmailMailBlacklistMaxNumEntries new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=799)
    public Map<String,Object> setMailBlacklistMaxNumEntries(int zmailMailBlacklistMaxNumEntries, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailBlacklistMaxNumEntries, Integer.toString(zmailMailBlacklistMaxNumEntries));
        return attrs;
    }

    /**
     * Maximum number of entries for per user black list. This restricts the
     * number of values that can be set on the amavisBlacklistSender
     * attribute of an account. If set to 0, the per user white list feature
     * is disabled.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=799)
    public void unsetMailBlacklistMaxNumEntries() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailBlacklistMaxNumEntries, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Maximum number of entries for per user black list. This restricts the
     * number of values that can be set on the amavisBlacklistSender
     * attribute of an account. If set to 0, the per user white list feature
     * is disabled.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=799)
    public Map<String,Object> unsetMailBlacklistMaxNumEntries(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailBlacklistMaxNumEntries, "");
        return attrs;
    }

    /**
     * Retention period of messages in the dumpster. 0 means that all
     * messages will be retained. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * <p>Use getMailDumpsterLifetimeAsString to access value as a string.
     *
     * @see #getMailDumpsterLifetimeAsString()
     *
     * @return zmailMailDumpsterLifetime in millseconds, or 2592000000 (30d)  if unset
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1133)
    public long getMailDumpsterLifetime() {
        return getTimeInterval(Provisioning.A_zmailMailDumpsterLifetime, 2592000000L);
    }

    /**
     * Retention period of messages in the dumpster. 0 means that all
     * messages will be retained. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @return zmailMailDumpsterLifetime, or "30d" if unset
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1133)
    public String getMailDumpsterLifetimeAsString() {
        return getAttr(Provisioning.A_zmailMailDumpsterLifetime, "30d");
    }

    /**
     * Retention period of messages in the dumpster. 0 means that all
     * messages will be retained. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param zmailMailDumpsterLifetime new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1133)
    public void setMailDumpsterLifetime(String zmailMailDumpsterLifetime) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailDumpsterLifetime, zmailMailDumpsterLifetime);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Retention period of messages in the dumpster. 0 means that all
     * messages will be retained. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param zmailMailDumpsterLifetime new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1133)
    public Map<String,Object> setMailDumpsterLifetime(String zmailMailDumpsterLifetime, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailDumpsterLifetime, zmailMailDumpsterLifetime);
        return attrs;
    }

    /**
     * Retention period of messages in the dumpster. 0 means that all
     * messages will be retained. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1133)
    public void unsetMailDumpsterLifetime() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailDumpsterLifetime, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Retention period of messages in the dumpster. 0 means that all
     * messages will be retained. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1133)
    public Map<String,Object> unsetMailDumpsterLifetime(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailDumpsterLifetime, "");
        return attrs;
    }

    /**
     * max number of chars in zmailPrefMailForwardingAddress
     *
     * @return zmailMailForwardingAddressMaxLength, or 4096 if unset
     *
     * @since ZCS 6.0.0_RC1
     */
    @ZAttr(id=1039)
    public int getMailForwardingAddressMaxLength() {
        return getIntAttr(Provisioning.A_zmailMailForwardingAddressMaxLength, 4096);
    }

    /**
     * max number of chars in zmailPrefMailForwardingAddress
     *
     * @param zmailMailForwardingAddressMaxLength new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_RC1
     */
    @ZAttr(id=1039)
    public void setMailForwardingAddressMaxLength(int zmailMailForwardingAddressMaxLength) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailForwardingAddressMaxLength, Integer.toString(zmailMailForwardingAddressMaxLength));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * max number of chars in zmailPrefMailForwardingAddress
     *
     * @param zmailMailForwardingAddressMaxLength new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_RC1
     */
    @ZAttr(id=1039)
    public Map<String,Object> setMailForwardingAddressMaxLength(int zmailMailForwardingAddressMaxLength, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailForwardingAddressMaxLength, Integer.toString(zmailMailForwardingAddressMaxLength));
        return attrs;
    }

    /**
     * max number of chars in zmailPrefMailForwardingAddress
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_RC1
     */
    @ZAttr(id=1039)
    public void unsetMailForwardingAddressMaxLength() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailForwardingAddressMaxLength, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * max number of chars in zmailPrefMailForwardingAddress
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_RC1
     */
    @ZAttr(id=1039)
    public Map<String,Object> unsetMailForwardingAddressMaxLength(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailForwardingAddressMaxLength, "");
        return attrs;
    }

    /**
     * max number of email addresses in zmailPrefMailForwardingAddress
     *
     * @return zmailMailForwardingAddressMaxNumAddrs, or 100 if unset
     *
     * @since ZCS 6.0.0_RC1
     */
    @ZAttr(id=1040)
    public int getMailForwardingAddressMaxNumAddrs() {
        return getIntAttr(Provisioning.A_zmailMailForwardingAddressMaxNumAddrs, 100);
    }

    /**
     * max number of email addresses in zmailPrefMailForwardingAddress
     *
     * @param zmailMailForwardingAddressMaxNumAddrs new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_RC1
     */
    @ZAttr(id=1040)
    public void setMailForwardingAddressMaxNumAddrs(int zmailMailForwardingAddressMaxNumAddrs) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailForwardingAddressMaxNumAddrs, Integer.toString(zmailMailForwardingAddressMaxNumAddrs));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * max number of email addresses in zmailPrefMailForwardingAddress
     *
     * @param zmailMailForwardingAddressMaxNumAddrs new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_RC1
     */
    @ZAttr(id=1040)
    public Map<String,Object> setMailForwardingAddressMaxNumAddrs(int zmailMailForwardingAddressMaxNumAddrs, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailForwardingAddressMaxNumAddrs, Integer.toString(zmailMailForwardingAddressMaxNumAddrs));
        return attrs;
    }

    /**
     * max number of email addresses in zmailPrefMailForwardingAddress
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_RC1
     */
    @ZAttr(id=1040)
    public void unsetMailForwardingAddressMaxNumAddrs() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailForwardingAddressMaxNumAddrs, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * max number of email addresses in zmailPrefMailForwardingAddress
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_RC1
     */
    @ZAttr(id=1040)
    public Map<String,Object> unsetMailForwardingAddressMaxNumAddrs(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailForwardingAddressMaxNumAddrs, "");
        return attrs;
    }

    /**
     * max size in KB of text emails that will automatically highlight
     * objects
     *
     * @return zmailMailHighlightObjectsMaxSize, or 70 if unset
     *
     * @since ZCS 7.1.2
     */
    @ZAttr(id=1213)
    public int getMailHighlightObjectsMaxSize() {
        return getIntAttr(Provisioning.A_zmailMailHighlightObjectsMaxSize, 70);
    }

    /**
     * max size in KB of text emails that will automatically highlight
     * objects
     *
     * @param zmailMailHighlightObjectsMaxSize new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.1.2
     */
    @ZAttr(id=1213)
    public void setMailHighlightObjectsMaxSize(int zmailMailHighlightObjectsMaxSize) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailHighlightObjectsMaxSize, Integer.toString(zmailMailHighlightObjectsMaxSize));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * max size in KB of text emails that will automatically highlight
     * objects
     *
     * @param zmailMailHighlightObjectsMaxSize new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.1.2
     */
    @ZAttr(id=1213)
    public Map<String,Object> setMailHighlightObjectsMaxSize(int zmailMailHighlightObjectsMaxSize, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailHighlightObjectsMaxSize, Integer.toString(zmailMailHighlightObjectsMaxSize));
        return attrs;
    }

    /**
     * max size in KB of text emails that will automatically highlight
     * objects
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.1.2
     */
    @ZAttr(id=1213)
    public void unsetMailHighlightObjectsMaxSize() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailHighlightObjectsMaxSize, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * max size in KB of text emails that will automatically highlight
     * objects
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.1.2
     */
    @ZAttr(id=1213)
    public Map<String,Object> unsetMailHighlightObjectsMaxSize(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailHighlightObjectsMaxSize, "");
        return attrs;
    }

    /**
     * servers that an account can be initially provisioned on
     *
     * @return zmailMailHostPool, or empty array if unset
     */
    @ZAttr(id=125)
    public String[] getMailHostPool() {
        return getMultiAttr(Provisioning.A_zmailMailHostPool);
    }

    /**
     * servers that an account can be initially provisioned on
     *
     * @param zmailMailHostPool new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=125)
    public void setMailHostPool(String[] zmailMailHostPool) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailHostPool, zmailMailHostPool);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * servers that an account can be initially provisioned on
     *
     * @param zmailMailHostPool new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=125)
    public Map<String,Object> setMailHostPool(String[] zmailMailHostPool, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailHostPool, zmailMailHostPool);
        return attrs;
    }

    /**
     * servers that an account can be initially provisioned on
     *
     * @param zmailMailHostPool new to add to existing values
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=125)
    public void addMailHostPool(String zmailMailHostPool) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "+" + Provisioning.A_zmailMailHostPool, zmailMailHostPool);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * servers that an account can be initially provisioned on
     *
     * @param zmailMailHostPool new to add to existing values
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=125)
    public Map<String,Object> addMailHostPool(String zmailMailHostPool, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "+" + Provisioning.A_zmailMailHostPool, zmailMailHostPool);
        return attrs;
    }

    /**
     * servers that an account can be initially provisioned on
     *
     * @param zmailMailHostPool existing value to remove
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=125)
    public void removeMailHostPool(String zmailMailHostPool) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "-" + Provisioning.A_zmailMailHostPool, zmailMailHostPool);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * servers that an account can be initially provisioned on
     *
     * @param zmailMailHostPool existing value to remove
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=125)
    public Map<String,Object> removeMailHostPool(String zmailMailHostPool, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "-" + Provisioning.A_zmailMailHostPool, zmailMailHostPool);
        return attrs;
    }

    /**
     * servers that an account can be initially provisioned on
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=125)
    public void unsetMailHostPool() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailHostPool, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * servers that an account can be initially provisioned on
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=125)
    public Map<String,Object> unsetMailHostPool(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailHostPool, "");
        return attrs;
    }

    /**
     * idle timeout. Must be in valid duration format: {digits}{time-unit}.
     * digits: 0-9, time-unit: [hmsd]|ms. h - hours, m - minutes, s -
     * seconds, d - days, ms - milliseconds. If time unit is not specified,
     * the default is s(seconds).
     *
     * <p>Use getMailIdleSessionTimeoutAsString to access value as a string.
     *
     * @see #getMailIdleSessionTimeoutAsString()
     *
     * @return zmailMailIdleSessionTimeout in millseconds, or 0 (0)  if unset
     */
    @ZAttr(id=147)
    public long getMailIdleSessionTimeout() {
        return getTimeInterval(Provisioning.A_zmailMailIdleSessionTimeout, 0L);
    }

    /**
     * idle timeout. Must be in valid duration format: {digits}{time-unit}.
     * digits: 0-9, time-unit: [hmsd]|ms. h - hours, m - minutes, s -
     * seconds, d - days, ms - milliseconds. If time unit is not specified,
     * the default is s(seconds).
     *
     * @return zmailMailIdleSessionTimeout, or "0" if unset
     */
    @ZAttr(id=147)
    public String getMailIdleSessionTimeoutAsString() {
        return getAttr(Provisioning.A_zmailMailIdleSessionTimeout, "0");
    }

    /**
     * idle timeout. Must be in valid duration format: {digits}{time-unit}.
     * digits: 0-9, time-unit: [hmsd]|ms. h - hours, m - minutes, s -
     * seconds, d - days, ms - milliseconds. If time unit is not specified,
     * the default is s(seconds).
     *
     * @param zmailMailIdleSessionTimeout new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=147)
    public void setMailIdleSessionTimeout(String zmailMailIdleSessionTimeout) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailIdleSessionTimeout, zmailMailIdleSessionTimeout);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * idle timeout. Must be in valid duration format: {digits}{time-unit}.
     * digits: 0-9, time-unit: [hmsd]|ms. h - hours, m - minutes, s -
     * seconds, d - days, ms - milliseconds. If time unit is not specified,
     * the default is s(seconds).
     *
     * @param zmailMailIdleSessionTimeout new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=147)
    public Map<String,Object> setMailIdleSessionTimeout(String zmailMailIdleSessionTimeout, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailIdleSessionTimeout, zmailMailIdleSessionTimeout);
        return attrs;
    }

    /**
     * idle timeout. Must be in valid duration format: {digits}{time-unit}.
     * digits: 0-9, time-unit: [hmsd]|ms. h - hours, m - minutes, s -
     * seconds, d - days, ms - milliseconds. If time unit is not specified,
     * the default is s(seconds).
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=147)
    public void unsetMailIdleSessionTimeout() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailIdleSessionTimeout, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * idle timeout. Must be in valid duration format: {digits}{time-unit}.
     * digits: 0-9, time-unit: [hmsd]|ms. h - hours, m - minutes, s -
     * seconds, d - days, ms - milliseconds. If time unit is not specified,
     * the default is s(seconds).
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=147)
    public Map<String,Object> unsetMailIdleSessionTimeout(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailIdleSessionTimeout, "");
        return attrs;
    }

    /**
     * lifetime of a mail message regardless of location. Must be in valid
     * duration format: {digits}{time-unit}. digits: 0-9, time-unit:
     * [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days, ms -
     * milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * <p>Use getMailMessageLifetimeAsString to access value as a string.
     *
     * @see #getMailMessageLifetimeAsString()
     *
     * @return zmailMailMessageLifetime in millseconds, or 0 (0)  if unset
     */
    @ZAttr(id=106)
    public long getMailMessageLifetime() {
        return getTimeInterval(Provisioning.A_zmailMailMessageLifetime, 0L);
    }

    /**
     * lifetime of a mail message regardless of location. Must be in valid
     * duration format: {digits}{time-unit}. digits: 0-9, time-unit:
     * [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days, ms -
     * milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @return zmailMailMessageLifetime, or "0" if unset
     */
    @ZAttr(id=106)
    public String getMailMessageLifetimeAsString() {
        return getAttr(Provisioning.A_zmailMailMessageLifetime, "0");
    }

    /**
     * lifetime of a mail message regardless of location. Must be in valid
     * duration format: {digits}{time-unit}. digits: 0-9, time-unit:
     * [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days, ms -
     * milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @param zmailMailMessageLifetime new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=106)
    public void setMailMessageLifetime(String zmailMailMessageLifetime) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailMessageLifetime, zmailMailMessageLifetime);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * lifetime of a mail message regardless of location. Must be in valid
     * duration format: {digits}{time-unit}. digits: 0-9, time-unit:
     * [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days, ms -
     * milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @param zmailMailMessageLifetime new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=106)
    public Map<String,Object> setMailMessageLifetime(String zmailMailMessageLifetime, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailMessageLifetime, zmailMailMessageLifetime);
        return attrs;
    }

    /**
     * lifetime of a mail message regardless of location. Must be in valid
     * duration format: {digits}{time-unit}. digits: 0-9, time-unit:
     * [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days, ms -
     * milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=106)
    public void unsetMailMessageLifetime() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailMessageLifetime, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * lifetime of a mail message regardless of location. Must be in valid
     * duration format: {digits}{time-unit}. digits: 0-9, time-unit:
     * [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days, ms -
     * milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=106)
    public Map<String,Object> unsetMailMessageLifetime(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailMessageLifetime, "");
        return attrs;
    }

    /**
     * minimum allowed value for zmailPrefMailPollingInterval. Must be in
     * valid duration format: {digits}{time-unit}. digits: 0-9, time-unit:
     * [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days, ms -
     * milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * <p>Use getMailMinPollingIntervalAsString to access value as a string.
     *
     * @see #getMailMinPollingIntervalAsString()
     *
     * @return zmailMailMinPollingInterval in millseconds, or 120000 (2m)  if unset
     */
    @ZAttr(id=110)
    public long getMailMinPollingInterval() {
        return getTimeInterval(Provisioning.A_zmailMailMinPollingInterval, 120000L);
    }

    /**
     * minimum allowed value for zmailPrefMailPollingInterval. Must be in
     * valid duration format: {digits}{time-unit}. digits: 0-9, time-unit:
     * [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days, ms -
     * milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @return zmailMailMinPollingInterval, or "2m" if unset
     */
    @ZAttr(id=110)
    public String getMailMinPollingIntervalAsString() {
        return getAttr(Provisioning.A_zmailMailMinPollingInterval, "2m");
    }

    /**
     * minimum allowed value for zmailPrefMailPollingInterval. Must be in
     * valid duration format: {digits}{time-unit}. digits: 0-9, time-unit:
     * [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days, ms -
     * milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @param zmailMailMinPollingInterval new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=110)
    public void setMailMinPollingInterval(String zmailMailMinPollingInterval) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailMinPollingInterval, zmailMailMinPollingInterval);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * minimum allowed value for zmailPrefMailPollingInterval. Must be in
     * valid duration format: {digits}{time-unit}. digits: 0-9, time-unit:
     * [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days, ms -
     * milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @param zmailMailMinPollingInterval new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=110)
    public Map<String,Object> setMailMinPollingInterval(String zmailMailMinPollingInterval, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailMinPollingInterval, zmailMailMinPollingInterval);
        return attrs;
    }

    /**
     * minimum allowed value for zmailPrefMailPollingInterval. Must be in
     * valid duration format: {digits}{time-unit}. digits: 0-9, time-unit:
     * [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days, ms -
     * milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=110)
    public void unsetMailMinPollingInterval() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailMinPollingInterval, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * minimum allowed value for zmailPrefMailPollingInterval. Must be in
     * valid duration format: {digits}{time-unit}. digits: 0-9, time-unit:
     * [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days, ms -
     * milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=110)
    public Map<String,Object> unsetMailMinPollingInterval(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailMinPollingInterval, "");
        return attrs;
    }

    /**
     * System purge policy, encoded as metadata. Users can apply these policy
     * elements to their folders and tags. If the system policy changes, user
     * settings are automatically updated with the change.
     *
     * @return zmailMailPurgeSystemPolicy, or null if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1239)
    public String getMailPurgeSystemPolicy() {
        return getAttr(Provisioning.A_zmailMailPurgeSystemPolicy, null);
    }

    /**
     * System purge policy, encoded as metadata. Users can apply these policy
     * elements to their folders and tags. If the system policy changes, user
     * settings are automatically updated with the change.
     *
     * @param zmailMailPurgeSystemPolicy new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1239)
    public void setMailPurgeSystemPolicy(String zmailMailPurgeSystemPolicy) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailPurgeSystemPolicy, zmailMailPurgeSystemPolicy);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * System purge policy, encoded as metadata. Users can apply these policy
     * elements to their folders and tags. If the system policy changes, user
     * settings are automatically updated with the change.
     *
     * @param zmailMailPurgeSystemPolicy new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1239)
    public Map<String,Object> setMailPurgeSystemPolicy(String zmailMailPurgeSystemPolicy, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailPurgeSystemPolicy, zmailMailPurgeSystemPolicy);
        return attrs;
    }

    /**
     * System purge policy, encoded as metadata. Users can apply these policy
     * elements to their folders and tags. If the system policy changes, user
     * settings are automatically updated with the change.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1239)
    public void unsetMailPurgeSystemPolicy() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailPurgeSystemPolicy, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * System purge policy, encoded as metadata. Users can apply these policy
     * elements to their folders and tags. If the system policy changes, user
     * settings are automatically updated with the change.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1239)
    public Map<String,Object> unsetMailPurgeSystemPolicy(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailPurgeSystemPolicy, "");
        return attrs;
    }

    /**
     * If TRUE, a message is purged from Spam based on the date that it was
     * moved to the Spam folder. If FALSE, a message is purged from Spam
     * based on the date that it was added to the mailbox.
     *
     * @return zmailMailPurgeUseChangeDateForSpam, or true if unset
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1117)
    public boolean isMailPurgeUseChangeDateForSpam() {
        return getBooleanAttr(Provisioning.A_zmailMailPurgeUseChangeDateForSpam, true);
    }

    /**
     * If TRUE, a message is purged from Spam based on the date that it was
     * moved to the Spam folder. If FALSE, a message is purged from Spam
     * based on the date that it was added to the mailbox.
     *
     * @param zmailMailPurgeUseChangeDateForSpam new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1117)
    public void setMailPurgeUseChangeDateForSpam(boolean zmailMailPurgeUseChangeDateForSpam) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailPurgeUseChangeDateForSpam, zmailMailPurgeUseChangeDateForSpam ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * If TRUE, a message is purged from Spam based on the date that it was
     * moved to the Spam folder. If FALSE, a message is purged from Spam
     * based on the date that it was added to the mailbox.
     *
     * @param zmailMailPurgeUseChangeDateForSpam new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1117)
    public Map<String,Object> setMailPurgeUseChangeDateForSpam(boolean zmailMailPurgeUseChangeDateForSpam, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailPurgeUseChangeDateForSpam, zmailMailPurgeUseChangeDateForSpam ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * If TRUE, a message is purged from Spam based on the date that it was
     * moved to the Spam folder. If FALSE, a message is purged from Spam
     * based on the date that it was added to the mailbox.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1117)
    public void unsetMailPurgeUseChangeDateForSpam() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailPurgeUseChangeDateForSpam, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * If TRUE, a message is purged from Spam based on the date that it was
     * moved to the Spam folder. If FALSE, a message is purged from Spam
     * based on the date that it was added to the mailbox.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1117)
    public Map<String,Object> unsetMailPurgeUseChangeDateForSpam(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailPurgeUseChangeDateForSpam, "");
        return attrs;
    }

    /**
     * If TRUE, a message is purged from trash based on the date that it was
     * moved to the Trash folder. If FALSE, a message is purged from Trash
     * based on the date that it was added to the mailbox.
     *
     * @return zmailMailPurgeUseChangeDateForTrash, or true if unset
     *
     * @since ZCS 5.0.17
     */
    @ZAttr(id=748)
    public boolean isMailPurgeUseChangeDateForTrash() {
        return getBooleanAttr(Provisioning.A_zmailMailPurgeUseChangeDateForTrash, true);
    }

    /**
     * If TRUE, a message is purged from trash based on the date that it was
     * moved to the Trash folder. If FALSE, a message is purged from Trash
     * based on the date that it was added to the mailbox.
     *
     * @param zmailMailPurgeUseChangeDateForTrash new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.17
     */
    @ZAttr(id=748)
    public void setMailPurgeUseChangeDateForTrash(boolean zmailMailPurgeUseChangeDateForTrash) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailPurgeUseChangeDateForTrash, zmailMailPurgeUseChangeDateForTrash ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * If TRUE, a message is purged from trash based on the date that it was
     * moved to the Trash folder. If FALSE, a message is purged from Trash
     * based on the date that it was added to the mailbox.
     *
     * @param zmailMailPurgeUseChangeDateForTrash new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.17
     */
    @ZAttr(id=748)
    public Map<String,Object> setMailPurgeUseChangeDateForTrash(boolean zmailMailPurgeUseChangeDateForTrash, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailPurgeUseChangeDateForTrash, zmailMailPurgeUseChangeDateForTrash ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * If TRUE, a message is purged from trash based on the date that it was
     * moved to the Trash folder. If FALSE, a message is purged from Trash
     * based on the date that it was added to the mailbox.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.17
     */
    @ZAttr(id=748)
    public void unsetMailPurgeUseChangeDateForTrash() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailPurgeUseChangeDateForTrash, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * If TRUE, a message is purged from trash based on the date that it was
     * moved to the Trash folder. If FALSE, a message is purged from Trash
     * based on the date that it was added to the mailbox.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.17
     */
    @ZAttr(id=748)
    public Map<String,Object> unsetMailPurgeUseChangeDateForTrash(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailPurgeUseChangeDateForTrash, "");
        return attrs;
    }

    /**
     * mail quota in bytes
     *
     * @return zmailMailQuota, or 0 if unset
     */
    @ZAttr(id=16)
    public long getMailQuota() {
        return getLongAttr(Provisioning.A_zmailMailQuota, 0L);
    }

    /**
     * mail quota in bytes
     *
     * @param zmailMailQuota new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=16)
    public void setMailQuota(long zmailMailQuota) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailQuota, Long.toString(zmailMailQuota));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * mail quota in bytes
     *
     * @param zmailMailQuota new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=16)
    public Map<String,Object> setMailQuota(long zmailMailQuota, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailQuota, Long.toString(zmailMailQuota));
        return attrs;
    }

    /**
     * mail quota in bytes
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=16)
    public void unsetMailQuota() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailQuota, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * mail quota in bytes
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=16)
    public Map<String,Object> unsetMailQuota(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailQuota, "");
        return attrs;
    }

    /**
     * maximum length of mail signature, 0 means unlimited. If not set,
     * default is 1024
     *
     * @return zmailMailSignatureMaxLength, or 10240 if unset
     */
    @ZAttr(id=454)
    public long getMailSignatureMaxLength() {
        return getLongAttr(Provisioning.A_zmailMailSignatureMaxLength, 10240L);
    }

    /**
     * maximum length of mail signature, 0 means unlimited. If not set,
     * default is 1024
     *
     * @param zmailMailSignatureMaxLength new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=454)
    public void setMailSignatureMaxLength(long zmailMailSignatureMaxLength) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailSignatureMaxLength, Long.toString(zmailMailSignatureMaxLength));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * maximum length of mail signature, 0 means unlimited. If not set,
     * default is 1024
     *
     * @param zmailMailSignatureMaxLength new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=454)
    public Map<String,Object> setMailSignatureMaxLength(long zmailMailSignatureMaxLength, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailSignatureMaxLength, Long.toString(zmailMailSignatureMaxLength));
        return attrs;
    }

    /**
     * maximum length of mail signature, 0 means unlimited. If not set,
     * default is 1024
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=454)
    public void unsetMailSignatureMaxLength() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailSignatureMaxLength, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * maximum length of mail signature, 0 means unlimited. If not set,
     * default is 1024
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=454)
    public Map<String,Object> unsetMailSignatureMaxLength(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailSignatureMaxLength, "");
        return attrs;
    }

    /**
     * Retention period of messages in the Junk folder. 0 means that all
     * messages will be retained. This admin-modifiable attribute works in
     * conjunction with zmailPrefJunkLifetime, which is user-modifiable. The
     * shorter duration is used. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * <p>Use getMailSpamLifetimeAsString to access value as a string.
     *
     * @see #getMailSpamLifetimeAsString()
     *
     * @return zmailMailSpamLifetime in millseconds, or 2592000000 (30d)  if unset
     */
    @ZAttr(id=105)
    public long getMailSpamLifetime() {
        return getTimeInterval(Provisioning.A_zmailMailSpamLifetime, 2592000000L);
    }

    /**
     * Retention period of messages in the Junk folder. 0 means that all
     * messages will be retained. This admin-modifiable attribute works in
     * conjunction with zmailPrefJunkLifetime, which is user-modifiable. The
     * shorter duration is used. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @return zmailMailSpamLifetime, or "30d" if unset
     */
    @ZAttr(id=105)
    public String getMailSpamLifetimeAsString() {
        return getAttr(Provisioning.A_zmailMailSpamLifetime, "30d");
    }

    /**
     * Retention period of messages in the Junk folder. 0 means that all
     * messages will be retained. This admin-modifiable attribute works in
     * conjunction with zmailPrefJunkLifetime, which is user-modifiable. The
     * shorter duration is used. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param zmailMailSpamLifetime new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=105)
    public void setMailSpamLifetime(String zmailMailSpamLifetime) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailSpamLifetime, zmailMailSpamLifetime);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Retention period of messages in the Junk folder. 0 means that all
     * messages will be retained. This admin-modifiable attribute works in
     * conjunction with zmailPrefJunkLifetime, which is user-modifiable. The
     * shorter duration is used. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param zmailMailSpamLifetime new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=105)
    public Map<String,Object> setMailSpamLifetime(String zmailMailSpamLifetime, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailSpamLifetime, zmailMailSpamLifetime);
        return attrs;
    }

    /**
     * Retention period of messages in the Junk folder. 0 means that all
     * messages will be retained. This admin-modifiable attribute works in
     * conjunction with zmailPrefJunkLifetime, which is user-modifiable. The
     * shorter duration is used. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=105)
    public void unsetMailSpamLifetime() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailSpamLifetime, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Retention period of messages in the Junk folder. 0 means that all
     * messages will be retained. This admin-modifiable attribute works in
     * conjunction with zmailPrefJunkLifetime, which is user-modifiable. The
     * shorter duration is used. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=105)
    public Map<String,Object> unsetMailSpamLifetime(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailSpamLifetime, "");
        return attrs;
    }

    /**
     * The algorithm to use when aggregating new messages into conversations.
     * Possible values are: - &quot;none&quot;: no conversation threading is
     * performed. - &quot;subject&quot;: the message will be threaded based
     * solely on its normalized subject. - &quot;strict&quot;: only the
     * threading message headers (References, In-Reply-To, Message-ID, and
     * Resent-Message-ID) are used to correlate messages. No checking of
     * normalized subjects is performed. - &quot;references&quot;: the same
     * logic as &quot;strict&quot; with the constraints slightly altered so
     * that the non-standard Thread-Index header is considered when threading
     * messages and that a reply message lacking References and In-Reply-To
     * headers will fall back to using subject-based threading. -
     * &quot;subjrefs&quot;: the same logic as &quot;references&quot; with
     * the further caveat that changes in the normalized subject will break a
     * thread in two.
     *
     * <p>Valid values: [none, references, strict, subjrefs, subject]
     *
     * @return zmailMailThreadingAlgorithm, or ZAttrProvisioning.MailThreadingAlgorithm.references if unset and/or has invalid value
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1160)
    public ZAttrProvisioning.MailThreadingAlgorithm getMailThreadingAlgorithm() {
        try { String v = getAttr(Provisioning.A_zmailMailThreadingAlgorithm); return v == null ? ZAttrProvisioning.MailThreadingAlgorithm.references : ZAttrProvisioning.MailThreadingAlgorithm.fromString(v); } catch(org.zmail.common.service.ServiceException e) { return ZAttrProvisioning.MailThreadingAlgorithm.references; }
    }

    /**
     * The algorithm to use when aggregating new messages into conversations.
     * Possible values are: - &quot;none&quot;: no conversation threading is
     * performed. - &quot;subject&quot;: the message will be threaded based
     * solely on its normalized subject. - &quot;strict&quot;: only the
     * threading message headers (References, In-Reply-To, Message-ID, and
     * Resent-Message-ID) are used to correlate messages. No checking of
     * normalized subjects is performed. - &quot;references&quot;: the same
     * logic as &quot;strict&quot; with the constraints slightly altered so
     * that the non-standard Thread-Index header is considered when threading
     * messages and that a reply message lacking References and In-Reply-To
     * headers will fall back to using subject-based threading. -
     * &quot;subjrefs&quot;: the same logic as &quot;references&quot; with
     * the further caveat that changes in the normalized subject will break a
     * thread in two.
     *
     * <p>Valid values: [none, references, strict, subjrefs, subject]
     *
     * @return zmailMailThreadingAlgorithm, or "references" if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1160)
    public String getMailThreadingAlgorithmAsString() {
        return getAttr(Provisioning.A_zmailMailThreadingAlgorithm, "references");
    }

    /**
     * The algorithm to use when aggregating new messages into conversations.
     * Possible values are: - &quot;none&quot;: no conversation threading is
     * performed. - &quot;subject&quot;: the message will be threaded based
     * solely on its normalized subject. - &quot;strict&quot;: only the
     * threading message headers (References, In-Reply-To, Message-ID, and
     * Resent-Message-ID) are used to correlate messages. No checking of
     * normalized subjects is performed. - &quot;references&quot;: the same
     * logic as &quot;strict&quot; with the constraints slightly altered so
     * that the non-standard Thread-Index header is considered when threading
     * messages and that a reply message lacking References and In-Reply-To
     * headers will fall back to using subject-based threading. -
     * &quot;subjrefs&quot;: the same logic as &quot;references&quot; with
     * the further caveat that changes in the normalized subject will break a
     * thread in two.
     *
     * <p>Valid values: [none, references, strict, subjrefs, subject]
     *
     * @param zmailMailThreadingAlgorithm new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1160)
    public void setMailThreadingAlgorithm(ZAttrProvisioning.MailThreadingAlgorithm zmailMailThreadingAlgorithm) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailThreadingAlgorithm, zmailMailThreadingAlgorithm.toString());
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * The algorithm to use when aggregating new messages into conversations.
     * Possible values are: - &quot;none&quot;: no conversation threading is
     * performed. - &quot;subject&quot;: the message will be threaded based
     * solely on its normalized subject. - &quot;strict&quot;: only the
     * threading message headers (References, In-Reply-To, Message-ID, and
     * Resent-Message-ID) are used to correlate messages. No checking of
     * normalized subjects is performed. - &quot;references&quot;: the same
     * logic as &quot;strict&quot; with the constraints slightly altered so
     * that the non-standard Thread-Index header is considered when threading
     * messages and that a reply message lacking References and In-Reply-To
     * headers will fall back to using subject-based threading. -
     * &quot;subjrefs&quot;: the same logic as &quot;references&quot; with
     * the further caveat that changes in the normalized subject will break a
     * thread in two.
     *
     * <p>Valid values: [none, references, strict, subjrefs, subject]
     *
     * @param zmailMailThreadingAlgorithm new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1160)
    public Map<String,Object> setMailThreadingAlgorithm(ZAttrProvisioning.MailThreadingAlgorithm zmailMailThreadingAlgorithm, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailThreadingAlgorithm, zmailMailThreadingAlgorithm.toString());
        return attrs;
    }

    /**
     * The algorithm to use when aggregating new messages into conversations.
     * Possible values are: - &quot;none&quot;: no conversation threading is
     * performed. - &quot;subject&quot;: the message will be threaded based
     * solely on its normalized subject. - &quot;strict&quot;: only the
     * threading message headers (References, In-Reply-To, Message-ID, and
     * Resent-Message-ID) are used to correlate messages. No checking of
     * normalized subjects is performed. - &quot;references&quot;: the same
     * logic as &quot;strict&quot; with the constraints slightly altered so
     * that the non-standard Thread-Index header is considered when threading
     * messages and that a reply message lacking References and In-Reply-To
     * headers will fall back to using subject-based threading. -
     * &quot;subjrefs&quot;: the same logic as &quot;references&quot; with
     * the further caveat that changes in the normalized subject will break a
     * thread in two.
     *
     * <p>Valid values: [none, references, strict, subjrefs, subject]
     *
     * @param zmailMailThreadingAlgorithm new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1160)
    public void setMailThreadingAlgorithmAsString(String zmailMailThreadingAlgorithm) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailThreadingAlgorithm, zmailMailThreadingAlgorithm);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * The algorithm to use when aggregating new messages into conversations.
     * Possible values are: - &quot;none&quot;: no conversation threading is
     * performed. - &quot;subject&quot;: the message will be threaded based
     * solely on its normalized subject. - &quot;strict&quot;: only the
     * threading message headers (References, In-Reply-To, Message-ID, and
     * Resent-Message-ID) are used to correlate messages. No checking of
     * normalized subjects is performed. - &quot;references&quot;: the same
     * logic as &quot;strict&quot; with the constraints slightly altered so
     * that the non-standard Thread-Index header is considered when threading
     * messages and that a reply message lacking References and In-Reply-To
     * headers will fall back to using subject-based threading. -
     * &quot;subjrefs&quot;: the same logic as &quot;references&quot; with
     * the further caveat that changes in the normalized subject will break a
     * thread in two.
     *
     * <p>Valid values: [none, references, strict, subjrefs, subject]
     *
     * @param zmailMailThreadingAlgorithm new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1160)
    public Map<String,Object> setMailThreadingAlgorithmAsString(String zmailMailThreadingAlgorithm, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailThreadingAlgorithm, zmailMailThreadingAlgorithm);
        return attrs;
    }

    /**
     * The algorithm to use when aggregating new messages into conversations.
     * Possible values are: - &quot;none&quot;: no conversation threading is
     * performed. - &quot;subject&quot;: the message will be threaded based
     * solely on its normalized subject. - &quot;strict&quot;: only the
     * threading message headers (References, In-Reply-To, Message-ID, and
     * Resent-Message-ID) are used to correlate messages. No checking of
     * normalized subjects is performed. - &quot;references&quot;: the same
     * logic as &quot;strict&quot; with the constraints slightly altered so
     * that the non-standard Thread-Index header is considered when threading
     * messages and that a reply message lacking References and In-Reply-To
     * headers will fall back to using subject-based threading. -
     * &quot;subjrefs&quot;: the same logic as &quot;references&quot; with
     * the further caveat that changes in the normalized subject will break a
     * thread in two.
     *
     * <p>Valid values: [none, references, strict, subjrefs, subject]
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1160)
    public void unsetMailThreadingAlgorithm() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailThreadingAlgorithm, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * The algorithm to use when aggregating new messages into conversations.
     * Possible values are: - &quot;none&quot;: no conversation threading is
     * performed. - &quot;subject&quot;: the message will be threaded based
     * solely on its normalized subject. - &quot;strict&quot;: only the
     * threading message headers (References, In-Reply-To, Message-ID, and
     * Resent-Message-ID) are used to correlate messages. No checking of
     * normalized subjects is performed. - &quot;references&quot;: the same
     * logic as &quot;strict&quot; with the constraints slightly altered so
     * that the non-standard Thread-Index header is considered when threading
     * messages and that a reply message lacking References and In-Reply-To
     * headers will fall back to using subject-based threading. -
     * &quot;subjrefs&quot;: the same logic as &quot;references&quot; with
     * the further caveat that changes in the normalized subject will break a
     * thread in two.
     *
     * <p>Valid values: [none, references, strict, subjrefs, subject]
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1160)
    public Map<String,Object> unsetMailThreadingAlgorithm(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailThreadingAlgorithm, "");
        return attrs;
    }

    /**
     * Retention period of messages in the Trash folder. 0 means that all
     * messages will be retained. This admin-modifiable attribute works in
     * conjunction with zmailPrefTrashLifetime, which is user-modifiable.
     * The shorter duration is used. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * <p>Use getMailTrashLifetimeAsString to access value as a string.
     *
     * @see #getMailTrashLifetimeAsString()
     *
     * @return zmailMailTrashLifetime in millseconds, or 2592000000 (30d)  if unset
     */
    @ZAttr(id=104)
    public long getMailTrashLifetime() {
        return getTimeInterval(Provisioning.A_zmailMailTrashLifetime, 2592000000L);
    }

    /**
     * Retention period of messages in the Trash folder. 0 means that all
     * messages will be retained. This admin-modifiable attribute works in
     * conjunction with zmailPrefTrashLifetime, which is user-modifiable.
     * The shorter duration is used. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @return zmailMailTrashLifetime, or "30d" if unset
     */
    @ZAttr(id=104)
    public String getMailTrashLifetimeAsString() {
        return getAttr(Provisioning.A_zmailMailTrashLifetime, "30d");
    }

    /**
     * Retention period of messages in the Trash folder. 0 means that all
     * messages will be retained. This admin-modifiable attribute works in
     * conjunction with zmailPrefTrashLifetime, which is user-modifiable.
     * The shorter duration is used. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param zmailMailTrashLifetime new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=104)
    public void setMailTrashLifetime(String zmailMailTrashLifetime) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailTrashLifetime, zmailMailTrashLifetime);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Retention period of messages in the Trash folder. 0 means that all
     * messages will be retained. This admin-modifiable attribute works in
     * conjunction with zmailPrefTrashLifetime, which is user-modifiable.
     * The shorter duration is used. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param zmailMailTrashLifetime new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=104)
    public Map<String,Object> setMailTrashLifetime(String zmailMailTrashLifetime, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailTrashLifetime, zmailMailTrashLifetime);
        return attrs;
    }

    /**
     * Retention period of messages in the Trash folder. 0 means that all
     * messages will be retained. This admin-modifiable attribute works in
     * conjunction with zmailPrefTrashLifetime, which is user-modifiable.
     * The shorter duration is used. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=104)
    public void unsetMailTrashLifetime() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailTrashLifetime, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Retention period of messages in the Trash folder. 0 means that all
     * messages will be retained. This admin-modifiable attribute works in
     * conjunction with zmailPrefTrashLifetime, which is user-modifiable.
     * The shorter duration is used. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=104)
    public Map<String,Object> unsetMailTrashLifetime(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailTrashLifetime, "");
        return attrs;
    }

    /**
     * Maximum number of entries for zmailPrefMailTrustedSenderList.
     *
     * @return zmailMailTrustedSenderListMaxNumEntries, or 500 if unset
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1139)
    public int getMailTrustedSenderListMaxNumEntries() {
        return getIntAttr(Provisioning.A_zmailMailTrustedSenderListMaxNumEntries, 500);
    }

    /**
     * Maximum number of entries for zmailPrefMailTrustedSenderList.
     *
     * @param zmailMailTrustedSenderListMaxNumEntries new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1139)
    public void setMailTrustedSenderListMaxNumEntries(int zmailMailTrustedSenderListMaxNumEntries) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailTrustedSenderListMaxNumEntries, Integer.toString(zmailMailTrustedSenderListMaxNumEntries));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Maximum number of entries for zmailPrefMailTrustedSenderList.
     *
     * @param zmailMailTrustedSenderListMaxNumEntries new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1139)
    public Map<String,Object> setMailTrustedSenderListMaxNumEntries(int zmailMailTrustedSenderListMaxNumEntries, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailTrustedSenderListMaxNumEntries, Integer.toString(zmailMailTrustedSenderListMaxNumEntries));
        return attrs;
    }

    /**
     * Maximum number of entries for zmailPrefMailTrustedSenderList.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1139)
    public void unsetMailTrustedSenderListMaxNumEntries() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailTrustedSenderListMaxNumEntries, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Maximum number of entries for zmailPrefMailTrustedSenderList.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1139)
    public Map<String,Object> unsetMailTrustedSenderListMaxNumEntries(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailTrustedSenderListMaxNumEntries, "");
        return attrs;
    }

    /**
     * Maximum number of entries for per user white list. This restricts the
     * number of values that can be set on the amavisWhitelistSender
     * attribute of an account. If set to 0, the per user white list feature
     * is disabled.
     *
     * @return zmailMailWhitelistMaxNumEntries, or 100 if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=798)
    public int getMailWhitelistMaxNumEntries() {
        return getIntAttr(Provisioning.A_zmailMailWhitelistMaxNumEntries, 100);
    }

    /**
     * Maximum number of entries for per user white list. This restricts the
     * number of values that can be set on the amavisWhitelistSender
     * attribute of an account. If set to 0, the per user white list feature
     * is disabled.
     *
     * @param zmailMailWhitelistMaxNumEntries new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=798)
    public void setMailWhitelistMaxNumEntries(int zmailMailWhitelistMaxNumEntries) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailWhitelistMaxNumEntries, Integer.toString(zmailMailWhitelistMaxNumEntries));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Maximum number of entries for per user white list. This restricts the
     * number of values that can be set on the amavisWhitelistSender
     * attribute of an account. If set to 0, the per user white list feature
     * is disabled.
     *
     * @param zmailMailWhitelistMaxNumEntries new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=798)
    public Map<String,Object> setMailWhitelistMaxNumEntries(int zmailMailWhitelistMaxNumEntries, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailWhitelistMaxNumEntries, Integer.toString(zmailMailWhitelistMaxNumEntries));
        return attrs;
    }

    /**
     * Maximum number of entries for per user white list. This restricts the
     * number of values that can be set on the amavisWhitelistSender
     * attribute of an account. If set to 0, the per user white list feature
     * is disabled.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=798)
    public void unsetMailWhitelistMaxNumEntries() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailWhitelistMaxNumEntries, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Maximum number of entries for per user white list. This restricts the
     * number of values that can be set on the amavisWhitelistSender
     * attribute of an account. If set to 0, the per user white list feature
     * is disabled.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=798)
    public Map<String,Object> unsetMailWhitelistMaxNumEntries(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMailWhitelistMaxNumEntries, "");
        return attrs;
    }

    /**
     * max number of contacts per page, Web client (not server) verifies that
     * zmailPrefContactsPerPage should not exceed this attribute.
     *
     * @return zmailMaxContactsPerPage, or 100 if unset
     *
     * @since ZCS 6.0.0_BETA2
     */
    @ZAttr(id=1012)
    public int getMaxContactsPerPage() {
        return getIntAttr(Provisioning.A_zmailMaxContactsPerPage, 100);
    }

    /**
     * max number of contacts per page, Web client (not server) verifies that
     * zmailPrefContactsPerPage should not exceed this attribute.
     *
     * @param zmailMaxContactsPerPage new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA2
     */
    @ZAttr(id=1012)
    public void setMaxContactsPerPage(int zmailMaxContactsPerPage) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMaxContactsPerPage, Integer.toString(zmailMaxContactsPerPage));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * max number of contacts per page, Web client (not server) verifies that
     * zmailPrefContactsPerPage should not exceed this attribute.
     *
     * @param zmailMaxContactsPerPage new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA2
     */
    @ZAttr(id=1012)
    public Map<String,Object> setMaxContactsPerPage(int zmailMaxContactsPerPage, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMaxContactsPerPage, Integer.toString(zmailMaxContactsPerPage));
        return attrs;
    }

    /**
     * max number of contacts per page, Web client (not server) verifies that
     * zmailPrefContactsPerPage should not exceed this attribute.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA2
     */
    @ZAttr(id=1012)
    public void unsetMaxContactsPerPage() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMaxContactsPerPage, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * max number of contacts per page, Web client (not server) verifies that
     * zmailPrefContactsPerPage should not exceed this attribute.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA2
     */
    @ZAttr(id=1012)
    public Map<String,Object> unsetMaxContactsPerPage(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMaxContactsPerPage, "");
        return attrs;
    }

    /**
     * max number of messages/conversations per page, Web client (not server)
     * verifies that zmailPrefMailItemsPerPage should not exceed this
     * attribute.
     *
     * @return zmailMaxMailItemsPerPage, or 100 if unset
     *
     * @since ZCS 6.0.0_BETA2
     */
    @ZAttr(id=1011)
    public int getMaxMailItemsPerPage() {
        return getIntAttr(Provisioning.A_zmailMaxMailItemsPerPage, 100);
    }

    /**
     * max number of messages/conversations per page, Web client (not server)
     * verifies that zmailPrefMailItemsPerPage should not exceed this
     * attribute.
     *
     * @param zmailMaxMailItemsPerPage new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA2
     */
    @ZAttr(id=1011)
    public void setMaxMailItemsPerPage(int zmailMaxMailItemsPerPage) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMaxMailItemsPerPage, Integer.toString(zmailMaxMailItemsPerPage));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * max number of messages/conversations per page, Web client (not server)
     * verifies that zmailPrefMailItemsPerPage should not exceed this
     * attribute.
     *
     * @param zmailMaxMailItemsPerPage new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA2
     */
    @ZAttr(id=1011)
    public Map<String,Object> setMaxMailItemsPerPage(int zmailMaxMailItemsPerPage, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMaxMailItemsPerPage, Integer.toString(zmailMaxMailItemsPerPage));
        return attrs;
    }

    /**
     * max number of messages/conversations per page, Web client (not server)
     * verifies that zmailPrefMailItemsPerPage should not exceed this
     * attribute.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA2
     */
    @ZAttr(id=1011)
    public void unsetMaxMailItemsPerPage() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMaxMailItemsPerPage, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * max number of messages/conversations per page, Web client (not server)
     * verifies that zmailPrefMailItemsPerPage should not exceed this
     * attribute.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA2
     */
    @ZAttr(id=1011)
    public Map<String,Object> unsetMaxMailItemsPerPage(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMaxMailItemsPerPage, "");
        return attrs;
    }

    /**
     * max number of voice items per page, Web client (not server) verifies
     * that zmailPrefVoiceItemsPerPage should not exceed this attribute.
     *
     * @return zmailMaxVoiceItemsPerPage, or 100 if unset
     *
     * @since ZCS 6.0.0_BETA2
     */
    @ZAttr(id=1013)
    public int getMaxVoiceItemsPerPage() {
        return getIntAttr(Provisioning.A_zmailMaxVoiceItemsPerPage, 100);
    }

    /**
     * max number of voice items per page, Web client (not server) verifies
     * that zmailPrefVoiceItemsPerPage should not exceed this attribute.
     *
     * @param zmailMaxVoiceItemsPerPage new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA2
     */
    @ZAttr(id=1013)
    public void setMaxVoiceItemsPerPage(int zmailMaxVoiceItemsPerPage) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMaxVoiceItemsPerPage, Integer.toString(zmailMaxVoiceItemsPerPage));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * max number of voice items per page, Web client (not server) verifies
     * that zmailPrefVoiceItemsPerPage should not exceed this attribute.
     *
     * @param zmailMaxVoiceItemsPerPage new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA2
     */
    @ZAttr(id=1013)
    public Map<String,Object> setMaxVoiceItemsPerPage(int zmailMaxVoiceItemsPerPage, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMaxVoiceItemsPerPage, Integer.toString(zmailMaxVoiceItemsPerPage));
        return attrs;
    }

    /**
     * max number of voice items per page, Web client (not server) verifies
     * that zmailPrefVoiceItemsPerPage should not exceed this attribute.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA2
     */
    @ZAttr(id=1013)
    public void unsetMaxVoiceItemsPerPage() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMaxVoiceItemsPerPage, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * max number of voice items per page, Web client (not server) verifies
     * that zmailPrefVoiceItemsPerPage should not exceed this attribute.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA2
     */
    @ZAttr(id=1013)
    public Map<String,Object> unsetMaxVoiceItemsPerPage(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMaxVoiceItemsPerPage, "");
        return attrs;
    }

    /**
     * Max size of items in a folder that server tracks, categorized by
     * collection type (Email,Calendar,Contacts,Tasks). e.g. Email:3000 makes
     * the max size of items to track for an Email folder to be 3000. If not
     * specify, default value is Integer.MAX_VALUE
     *
     * @return zmailMobileItemsToTrackPerFolderMaxSize, or empty array if unset
     *
     * @since ZCS 8.0.3
     */
    @ZAttr(id=1426)
    public String[] getMobileItemsToTrackPerFolderMaxSize() {
        return getMultiAttr(Provisioning.A_zmailMobileItemsToTrackPerFolderMaxSize);
    }

    /**
     * Max size of items in a folder that server tracks, categorized by
     * collection type (Email,Calendar,Contacts,Tasks). e.g. Email:3000 makes
     * the max size of items to track for an Email folder to be 3000. If not
     * specify, default value is Integer.MAX_VALUE
     *
     * @param zmailMobileItemsToTrackPerFolderMaxSize new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.3
     */
    @ZAttr(id=1426)
    public void setMobileItemsToTrackPerFolderMaxSize(String[] zmailMobileItemsToTrackPerFolderMaxSize) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobileItemsToTrackPerFolderMaxSize, zmailMobileItemsToTrackPerFolderMaxSize);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Max size of items in a folder that server tracks, categorized by
     * collection type (Email,Calendar,Contacts,Tasks). e.g. Email:3000 makes
     * the max size of items to track for an Email folder to be 3000. If not
     * specify, default value is Integer.MAX_VALUE
     *
     * @param zmailMobileItemsToTrackPerFolderMaxSize new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.3
     */
    @ZAttr(id=1426)
    public Map<String,Object> setMobileItemsToTrackPerFolderMaxSize(String[] zmailMobileItemsToTrackPerFolderMaxSize, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobileItemsToTrackPerFolderMaxSize, zmailMobileItemsToTrackPerFolderMaxSize);
        return attrs;
    }

    /**
     * Max size of items in a folder that server tracks, categorized by
     * collection type (Email,Calendar,Contacts,Tasks). e.g. Email:3000 makes
     * the max size of items to track for an Email folder to be 3000. If not
     * specify, default value is Integer.MAX_VALUE
     *
     * @param zmailMobileItemsToTrackPerFolderMaxSize new to add to existing values
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.3
     */
    @ZAttr(id=1426)
    public void addMobileItemsToTrackPerFolderMaxSize(String zmailMobileItemsToTrackPerFolderMaxSize) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "+" + Provisioning.A_zmailMobileItemsToTrackPerFolderMaxSize, zmailMobileItemsToTrackPerFolderMaxSize);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Max size of items in a folder that server tracks, categorized by
     * collection type (Email,Calendar,Contacts,Tasks). e.g. Email:3000 makes
     * the max size of items to track for an Email folder to be 3000. If not
     * specify, default value is Integer.MAX_VALUE
     *
     * @param zmailMobileItemsToTrackPerFolderMaxSize new to add to existing values
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.3
     */
    @ZAttr(id=1426)
    public Map<String,Object> addMobileItemsToTrackPerFolderMaxSize(String zmailMobileItemsToTrackPerFolderMaxSize, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "+" + Provisioning.A_zmailMobileItemsToTrackPerFolderMaxSize, zmailMobileItemsToTrackPerFolderMaxSize);
        return attrs;
    }

    /**
     * Max size of items in a folder that server tracks, categorized by
     * collection type (Email,Calendar,Contacts,Tasks). e.g. Email:3000 makes
     * the max size of items to track for an Email folder to be 3000. If not
     * specify, default value is Integer.MAX_VALUE
     *
     * @param zmailMobileItemsToTrackPerFolderMaxSize existing value to remove
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.3
     */
    @ZAttr(id=1426)
    public void removeMobileItemsToTrackPerFolderMaxSize(String zmailMobileItemsToTrackPerFolderMaxSize) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "-" + Provisioning.A_zmailMobileItemsToTrackPerFolderMaxSize, zmailMobileItemsToTrackPerFolderMaxSize);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Max size of items in a folder that server tracks, categorized by
     * collection type (Email,Calendar,Contacts,Tasks). e.g. Email:3000 makes
     * the max size of items to track for an Email folder to be 3000. If not
     * specify, default value is Integer.MAX_VALUE
     *
     * @param zmailMobileItemsToTrackPerFolderMaxSize existing value to remove
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.3
     */
    @ZAttr(id=1426)
    public Map<String,Object> removeMobileItemsToTrackPerFolderMaxSize(String zmailMobileItemsToTrackPerFolderMaxSize, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "-" + Provisioning.A_zmailMobileItemsToTrackPerFolderMaxSize, zmailMobileItemsToTrackPerFolderMaxSize);
        return attrs;
    }

    /**
     * Max size of items in a folder that server tracks, categorized by
     * collection type (Email,Calendar,Contacts,Tasks). e.g. Email:3000 makes
     * the max size of items to track for an Email folder to be 3000. If not
     * specify, default value is Integer.MAX_VALUE
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.3
     */
    @ZAttr(id=1426)
    public void unsetMobileItemsToTrackPerFolderMaxSize() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobileItemsToTrackPerFolderMaxSize, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Max size of items in a folder that server tracks, categorized by
     * collection type (Email,Calendar,Contacts,Tasks). e.g. Email:3000 makes
     * the max size of items to track for an Email folder to be 3000. If not
     * specify, default value is Integer.MAX_VALUE
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.3
     */
    @ZAttr(id=1426)
    public Map<String,Object> unsetMobileItemsToTrackPerFolderMaxSize(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobileItemsToTrackPerFolderMaxSize, "");
        return attrs;
    }

    /**
     * whether or not to enable truncating on client metadata size, if
     * enabled server will only track recent items on client device instead
     * of all
     *
     * @return zmailMobileMetadataMaxSizeEnabled, or false if unset
     *
     * @since ZCS 8.0.3
     */
    @ZAttr(id=1425)
    public boolean isMobileMetadataMaxSizeEnabled() {
        return getBooleanAttr(Provisioning.A_zmailMobileMetadataMaxSizeEnabled, false);
    }

    /**
     * whether or not to enable truncating on client metadata size, if
     * enabled server will only track recent items on client device instead
     * of all
     *
     * @param zmailMobileMetadataMaxSizeEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.3
     */
    @ZAttr(id=1425)
    public void setMobileMetadataMaxSizeEnabled(boolean zmailMobileMetadataMaxSizeEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobileMetadataMaxSizeEnabled, zmailMobileMetadataMaxSizeEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether or not to enable truncating on client metadata size, if
     * enabled server will only track recent items on client device instead
     * of all
     *
     * @param zmailMobileMetadataMaxSizeEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.3
     */
    @ZAttr(id=1425)
    public Map<String,Object> setMobileMetadataMaxSizeEnabled(boolean zmailMobileMetadataMaxSizeEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobileMetadataMaxSizeEnabled, zmailMobileMetadataMaxSizeEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether or not to enable truncating on client metadata size, if
     * enabled server will only track recent items on client device instead
     * of all
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.3
     */
    @ZAttr(id=1425)
    public void unsetMobileMetadataMaxSizeEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobileMetadataMaxSizeEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether or not to enable truncating on client metadata size, if
     * enabled server will only track recent items on client device instead
     * of all
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.3
     */
    @ZAttr(id=1425)
    public Map<String,Object> unsetMobileMetadataMaxSizeEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobileMetadataMaxSizeEnabled, "");
        return attrs;
    }

    /**
     * whether the Bluetooth capabilities are allowed on the device. The
     * available options are Disable, HandsfreeOnly, and Allow. 0 - DISABLE 1
     * - HANDSFREE 2 - ALLOW ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowBluetooth value is set to -1
     *
     * @return zmailMobilePolicyAllowBluetooth, or 2 if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1285)
    public int getMobilePolicyAllowBluetooth() {
        return getIntAttr(Provisioning.A_zmailMobilePolicyAllowBluetooth, 2);
    }

    /**
     * whether the Bluetooth capabilities are allowed on the device. The
     * available options are Disable, HandsfreeOnly, and Allow. 0 - DISABLE 1
     * - HANDSFREE 2 - ALLOW ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowBluetooth value is set to -1
     *
     * @param zmailMobilePolicyAllowBluetooth new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1285)
    public void setMobilePolicyAllowBluetooth(int zmailMobilePolicyAllowBluetooth) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowBluetooth, Integer.toString(zmailMobilePolicyAllowBluetooth));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether the Bluetooth capabilities are allowed on the device. The
     * available options are Disable, HandsfreeOnly, and Allow. 0 - DISABLE 1
     * - HANDSFREE 2 - ALLOW ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowBluetooth value is set to -1
     *
     * @param zmailMobilePolicyAllowBluetooth new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1285)
    public Map<String,Object> setMobilePolicyAllowBluetooth(int zmailMobilePolicyAllowBluetooth, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowBluetooth, Integer.toString(zmailMobilePolicyAllowBluetooth));
        return attrs;
    }

    /**
     * whether the Bluetooth capabilities are allowed on the device. The
     * available options are Disable, HandsfreeOnly, and Allow. 0 - DISABLE 1
     * - HANDSFREE 2 - ALLOW ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowBluetooth value is set to -1
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1285)
    public void unsetMobilePolicyAllowBluetooth() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowBluetooth, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether the Bluetooth capabilities are allowed on the device. The
     * available options are Disable, HandsfreeOnly, and Allow. 0 - DISABLE 1
     * - HANDSFREE 2 - ALLOW ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowBluetooth value is set to -1
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1285)
    public Map<String,Object> unsetMobilePolicyAllowBluetooth(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowBluetooth, "");
        return attrs;
    }

    /**
     * whether Microsoft Pocket Internet Explorer is allowed on the mobile
     * phone. This parameter doesn&#039;t affect third-party browsers.
     * ignored if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowBrowser value is set to -1
     *
     * @return zmailMobilePolicyAllowBrowser, or 1 if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1300)
    public int getMobilePolicyAllowBrowser() {
        return getIntAttr(Provisioning.A_zmailMobilePolicyAllowBrowser, 1);
    }

    /**
     * whether Microsoft Pocket Internet Explorer is allowed on the mobile
     * phone. This parameter doesn&#039;t affect third-party browsers.
     * ignored if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowBrowser value is set to -1
     *
     * @param zmailMobilePolicyAllowBrowser new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1300)
    public void setMobilePolicyAllowBrowser(int zmailMobilePolicyAllowBrowser) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowBrowser, Integer.toString(zmailMobilePolicyAllowBrowser));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether Microsoft Pocket Internet Explorer is allowed on the mobile
     * phone. This parameter doesn&#039;t affect third-party browsers.
     * ignored if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowBrowser value is set to -1
     *
     * @param zmailMobilePolicyAllowBrowser new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1300)
    public Map<String,Object> setMobilePolicyAllowBrowser(int zmailMobilePolicyAllowBrowser, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowBrowser, Integer.toString(zmailMobilePolicyAllowBrowser));
        return attrs;
    }

    /**
     * whether Microsoft Pocket Internet Explorer is allowed on the mobile
     * phone. This parameter doesn&#039;t affect third-party browsers.
     * ignored if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowBrowser value is set to -1
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1300)
    public void unsetMobilePolicyAllowBrowser() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowBrowser, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether Microsoft Pocket Internet Explorer is allowed on the mobile
     * phone. This parameter doesn&#039;t affect third-party browsers.
     * ignored if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowBrowser value is set to -1
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1300)
    public Map<String,Object> unsetMobilePolicyAllowBrowser(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowBrowser, "");
        return attrs;
    }

    /**
     * whether to allow camera on device; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowCamera value is set to -1
     *
     * @return zmailMobilePolicyAllowCamera, or 1 if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1278)
    public int getMobilePolicyAllowCamera() {
        return getIntAttr(Provisioning.A_zmailMobilePolicyAllowCamera, 1);
    }

    /**
     * whether to allow camera on device; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowCamera value is set to -1
     *
     * @param zmailMobilePolicyAllowCamera new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1278)
    public void setMobilePolicyAllowCamera(int zmailMobilePolicyAllowCamera) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowCamera, Integer.toString(zmailMobilePolicyAllowCamera));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to allow camera on device; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowCamera value is set to -1
     *
     * @param zmailMobilePolicyAllowCamera new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1278)
    public Map<String,Object> setMobilePolicyAllowCamera(int zmailMobilePolicyAllowCamera, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowCamera, Integer.toString(zmailMobilePolicyAllowCamera));
        return attrs;
    }

    /**
     * whether to allow camera on device; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowCamera value is set to -1
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1278)
    public void unsetMobilePolicyAllowCamera() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowCamera, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to allow camera on device; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowCamera value is set to -1
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1278)
    public Map<String,Object> unsetMobilePolicyAllowCamera(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowCamera, "");
        return attrs;
    }

    /**
     * whether the device user can configure a personal e-mail account on the
     * mobile phone. This parameter doesn&#039;t control access to e-mails
     * using third-party mobile phone e-mail programs. ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowConsumerEmail value is set to -1
     *
     * @return zmailMobilePolicyAllowConsumerEmail, or 1 if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1301)
    public int getMobilePolicyAllowConsumerEmail() {
        return getIntAttr(Provisioning.A_zmailMobilePolicyAllowConsumerEmail, 1);
    }

    /**
     * whether the device user can configure a personal e-mail account on the
     * mobile phone. This parameter doesn&#039;t control access to e-mails
     * using third-party mobile phone e-mail programs. ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowConsumerEmail value is set to -1
     *
     * @param zmailMobilePolicyAllowConsumerEmail new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1301)
    public void setMobilePolicyAllowConsumerEmail(int zmailMobilePolicyAllowConsumerEmail) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowConsumerEmail, Integer.toString(zmailMobilePolicyAllowConsumerEmail));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether the device user can configure a personal e-mail account on the
     * mobile phone. This parameter doesn&#039;t control access to e-mails
     * using third-party mobile phone e-mail programs. ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowConsumerEmail value is set to -1
     *
     * @param zmailMobilePolicyAllowConsumerEmail new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1301)
    public Map<String,Object> setMobilePolicyAllowConsumerEmail(int zmailMobilePolicyAllowConsumerEmail, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowConsumerEmail, Integer.toString(zmailMobilePolicyAllowConsumerEmail));
        return attrs;
    }

    /**
     * whether the device user can configure a personal e-mail account on the
     * mobile phone. This parameter doesn&#039;t control access to e-mails
     * using third-party mobile phone e-mail programs. ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowConsumerEmail value is set to -1
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1301)
    public void unsetMobilePolicyAllowConsumerEmail() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowConsumerEmail, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether the device user can configure a personal e-mail account on the
     * mobile phone. This parameter doesn&#039;t control access to e-mails
     * using third-party mobile phone e-mail programs. ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowConsumerEmail value is set to -1
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1301)
    public Map<String,Object> unsetMobilePolicyAllowConsumerEmail(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowConsumerEmail, "");
        return attrs;
    }

    /**
     * whether the device can synchronize with a desktop computer through a
     * cable; ignored if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowDesktopSync value is set to -1
     *
     * @return zmailMobilePolicyAllowDesktopSync, or 1 if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1288)
    public int getMobilePolicyAllowDesktopSync() {
        return getIntAttr(Provisioning.A_zmailMobilePolicyAllowDesktopSync, 1);
    }

    /**
     * whether the device can synchronize with a desktop computer through a
     * cable; ignored if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowDesktopSync value is set to -1
     *
     * @param zmailMobilePolicyAllowDesktopSync new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1288)
    public void setMobilePolicyAllowDesktopSync(int zmailMobilePolicyAllowDesktopSync) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowDesktopSync, Integer.toString(zmailMobilePolicyAllowDesktopSync));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether the device can synchronize with a desktop computer through a
     * cable; ignored if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowDesktopSync value is set to -1
     *
     * @param zmailMobilePolicyAllowDesktopSync new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1288)
    public Map<String,Object> setMobilePolicyAllowDesktopSync(int zmailMobilePolicyAllowDesktopSync, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowDesktopSync, Integer.toString(zmailMobilePolicyAllowDesktopSync));
        return attrs;
    }

    /**
     * whether the device can synchronize with a desktop computer through a
     * cable; ignored if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowDesktopSync value is set to -1
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1288)
    public void unsetMobilePolicyAllowDesktopSync() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowDesktopSync, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether the device can synchronize with a desktop computer through a
     * cable; ignored if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowDesktopSync value is set to -1
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1288)
    public Map<String,Object> unsetMobilePolicyAllowDesktopSync(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowDesktopSync, "");
        return attrs;
    }

    /**
     * whether HTML e-mail is enabled on the device. If set to 0, all e-mail
     * will be converted to plain text before synchronization occurs. ignored
     * if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowHTMLEmail value is set to -1
     *
     * @return zmailMobilePolicyAllowHTMLEmail, or 1 if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1290)
    public int getMobilePolicyAllowHTMLEmail() {
        return getIntAttr(Provisioning.A_zmailMobilePolicyAllowHTMLEmail, 1);
    }

    /**
     * whether HTML e-mail is enabled on the device. If set to 0, all e-mail
     * will be converted to plain text before synchronization occurs. ignored
     * if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowHTMLEmail value is set to -1
     *
     * @param zmailMobilePolicyAllowHTMLEmail new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1290)
    public void setMobilePolicyAllowHTMLEmail(int zmailMobilePolicyAllowHTMLEmail) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowHTMLEmail, Integer.toString(zmailMobilePolicyAllowHTMLEmail));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether HTML e-mail is enabled on the device. If set to 0, all e-mail
     * will be converted to plain text before synchronization occurs. ignored
     * if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowHTMLEmail value is set to -1
     *
     * @param zmailMobilePolicyAllowHTMLEmail new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1290)
    public Map<String,Object> setMobilePolicyAllowHTMLEmail(int zmailMobilePolicyAllowHTMLEmail, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowHTMLEmail, Integer.toString(zmailMobilePolicyAllowHTMLEmail));
        return attrs;
    }

    /**
     * whether HTML e-mail is enabled on the device. If set to 0, all e-mail
     * will be converted to plain text before synchronization occurs. ignored
     * if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowHTMLEmail value is set to -1
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1290)
    public void unsetMobilePolicyAllowHTMLEmail() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowHTMLEmail, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether HTML e-mail is enabled on the device. If set to 0, all e-mail
     * will be converted to plain text before synchronization occurs. ignored
     * if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowHTMLEmail value is set to -1
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1290)
    public Map<String,Object> unsetMobilePolicyAllowHTMLEmail(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowHTMLEmail, "");
        return attrs;
    }

    /**
     * whether the mobile device can be used as a modem to connect a computer
     * to the Internet; ignored if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowInternetSharing value is set to -1
     *
     * @return zmailMobilePolicyAllowInternetSharing, or 1 if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1303)
    public int getMobilePolicyAllowInternetSharing() {
        return getIntAttr(Provisioning.A_zmailMobilePolicyAllowInternetSharing, 1);
    }

    /**
     * whether the mobile device can be used as a modem to connect a computer
     * to the Internet; ignored if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowInternetSharing value is set to -1
     *
     * @param zmailMobilePolicyAllowInternetSharing new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1303)
    public void setMobilePolicyAllowInternetSharing(int zmailMobilePolicyAllowInternetSharing) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowInternetSharing, Integer.toString(zmailMobilePolicyAllowInternetSharing));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether the mobile device can be used as a modem to connect a computer
     * to the Internet; ignored if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowInternetSharing value is set to -1
     *
     * @param zmailMobilePolicyAllowInternetSharing new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1303)
    public Map<String,Object> setMobilePolicyAllowInternetSharing(int zmailMobilePolicyAllowInternetSharing, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowInternetSharing, Integer.toString(zmailMobilePolicyAllowInternetSharing));
        return attrs;
    }

    /**
     * whether the mobile device can be used as a modem to connect a computer
     * to the Internet; ignored if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowInternetSharing value is set to -1
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1303)
    public void unsetMobilePolicyAllowInternetSharing() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowInternetSharing, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether the mobile device can be used as a modem to connect a computer
     * to the Internet; ignored if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowInternetSharing value is set to -1
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1303)
    public Map<String,Object> unsetMobilePolicyAllowInternetSharing(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowInternetSharing, "");
        return attrs;
    }

    /**
     * whether infrared connections are allowed to the device; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or zmailMobilePolicyAllowIrDA
     * value is set to -1
     *
     * @return zmailMobilePolicyAllowIrDA, or 1 if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1286)
    public int getMobilePolicyAllowIrDA() {
        return getIntAttr(Provisioning.A_zmailMobilePolicyAllowIrDA, 1);
    }

    /**
     * whether infrared connections are allowed to the device; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or zmailMobilePolicyAllowIrDA
     * value is set to -1
     *
     * @param zmailMobilePolicyAllowIrDA new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1286)
    public void setMobilePolicyAllowIrDA(int zmailMobilePolicyAllowIrDA) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowIrDA, Integer.toString(zmailMobilePolicyAllowIrDA));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether infrared connections are allowed to the device; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or zmailMobilePolicyAllowIrDA
     * value is set to -1
     *
     * @param zmailMobilePolicyAllowIrDA new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1286)
    public Map<String,Object> setMobilePolicyAllowIrDA(int zmailMobilePolicyAllowIrDA, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowIrDA, Integer.toString(zmailMobilePolicyAllowIrDA));
        return attrs;
    }

    /**
     * whether infrared connections are allowed to the device; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or zmailMobilePolicyAllowIrDA
     * value is set to -1
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1286)
    public void unsetMobilePolicyAllowIrDA() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowIrDA, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether infrared connections are allowed to the device; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or zmailMobilePolicyAllowIrDA
     * value is set to -1
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1286)
    public Map<String,Object> unsetMobilePolicyAllowIrDA(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowIrDA, "");
        return attrs;
    }

    /**
     * whether to allow non-provisionable devices; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE
     *
     * @return zmailMobilePolicyAllowNonProvisionableDevices, or true if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=834)
    public boolean isMobilePolicyAllowNonProvisionableDevices() {
        return getBooleanAttr(Provisioning.A_zmailMobilePolicyAllowNonProvisionableDevices, true);
    }

    /**
     * whether to allow non-provisionable devices; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE
     *
     * @param zmailMobilePolicyAllowNonProvisionableDevices new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=834)
    public void setMobilePolicyAllowNonProvisionableDevices(boolean zmailMobilePolicyAllowNonProvisionableDevices) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowNonProvisionableDevices, zmailMobilePolicyAllowNonProvisionableDevices ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to allow non-provisionable devices; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE
     *
     * @param zmailMobilePolicyAllowNonProvisionableDevices new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=834)
    public Map<String,Object> setMobilePolicyAllowNonProvisionableDevices(boolean zmailMobilePolicyAllowNonProvisionableDevices, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowNonProvisionableDevices, zmailMobilePolicyAllowNonProvisionableDevices ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether to allow non-provisionable devices; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=834)
    public void unsetMobilePolicyAllowNonProvisionableDevices() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowNonProvisionableDevices, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to allow non-provisionable devices; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=834)
    public Map<String,Object> unsetMobilePolicyAllowNonProvisionableDevices(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowNonProvisionableDevices, "");
        return attrs;
    }

    /**
     * whether the user can configure a POP3 or IMAP4 e-mail account on the
     * device. This parameter doesn&#039;t control access by third-party
     * e-mail programs. ignored if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowPOPIMAPEmail value is set to -1
     *
     * @return zmailMobilePolicyAllowPOPIMAPEmail, or 1 if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1284)
    public int getMobilePolicyAllowPOPIMAPEmail() {
        return getIntAttr(Provisioning.A_zmailMobilePolicyAllowPOPIMAPEmail, 1);
    }

    /**
     * whether the user can configure a POP3 or IMAP4 e-mail account on the
     * device. This parameter doesn&#039;t control access by third-party
     * e-mail programs. ignored if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowPOPIMAPEmail value is set to -1
     *
     * @param zmailMobilePolicyAllowPOPIMAPEmail new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1284)
    public void setMobilePolicyAllowPOPIMAPEmail(int zmailMobilePolicyAllowPOPIMAPEmail) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowPOPIMAPEmail, Integer.toString(zmailMobilePolicyAllowPOPIMAPEmail));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether the user can configure a POP3 or IMAP4 e-mail account on the
     * device. This parameter doesn&#039;t control access by third-party
     * e-mail programs. ignored if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowPOPIMAPEmail value is set to -1
     *
     * @param zmailMobilePolicyAllowPOPIMAPEmail new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1284)
    public Map<String,Object> setMobilePolicyAllowPOPIMAPEmail(int zmailMobilePolicyAllowPOPIMAPEmail, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowPOPIMAPEmail, Integer.toString(zmailMobilePolicyAllowPOPIMAPEmail));
        return attrs;
    }

    /**
     * whether the user can configure a POP3 or IMAP4 e-mail account on the
     * device. This parameter doesn&#039;t control access by third-party
     * e-mail programs. ignored if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowPOPIMAPEmail value is set to -1
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1284)
    public void unsetMobilePolicyAllowPOPIMAPEmail() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowPOPIMAPEmail, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether the user can configure a POP3 or IMAP4 e-mail account on the
     * device. This parameter doesn&#039;t control access by third-party
     * e-mail programs. ignored if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowPOPIMAPEmail value is set to -1
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1284)
    public Map<String,Object> unsetMobilePolicyAllowPOPIMAPEmail(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowPOPIMAPEmail, "");
        return attrs;
    }

    /**
     * whether to allow partial policy enforcement on device; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE
     *
     * @return zmailMobilePolicyAllowPartialProvisioning, or true if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=835)
    public boolean isMobilePolicyAllowPartialProvisioning() {
        return getBooleanAttr(Provisioning.A_zmailMobilePolicyAllowPartialProvisioning, true);
    }

    /**
     * whether to allow partial policy enforcement on device; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE
     *
     * @param zmailMobilePolicyAllowPartialProvisioning new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=835)
    public void setMobilePolicyAllowPartialProvisioning(boolean zmailMobilePolicyAllowPartialProvisioning) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowPartialProvisioning, zmailMobilePolicyAllowPartialProvisioning ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to allow partial policy enforcement on device; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE
     *
     * @param zmailMobilePolicyAllowPartialProvisioning new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=835)
    public Map<String,Object> setMobilePolicyAllowPartialProvisioning(boolean zmailMobilePolicyAllowPartialProvisioning, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowPartialProvisioning, zmailMobilePolicyAllowPartialProvisioning ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether to allow partial policy enforcement on device; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=835)
    public void unsetMobilePolicyAllowPartialProvisioning() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowPartialProvisioning, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to allow partial policy enforcement on device; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=835)
    public Map<String,Object> unsetMobilePolicyAllowPartialProvisioning(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowPartialProvisioning, "");
        return attrs;
    }

    /**
     * whether the mobile device can initiate a remote desktop connection;
     * ignored if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowRemoteDesktop value is set to -1
     *
     * @return zmailMobilePolicyAllowRemoteDesktop, or 1 if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1302)
    public int getMobilePolicyAllowRemoteDesktop() {
        return getIntAttr(Provisioning.A_zmailMobilePolicyAllowRemoteDesktop, 1);
    }

    /**
     * whether the mobile device can initiate a remote desktop connection;
     * ignored if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowRemoteDesktop value is set to -1
     *
     * @param zmailMobilePolicyAllowRemoteDesktop new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1302)
    public void setMobilePolicyAllowRemoteDesktop(int zmailMobilePolicyAllowRemoteDesktop) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowRemoteDesktop, Integer.toString(zmailMobilePolicyAllowRemoteDesktop));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether the mobile device can initiate a remote desktop connection;
     * ignored if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowRemoteDesktop value is set to -1
     *
     * @param zmailMobilePolicyAllowRemoteDesktop new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1302)
    public Map<String,Object> setMobilePolicyAllowRemoteDesktop(int zmailMobilePolicyAllowRemoteDesktop, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowRemoteDesktop, Integer.toString(zmailMobilePolicyAllowRemoteDesktop));
        return attrs;
    }

    /**
     * whether the mobile device can initiate a remote desktop connection;
     * ignored if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowRemoteDesktop value is set to -1
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1302)
    public void unsetMobilePolicyAllowRemoteDesktop() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowRemoteDesktop, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether the mobile device can initiate a remote desktop connection;
     * ignored if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowRemoteDesktop value is set to -1
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1302)
    public Map<String,Object> unsetMobilePolicyAllowRemoteDesktop(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowRemoteDesktop, "");
        return attrs;
    }

    /**
     * whether the messaging application on the device can negotiate the
     * encryption algorithm if a recipient&#039;s certificate doesn&#039;t
     * support the specified encryption algorithm; 0 - BlockNegotiation 1 -
     * OnlyStrongAlgorithmNegotiation 2 - AllowAnyAlgorithmNegotiation
     * ignored if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowSMIMEEncryptionAlgorithmNegotiation value is
     * set to -1
     *
     * @return zmailMobilePolicyAllowSMIMEEncryptionAlgorithmNegotiation, or 2 if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1298)
    public int getMobilePolicyAllowSMIMEEncryptionAlgorithmNegotiation() {
        return getIntAttr(Provisioning.A_zmailMobilePolicyAllowSMIMEEncryptionAlgorithmNegotiation, 2);
    }

    /**
     * whether the messaging application on the device can negotiate the
     * encryption algorithm if a recipient&#039;s certificate doesn&#039;t
     * support the specified encryption algorithm; 0 - BlockNegotiation 1 -
     * OnlyStrongAlgorithmNegotiation 2 - AllowAnyAlgorithmNegotiation
     * ignored if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowSMIMEEncryptionAlgorithmNegotiation value is
     * set to -1
     *
     * @param zmailMobilePolicyAllowSMIMEEncryptionAlgorithmNegotiation new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1298)
    public void setMobilePolicyAllowSMIMEEncryptionAlgorithmNegotiation(int zmailMobilePolicyAllowSMIMEEncryptionAlgorithmNegotiation) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowSMIMEEncryptionAlgorithmNegotiation, Integer.toString(zmailMobilePolicyAllowSMIMEEncryptionAlgorithmNegotiation));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether the messaging application on the device can negotiate the
     * encryption algorithm if a recipient&#039;s certificate doesn&#039;t
     * support the specified encryption algorithm; 0 - BlockNegotiation 1 -
     * OnlyStrongAlgorithmNegotiation 2 - AllowAnyAlgorithmNegotiation
     * ignored if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowSMIMEEncryptionAlgorithmNegotiation value is
     * set to -1
     *
     * @param zmailMobilePolicyAllowSMIMEEncryptionAlgorithmNegotiation new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1298)
    public Map<String,Object> setMobilePolicyAllowSMIMEEncryptionAlgorithmNegotiation(int zmailMobilePolicyAllowSMIMEEncryptionAlgorithmNegotiation, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowSMIMEEncryptionAlgorithmNegotiation, Integer.toString(zmailMobilePolicyAllowSMIMEEncryptionAlgorithmNegotiation));
        return attrs;
    }

    /**
     * whether the messaging application on the device can negotiate the
     * encryption algorithm if a recipient&#039;s certificate doesn&#039;t
     * support the specified encryption algorithm; 0 - BlockNegotiation 1 -
     * OnlyStrongAlgorithmNegotiation 2 - AllowAnyAlgorithmNegotiation
     * ignored if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowSMIMEEncryptionAlgorithmNegotiation value is
     * set to -1
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1298)
    public void unsetMobilePolicyAllowSMIMEEncryptionAlgorithmNegotiation() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowSMIMEEncryptionAlgorithmNegotiation, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether the messaging application on the device can negotiate the
     * encryption algorithm if a recipient&#039;s certificate doesn&#039;t
     * support the specified encryption algorithm; 0 - BlockNegotiation 1 -
     * OnlyStrongAlgorithmNegotiation 2 - AllowAnyAlgorithmNegotiation
     * ignored if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowSMIMEEncryptionAlgorithmNegotiation value is
     * set to -1
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1298)
    public Map<String,Object> unsetMobilePolicyAllowSMIMEEncryptionAlgorithmNegotiation(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowSMIMEEncryptionAlgorithmNegotiation, "");
        return attrs;
    }

    /**
     * whether S/MIME software certificates are allowed; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowSMIMESoftCerts value is set to -1
     *
     * @return zmailMobilePolicyAllowSMIMESoftCerts, or 1 if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1299)
    public int getMobilePolicyAllowSMIMESoftCerts() {
        return getIntAttr(Provisioning.A_zmailMobilePolicyAllowSMIMESoftCerts, 1);
    }

    /**
     * whether S/MIME software certificates are allowed; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowSMIMESoftCerts value is set to -1
     *
     * @param zmailMobilePolicyAllowSMIMESoftCerts new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1299)
    public void setMobilePolicyAllowSMIMESoftCerts(int zmailMobilePolicyAllowSMIMESoftCerts) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowSMIMESoftCerts, Integer.toString(zmailMobilePolicyAllowSMIMESoftCerts));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether S/MIME software certificates are allowed; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowSMIMESoftCerts value is set to -1
     *
     * @param zmailMobilePolicyAllowSMIMESoftCerts new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1299)
    public Map<String,Object> setMobilePolicyAllowSMIMESoftCerts(int zmailMobilePolicyAllowSMIMESoftCerts, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowSMIMESoftCerts, Integer.toString(zmailMobilePolicyAllowSMIMESoftCerts));
        return attrs;
    }

    /**
     * whether S/MIME software certificates are allowed; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowSMIMESoftCerts value is set to -1
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1299)
    public void unsetMobilePolicyAllowSMIMESoftCerts() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowSMIMESoftCerts, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether S/MIME software certificates are allowed; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowSMIMESoftCerts value is set to -1
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1299)
    public Map<String,Object> unsetMobilePolicyAllowSMIMESoftCerts(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowSMIMESoftCerts, "");
        return attrs;
    }

    /**
     * whether to allow simple password; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyDevicePasswordEnabled=FALSE
     *
     * @return zmailMobilePolicyAllowSimpleDevicePassword, or false if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=839)
    public boolean isMobilePolicyAllowSimpleDevicePassword() {
        return getBooleanAttr(Provisioning.A_zmailMobilePolicyAllowSimpleDevicePassword, false);
    }

    /**
     * whether to allow simple password; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyDevicePasswordEnabled=FALSE
     *
     * @param zmailMobilePolicyAllowSimpleDevicePassword new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=839)
    public void setMobilePolicyAllowSimpleDevicePassword(boolean zmailMobilePolicyAllowSimpleDevicePassword) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowSimpleDevicePassword, zmailMobilePolicyAllowSimpleDevicePassword ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to allow simple password; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyDevicePasswordEnabled=FALSE
     *
     * @param zmailMobilePolicyAllowSimpleDevicePassword new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=839)
    public Map<String,Object> setMobilePolicyAllowSimpleDevicePassword(boolean zmailMobilePolicyAllowSimpleDevicePassword, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowSimpleDevicePassword, zmailMobilePolicyAllowSimpleDevicePassword ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether to allow simple password; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyDevicePasswordEnabled=FALSE
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=839)
    public void unsetMobilePolicyAllowSimpleDevicePassword() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowSimpleDevicePassword, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to allow simple password; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyDevicePasswordEnabled=FALSE
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=839)
    public Map<String,Object> unsetMobilePolicyAllowSimpleDevicePassword(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowSimpleDevicePassword, "");
        return attrs;
    }

    /**
     * whether to allow removable storage on device; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowStorageCard value is set to -1
     *
     * @return zmailMobilePolicyAllowStorageCard, or 1 if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1277)
    public int getMobilePolicyAllowStorageCard() {
        return getIntAttr(Provisioning.A_zmailMobilePolicyAllowStorageCard, 1);
    }

    /**
     * whether to allow removable storage on device; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowStorageCard value is set to -1
     *
     * @param zmailMobilePolicyAllowStorageCard new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1277)
    public void setMobilePolicyAllowStorageCard(int zmailMobilePolicyAllowStorageCard) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowStorageCard, Integer.toString(zmailMobilePolicyAllowStorageCard));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to allow removable storage on device; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowStorageCard value is set to -1
     *
     * @param zmailMobilePolicyAllowStorageCard new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1277)
    public Map<String,Object> setMobilePolicyAllowStorageCard(int zmailMobilePolicyAllowStorageCard, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowStorageCard, Integer.toString(zmailMobilePolicyAllowStorageCard));
        return attrs;
    }

    /**
     * whether to allow removable storage on device; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowStorageCard value is set to -1
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1277)
    public void unsetMobilePolicyAllowStorageCard() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowStorageCard, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to allow removable storage on device; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowStorageCard value is set to -1
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1277)
    public Map<String,Object> unsetMobilePolicyAllowStorageCard(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowStorageCard, "");
        return attrs;
    }

    /**
     * whether text messaging is allowed from the device; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowTextMessaging value is set to -1
     *
     * @return zmailMobilePolicyAllowTextMessaging, or 1 if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1283)
    public int getMobilePolicyAllowTextMessaging() {
        return getIntAttr(Provisioning.A_zmailMobilePolicyAllowTextMessaging, 1);
    }

    /**
     * whether text messaging is allowed from the device; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowTextMessaging value is set to -1
     *
     * @param zmailMobilePolicyAllowTextMessaging new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1283)
    public void setMobilePolicyAllowTextMessaging(int zmailMobilePolicyAllowTextMessaging) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowTextMessaging, Integer.toString(zmailMobilePolicyAllowTextMessaging));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether text messaging is allowed from the device; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowTextMessaging value is set to -1
     *
     * @param zmailMobilePolicyAllowTextMessaging new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1283)
    public Map<String,Object> setMobilePolicyAllowTextMessaging(int zmailMobilePolicyAllowTextMessaging, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowTextMessaging, Integer.toString(zmailMobilePolicyAllowTextMessaging));
        return attrs;
    }

    /**
     * whether text messaging is allowed from the device; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowTextMessaging value is set to -1
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1283)
    public void unsetMobilePolicyAllowTextMessaging() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowTextMessaging, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether text messaging is allowed from the device; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowTextMessaging value is set to -1
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1283)
    public Map<String,Object> unsetMobilePolicyAllowTextMessaging(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowTextMessaging, "");
        return attrs;
    }

    /**
     * whether unsigned applications are allowed on device; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowUnsignedApplications value is set to -1
     *
     * @return zmailMobilePolicyAllowUnsignedApplications, or 1 if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1280)
    public int getMobilePolicyAllowUnsignedApplications() {
        return getIntAttr(Provisioning.A_zmailMobilePolicyAllowUnsignedApplications, 1);
    }

    /**
     * whether unsigned applications are allowed on device; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowUnsignedApplications value is set to -1
     *
     * @param zmailMobilePolicyAllowUnsignedApplications new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1280)
    public void setMobilePolicyAllowUnsignedApplications(int zmailMobilePolicyAllowUnsignedApplications) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowUnsignedApplications, Integer.toString(zmailMobilePolicyAllowUnsignedApplications));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether unsigned applications are allowed on device; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowUnsignedApplications value is set to -1
     *
     * @param zmailMobilePolicyAllowUnsignedApplications new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1280)
    public Map<String,Object> setMobilePolicyAllowUnsignedApplications(int zmailMobilePolicyAllowUnsignedApplications, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowUnsignedApplications, Integer.toString(zmailMobilePolicyAllowUnsignedApplications));
        return attrs;
    }

    /**
     * whether unsigned applications are allowed on device; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowUnsignedApplications value is set to -1
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1280)
    public void unsetMobilePolicyAllowUnsignedApplications() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowUnsignedApplications, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether unsigned applications are allowed on device; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowUnsignedApplications value is set to -1
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1280)
    public Map<String,Object> unsetMobilePolicyAllowUnsignedApplications(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowUnsignedApplications, "");
        return attrs;
    }

    /**
     * whether unsigned installation packages are allowed on device; ignored
     * if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowUnsignedInstallationPackages value is set to -1
     *
     * @return zmailMobilePolicyAllowUnsignedInstallationPackages, or 1 if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1281)
    public int getMobilePolicyAllowUnsignedInstallationPackages() {
        return getIntAttr(Provisioning.A_zmailMobilePolicyAllowUnsignedInstallationPackages, 1);
    }

    /**
     * whether unsigned installation packages are allowed on device; ignored
     * if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowUnsignedInstallationPackages value is set to -1
     *
     * @param zmailMobilePolicyAllowUnsignedInstallationPackages new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1281)
    public void setMobilePolicyAllowUnsignedInstallationPackages(int zmailMobilePolicyAllowUnsignedInstallationPackages) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowUnsignedInstallationPackages, Integer.toString(zmailMobilePolicyAllowUnsignedInstallationPackages));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether unsigned installation packages are allowed on device; ignored
     * if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowUnsignedInstallationPackages value is set to -1
     *
     * @param zmailMobilePolicyAllowUnsignedInstallationPackages new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1281)
    public Map<String,Object> setMobilePolicyAllowUnsignedInstallationPackages(int zmailMobilePolicyAllowUnsignedInstallationPackages, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowUnsignedInstallationPackages, Integer.toString(zmailMobilePolicyAllowUnsignedInstallationPackages));
        return attrs;
    }

    /**
     * whether unsigned installation packages are allowed on device; ignored
     * if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowUnsignedInstallationPackages value is set to -1
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1281)
    public void unsetMobilePolicyAllowUnsignedInstallationPackages() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowUnsignedInstallationPackages, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether unsigned installation packages are allowed on device; ignored
     * if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyAllowUnsignedInstallationPackages value is set to -1
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1281)
    public Map<String,Object> unsetMobilePolicyAllowUnsignedInstallationPackages(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowUnsignedInstallationPackages, "");
        return attrs;
    }

    /**
     * whether wireless Internet access is allowed on the device; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or zmailMobilePolicyAllowWiFi
     * value is set to -1
     *
     * @return zmailMobilePolicyAllowWiFi, or 1 if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1282)
    public int getMobilePolicyAllowWiFi() {
        return getIntAttr(Provisioning.A_zmailMobilePolicyAllowWiFi, 1);
    }

    /**
     * whether wireless Internet access is allowed on the device; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or zmailMobilePolicyAllowWiFi
     * value is set to -1
     *
     * @param zmailMobilePolicyAllowWiFi new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1282)
    public void setMobilePolicyAllowWiFi(int zmailMobilePolicyAllowWiFi) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowWiFi, Integer.toString(zmailMobilePolicyAllowWiFi));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether wireless Internet access is allowed on the device; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or zmailMobilePolicyAllowWiFi
     * value is set to -1
     *
     * @param zmailMobilePolicyAllowWiFi new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1282)
    public Map<String,Object> setMobilePolicyAllowWiFi(int zmailMobilePolicyAllowWiFi, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowWiFi, Integer.toString(zmailMobilePolicyAllowWiFi));
        return attrs;
    }

    /**
     * whether wireless Internet access is allowed on the device; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or zmailMobilePolicyAllowWiFi
     * value is set to -1
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1282)
    public void unsetMobilePolicyAllowWiFi() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowWiFi, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether wireless Internet access is allowed on the device; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or zmailMobilePolicyAllowWiFi
     * value is set to -1
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1282)
    public Map<String,Object> unsetMobilePolicyAllowWiFi(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAllowWiFi, "");
        return attrs;
    }

    /**
     * whether to require alpha-numeric password as device pin; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyDevicePasswordEnabled=FALSE
     *
     * @return zmailMobilePolicyAlphanumericDevicePasswordRequired, or false if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=840)
    public boolean isMobilePolicyAlphanumericDevicePasswordRequired() {
        return getBooleanAttr(Provisioning.A_zmailMobilePolicyAlphanumericDevicePasswordRequired, false);
    }

    /**
     * whether to require alpha-numeric password as device pin; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyDevicePasswordEnabled=FALSE
     *
     * @param zmailMobilePolicyAlphanumericDevicePasswordRequired new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=840)
    public void setMobilePolicyAlphanumericDevicePasswordRequired(boolean zmailMobilePolicyAlphanumericDevicePasswordRequired) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAlphanumericDevicePasswordRequired, zmailMobilePolicyAlphanumericDevicePasswordRequired ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to require alpha-numeric password as device pin; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyDevicePasswordEnabled=FALSE
     *
     * @param zmailMobilePolicyAlphanumericDevicePasswordRequired new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=840)
    public Map<String,Object> setMobilePolicyAlphanumericDevicePasswordRequired(boolean zmailMobilePolicyAlphanumericDevicePasswordRequired, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAlphanumericDevicePasswordRequired, zmailMobilePolicyAlphanumericDevicePasswordRequired ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether to require alpha-numeric password as device pin; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyDevicePasswordEnabled=FALSE
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=840)
    public void unsetMobilePolicyAlphanumericDevicePasswordRequired() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAlphanumericDevicePasswordRequired, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to require alpha-numeric password as device pin; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyDevicePasswordEnabled=FALSE
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=840)
    public Map<String,Object> unsetMobilePolicyAlphanumericDevicePasswordRequired(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyAlphanumericDevicePasswordRequired, "");
        return attrs;
    }

    /**
     * approved application for the mobile device the value contains a SHA1
     * hash (typically 40 characters long) for the application file (.exe,
     * .dll etc) ignored if zmailFeatureMobilePolicyEnabled=FALSE
     *
     * @return zmailMobilePolicyApprovedApplication, or empty array if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1305)
    public String[] getMobilePolicyApprovedApplication() {
        return getMultiAttr(Provisioning.A_zmailMobilePolicyApprovedApplication);
    }

    /**
     * approved application for the mobile device the value contains a SHA1
     * hash (typically 40 characters long) for the application file (.exe,
     * .dll etc) ignored if zmailFeatureMobilePolicyEnabled=FALSE
     *
     * @param zmailMobilePolicyApprovedApplication new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1305)
    public void setMobilePolicyApprovedApplication(String[] zmailMobilePolicyApprovedApplication) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyApprovedApplication, zmailMobilePolicyApprovedApplication);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * approved application for the mobile device the value contains a SHA1
     * hash (typically 40 characters long) for the application file (.exe,
     * .dll etc) ignored if zmailFeatureMobilePolicyEnabled=FALSE
     *
     * @param zmailMobilePolicyApprovedApplication new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1305)
    public Map<String,Object> setMobilePolicyApprovedApplication(String[] zmailMobilePolicyApprovedApplication, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyApprovedApplication, zmailMobilePolicyApprovedApplication);
        return attrs;
    }

    /**
     * approved application for the mobile device the value contains a SHA1
     * hash (typically 40 characters long) for the application file (.exe,
     * .dll etc) ignored if zmailFeatureMobilePolicyEnabled=FALSE
     *
     * @param zmailMobilePolicyApprovedApplication new to add to existing values
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1305)
    public void addMobilePolicyApprovedApplication(String zmailMobilePolicyApprovedApplication) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "+" + Provisioning.A_zmailMobilePolicyApprovedApplication, zmailMobilePolicyApprovedApplication);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * approved application for the mobile device the value contains a SHA1
     * hash (typically 40 characters long) for the application file (.exe,
     * .dll etc) ignored if zmailFeatureMobilePolicyEnabled=FALSE
     *
     * @param zmailMobilePolicyApprovedApplication new to add to existing values
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1305)
    public Map<String,Object> addMobilePolicyApprovedApplication(String zmailMobilePolicyApprovedApplication, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "+" + Provisioning.A_zmailMobilePolicyApprovedApplication, zmailMobilePolicyApprovedApplication);
        return attrs;
    }

    /**
     * approved application for the mobile device the value contains a SHA1
     * hash (typically 40 characters long) for the application file (.exe,
     * .dll etc) ignored if zmailFeatureMobilePolicyEnabled=FALSE
     *
     * @param zmailMobilePolicyApprovedApplication existing value to remove
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1305)
    public void removeMobilePolicyApprovedApplication(String zmailMobilePolicyApprovedApplication) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "-" + Provisioning.A_zmailMobilePolicyApprovedApplication, zmailMobilePolicyApprovedApplication);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * approved application for the mobile device the value contains a SHA1
     * hash (typically 40 characters long) for the application file (.exe,
     * .dll etc) ignored if zmailFeatureMobilePolicyEnabled=FALSE
     *
     * @param zmailMobilePolicyApprovedApplication existing value to remove
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1305)
    public Map<String,Object> removeMobilePolicyApprovedApplication(String zmailMobilePolicyApprovedApplication, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "-" + Provisioning.A_zmailMobilePolicyApprovedApplication, zmailMobilePolicyApprovedApplication);
        return attrs;
    }

    /**
     * approved application for the mobile device the value contains a SHA1
     * hash (typically 40 characters long) for the application file (.exe,
     * .dll etc) ignored if zmailFeatureMobilePolicyEnabled=FALSE
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1305)
    public void unsetMobilePolicyApprovedApplication() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyApprovedApplication, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * approved application for the mobile device the value contains a SHA1
     * hash (typically 40 characters long) for the application file (.exe,
     * .dll etc) ignored if zmailFeatureMobilePolicyEnabled=FALSE
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1305)
    public Map<String,Object> unsetMobilePolicyApprovedApplication(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyApprovedApplication, "");
        return attrs;
    }

    /**
     * This is the internal attr for
     * &quot;zmailMobilePolicyApprovedApplication&quot; which can only store
     * app hash (to keep consistent with ActiveSync specification. This
     * attr&#039;s format is &quot;app_name&quot;:&quot;app_hash&quot;, and
     * is used for showing both the app name and hash in admin console UI
     *
     * @return zmailMobilePolicyApprovedApplicationList, or empty array if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1411)
    public String[] getMobilePolicyApprovedApplicationList() {
        return getMultiAttr(Provisioning.A_zmailMobilePolicyApprovedApplicationList);
    }

    /**
     * This is the internal attr for
     * &quot;zmailMobilePolicyApprovedApplication&quot; which can only store
     * app hash (to keep consistent with ActiveSync specification. This
     * attr&#039;s format is &quot;app_name&quot;:&quot;app_hash&quot;, and
     * is used for showing both the app name and hash in admin console UI
     *
     * @param zmailMobilePolicyApprovedApplicationList new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1411)
    public void setMobilePolicyApprovedApplicationList(String[] zmailMobilePolicyApprovedApplicationList) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyApprovedApplicationList, zmailMobilePolicyApprovedApplicationList);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * This is the internal attr for
     * &quot;zmailMobilePolicyApprovedApplication&quot; which can only store
     * app hash (to keep consistent with ActiveSync specification. This
     * attr&#039;s format is &quot;app_name&quot;:&quot;app_hash&quot;, and
     * is used for showing both the app name and hash in admin console UI
     *
     * @param zmailMobilePolicyApprovedApplicationList new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1411)
    public Map<String,Object> setMobilePolicyApprovedApplicationList(String[] zmailMobilePolicyApprovedApplicationList, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyApprovedApplicationList, zmailMobilePolicyApprovedApplicationList);
        return attrs;
    }

    /**
     * This is the internal attr for
     * &quot;zmailMobilePolicyApprovedApplication&quot; which can only store
     * app hash (to keep consistent with ActiveSync specification. This
     * attr&#039;s format is &quot;app_name&quot;:&quot;app_hash&quot;, and
     * is used for showing both the app name and hash in admin console UI
     *
     * @param zmailMobilePolicyApprovedApplicationList new to add to existing values
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1411)
    public void addMobilePolicyApprovedApplicationList(String zmailMobilePolicyApprovedApplicationList) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "+" + Provisioning.A_zmailMobilePolicyApprovedApplicationList, zmailMobilePolicyApprovedApplicationList);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * This is the internal attr for
     * &quot;zmailMobilePolicyApprovedApplication&quot; which can only store
     * app hash (to keep consistent with ActiveSync specification. This
     * attr&#039;s format is &quot;app_name&quot;:&quot;app_hash&quot;, and
     * is used for showing both the app name and hash in admin console UI
     *
     * @param zmailMobilePolicyApprovedApplicationList new to add to existing values
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1411)
    public Map<String,Object> addMobilePolicyApprovedApplicationList(String zmailMobilePolicyApprovedApplicationList, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "+" + Provisioning.A_zmailMobilePolicyApprovedApplicationList, zmailMobilePolicyApprovedApplicationList);
        return attrs;
    }

    /**
     * This is the internal attr for
     * &quot;zmailMobilePolicyApprovedApplication&quot; which can only store
     * app hash (to keep consistent with ActiveSync specification. This
     * attr&#039;s format is &quot;app_name&quot;:&quot;app_hash&quot;, and
     * is used for showing both the app name and hash in admin console UI
     *
     * @param zmailMobilePolicyApprovedApplicationList existing value to remove
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1411)
    public void removeMobilePolicyApprovedApplicationList(String zmailMobilePolicyApprovedApplicationList) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "-" + Provisioning.A_zmailMobilePolicyApprovedApplicationList, zmailMobilePolicyApprovedApplicationList);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * This is the internal attr for
     * &quot;zmailMobilePolicyApprovedApplication&quot; which can only store
     * app hash (to keep consistent with ActiveSync specification. This
     * attr&#039;s format is &quot;app_name&quot;:&quot;app_hash&quot;, and
     * is used for showing both the app name and hash in admin console UI
     *
     * @param zmailMobilePolicyApprovedApplicationList existing value to remove
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1411)
    public Map<String,Object> removeMobilePolicyApprovedApplicationList(String zmailMobilePolicyApprovedApplicationList, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "-" + Provisioning.A_zmailMobilePolicyApprovedApplicationList, zmailMobilePolicyApprovedApplicationList);
        return attrs;
    }

    /**
     * This is the internal attr for
     * &quot;zmailMobilePolicyApprovedApplication&quot; which can only store
     * app hash (to keep consistent with ActiveSync specification. This
     * attr&#039;s format is &quot;app_name&quot;:&quot;app_hash&quot;, and
     * is used for showing both the app name and hash in admin console UI
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1411)
    public void unsetMobilePolicyApprovedApplicationList() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyApprovedApplicationList, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * This is the internal attr for
     * &quot;zmailMobilePolicyApprovedApplication&quot; which can only store
     * app hash (to keep consistent with ActiveSync specification. This
     * attr&#039;s format is &quot;app_name&quot;:&quot;app_hash&quot;, and
     * is used for showing both the app name and hash in admin console UI
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1411)
    public Map<String,Object> unsetMobilePolicyApprovedApplicationList(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyApprovedApplicationList, "");
        return attrs;
    }

    /**
     * require data encryption on device; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE
     *
     * @return zmailMobilePolicyDeviceEncryptionEnabled, or true if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=847)
    public boolean isMobilePolicyDeviceEncryptionEnabled() {
        return getBooleanAttr(Provisioning.A_zmailMobilePolicyDeviceEncryptionEnabled, true);
    }

    /**
     * require data encryption on device; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE
     *
     * @param zmailMobilePolicyDeviceEncryptionEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=847)
    public void setMobilePolicyDeviceEncryptionEnabled(boolean zmailMobilePolicyDeviceEncryptionEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyDeviceEncryptionEnabled, zmailMobilePolicyDeviceEncryptionEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * require data encryption on device; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE
     *
     * @param zmailMobilePolicyDeviceEncryptionEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=847)
    public Map<String,Object> setMobilePolicyDeviceEncryptionEnabled(boolean zmailMobilePolicyDeviceEncryptionEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyDeviceEncryptionEnabled, zmailMobilePolicyDeviceEncryptionEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * require data encryption on device; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=847)
    public void unsetMobilePolicyDeviceEncryptionEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyDeviceEncryptionEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * require data encryption on device; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=847)
    public Map<String,Object> unsetMobilePolicyDeviceEncryptionEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyDeviceEncryptionEnabled, "");
        return attrs;
    }

    /**
     * whether to force pin on device; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE
     *
     * @return zmailMobilePolicyDevicePasswordEnabled, or true if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=837)
    public boolean isMobilePolicyDevicePasswordEnabled() {
        return getBooleanAttr(Provisioning.A_zmailMobilePolicyDevicePasswordEnabled, true);
    }

    /**
     * whether to force pin on device; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE
     *
     * @param zmailMobilePolicyDevicePasswordEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=837)
    public void setMobilePolicyDevicePasswordEnabled(boolean zmailMobilePolicyDevicePasswordEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyDevicePasswordEnabled, zmailMobilePolicyDevicePasswordEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to force pin on device; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE
     *
     * @param zmailMobilePolicyDevicePasswordEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=837)
    public Map<String,Object> setMobilePolicyDevicePasswordEnabled(boolean zmailMobilePolicyDevicePasswordEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyDevicePasswordEnabled, zmailMobilePolicyDevicePasswordEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether to force pin on device; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=837)
    public void unsetMobilePolicyDevicePasswordEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyDevicePasswordEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to force pin on device; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=837)
    public Map<String,Object> unsetMobilePolicyDevicePasswordEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyDevicePasswordEnabled, "");
        return attrs;
    }

    /**
     * number of days before device pin must expire; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyDevicePasswordEnabled=FALSE
     *
     * @return zmailMobilePolicyDevicePasswordExpiration, or 0 if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=842)
    public int getMobilePolicyDevicePasswordExpiration() {
        return getIntAttr(Provisioning.A_zmailMobilePolicyDevicePasswordExpiration, 0);
    }

    /**
     * number of days before device pin must expire; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyDevicePasswordEnabled=FALSE
     *
     * @param zmailMobilePolicyDevicePasswordExpiration new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=842)
    public void setMobilePolicyDevicePasswordExpiration(int zmailMobilePolicyDevicePasswordExpiration) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyDevicePasswordExpiration, Integer.toString(zmailMobilePolicyDevicePasswordExpiration));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * number of days before device pin must expire; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyDevicePasswordEnabled=FALSE
     *
     * @param zmailMobilePolicyDevicePasswordExpiration new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=842)
    public Map<String,Object> setMobilePolicyDevicePasswordExpiration(int zmailMobilePolicyDevicePasswordExpiration, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyDevicePasswordExpiration, Integer.toString(zmailMobilePolicyDevicePasswordExpiration));
        return attrs;
    }

    /**
     * number of days before device pin must expire; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyDevicePasswordEnabled=FALSE
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=842)
    public void unsetMobilePolicyDevicePasswordExpiration() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyDevicePasswordExpiration, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * number of days before device pin must expire; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyDevicePasswordEnabled=FALSE
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=842)
    public Map<String,Object> unsetMobilePolicyDevicePasswordExpiration(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyDevicePasswordExpiration, "");
        return attrs;
    }

    /**
     * number of previously used password stored in history; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyDevicePasswordEnabled=FALSE or
     * zmailMobilePolicyDevicePasswordExpiration=0
     *
     * @return zmailMobilePolicyDevicePasswordHistory, or 8 if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=843)
    public int getMobilePolicyDevicePasswordHistory() {
        return getIntAttr(Provisioning.A_zmailMobilePolicyDevicePasswordHistory, 8);
    }

    /**
     * number of previously used password stored in history; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyDevicePasswordEnabled=FALSE or
     * zmailMobilePolicyDevicePasswordExpiration=0
     *
     * @param zmailMobilePolicyDevicePasswordHistory new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=843)
    public void setMobilePolicyDevicePasswordHistory(int zmailMobilePolicyDevicePasswordHistory) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyDevicePasswordHistory, Integer.toString(zmailMobilePolicyDevicePasswordHistory));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * number of previously used password stored in history; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyDevicePasswordEnabled=FALSE or
     * zmailMobilePolicyDevicePasswordExpiration=0
     *
     * @param zmailMobilePolicyDevicePasswordHistory new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=843)
    public Map<String,Object> setMobilePolicyDevicePasswordHistory(int zmailMobilePolicyDevicePasswordHistory, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyDevicePasswordHistory, Integer.toString(zmailMobilePolicyDevicePasswordHistory));
        return attrs;
    }

    /**
     * number of previously used password stored in history; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyDevicePasswordEnabled=FALSE or
     * zmailMobilePolicyDevicePasswordExpiration=0
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=843)
    public void unsetMobilePolicyDevicePasswordHistory() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyDevicePasswordHistory, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * number of previously used password stored in history; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyDevicePasswordEnabled=FALSE or
     * zmailMobilePolicyDevicePasswordExpiration=0
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=843)
    public Map<String,Object> unsetMobilePolicyDevicePasswordHistory(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyDevicePasswordHistory, "");
        return attrs;
    }

    /**
     * the maximum range of calendar days that can be synchronized to the
     * device; 0 - PAST ALL 4 - Two Weeks 5 - One Month 6 - Three Months 7 -
     * Six Months ignored if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyMaxCalendarAgeFilter value is set to -1, 1, 2 or, 3
     *
     * @return zmailMobilePolicyMaxCalendarAgeFilter, or 4 if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1289)
    public int getMobilePolicyMaxCalendarAgeFilter() {
        return getIntAttr(Provisioning.A_zmailMobilePolicyMaxCalendarAgeFilter, 4);
    }

    /**
     * the maximum range of calendar days that can be synchronized to the
     * device; 0 - PAST ALL 4 - Two Weeks 5 - One Month 6 - Three Months 7 -
     * Six Months ignored if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyMaxCalendarAgeFilter value is set to -1, 1, 2 or, 3
     *
     * @param zmailMobilePolicyMaxCalendarAgeFilter new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1289)
    public void setMobilePolicyMaxCalendarAgeFilter(int zmailMobilePolicyMaxCalendarAgeFilter) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyMaxCalendarAgeFilter, Integer.toString(zmailMobilePolicyMaxCalendarAgeFilter));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * the maximum range of calendar days that can be synchronized to the
     * device; 0 - PAST ALL 4 - Two Weeks 5 - One Month 6 - Three Months 7 -
     * Six Months ignored if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyMaxCalendarAgeFilter value is set to -1, 1, 2 or, 3
     *
     * @param zmailMobilePolicyMaxCalendarAgeFilter new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1289)
    public Map<String,Object> setMobilePolicyMaxCalendarAgeFilter(int zmailMobilePolicyMaxCalendarAgeFilter, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyMaxCalendarAgeFilter, Integer.toString(zmailMobilePolicyMaxCalendarAgeFilter));
        return attrs;
    }

    /**
     * the maximum range of calendar days that can be synchronized to the
     * device; 0 - PAST ALL 4 - Two Weeks 5 - One Month 6 - Three Months 7 -
     * Six Months ignored if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyMaxCalendarAgeFilter value is set to -1, 1, 2 or, 3
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1289)
    public void unsetMobilePolicyMaxCalendarAgeFilter() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyMaxCalendarAgeFilter, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * the maximum range of calendar days that can be synchronized to the
     * device; 0 - PAST ALL 4 - Two Weeks 5 - One Month 6 - Three Months 7 -
     * Six Months ignored if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyMaxCalendarAgeFilter value is set to -1, 1, 2 or, 3
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1289)
    public Map<String,Object> unsetMobilePolicyMaxCalendarAgeFilter(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyMaxCalendarAgeFilter, "");
        return attrs;
    }

    /**
     * number of consecutive incorrect pin input before device is wiped;
     * ignored if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyDevicePasswordEnabled=FALSE
     *
     * @return zmailMobilePolicyMaxDevicePasswordFailedAttempts, or 4 if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=845)
    public int getMobilePolicyMaxDevicePasswordFailedAttempts() {
        return getIntAttr(Provisioning.A_zmailMobilePolicyMaxDevicePasswordFailedAttempts, 4);
    }

    /**
     * number of consecutive incorrect pin input before device is wiped;
     * ignored if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyDevicePasswordEnabled=FALSE
     *
     * @param zmailMobilePolicyMaxDevicePasswordFailedAttempts new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=845)
    public void setMobilePolicyMaxDevicePasswordFailedAttempts(int zmailMobilePolicyMaxDevicePasswordFailedAttempts) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyMaxDevicePasswordFailedAttempts, Integer.toString(zmailMobilePolicyMaxDevicePasswordFailedAttempts));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * number of consecutive incorrect pin input before device is wiped;
     * ignored if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyDevicePasswordEnabled=FALSE
     *
     * @param zmailMobilePolicyMaxDevicePasswordFailedAttempts new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=845)
    public Map<String,Object> setMobilePolicyMaxDevicePasswordFailedAttempts(int zmailMobilePolicyMaxDevicePasswordFailedAttempts, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyMaxDevicePasswordFailedAttempts, Integer.toString(zmailMobilePolicyMaxDevicePasswordFailedAttempts));
        return attrs;
    }

    /**
     * number of consecutive incorrect pin input before device is wiped;
     * ignored if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyDevicePasswordEnabled=FALSE
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=845)
    public void unsetMobilePolicyMaxDevicePasswordFailedAttempts() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyMaxDevicePasswordFailedAttempts, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * number of consecutive incorrect pin input before device is wiped;
     * ignored if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyDevicePasswordEnabled=FALSE
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=845)
    public Map<String,Object> unsetMobilePolicyMaxDevicePasswordFailedAttempts(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyMaxDevicePasswordFailedAttempts, "");
        return attrs;
    }

    /**
     * the maximum number of days of e-mail items to synchronize to the
     * device; 0 - PAST ALL 1 - One Day 2 - Three Days 3 - One Week 4 - Two
     * Weeks 5 - One Month ignored if zmailFeatureMobilePolicyEnabled=FALSE
     * or zmailMobilePolicyMaxEmailAgeFilter value is set to -1
     *
     * @return zmailMobilePolicyMaxEmailAgeFilter, or 2 if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1291)
    public int getMobilePolicyMaxEmailAgeFilter() {
        return getIntAttr(Provisioning.A_zmailMobilePolicyMaxEmailAgeFilter, 2);
    }

    /**
     * the maximum number of days of e-mail items to synchronize to the
     * device; 0 - PAST ALL 1 - One Day 2 - Three Days 3 - One Week 4 - Two
     * Weeks 5 - One Month ignored if zmailFeatureMobilePolicyEnabled=FALSE
     * or zmailMobilePolicyMaxEmailAgeFilter value is set to -1
     *
     * @param zmailMobilePolicyMaxEmailAgeFilter new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1291)
    public void setMobilePolicyMaxEmailAgeFilter(int zmailMobilePolicyMaxEmailAgeFilter) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyMaxEmailAgeFilter, Integer.toString(zmailMobilePolicyMaxEmailAgeFilter));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * the maximum number of days of e-mail items to synchronize to the
     * device; 0 - PAST ALL 1 - One Day 2 - Three Days 3 - One Week 4 - Two
     * Weeks 5 - One Month ignored if zmailFeatureMobilePolicyEnabled=FALSE
     * or zmailMobilePolicyMaxEmailAgeFilter value is set to -1
     *
     * @param zmailMobilePolicyMaxEmailAgeFilter new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1291)
    public Map<String,Object> setMobilePolicyMaxEmailAgeFilter(int zmailMobilePolicyMaxEmailAgeFilter, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyMaxEmailAgeFilter, Integer.toString(zmailMobilePolicyMaxEmailAgeFilter));
        return attrs;
    }

    /**
     * the maximum number of days of e-mail items to synchronize to the
     * device; 0 - PAST ALL 1 - One Day 2 - Three Days 3 - One Week 4 - Two
     * Weeks 5 - One Month ignored if zmailFeatureMobilePolicyEnabled=FALSE
     * or zmailMobilePolicyMaxEmailAgeFilter value is set to -1
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1291)
    public void unsetMobilePolicyMaxEmailAgeFilter() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyMaxEmailAgeFilter, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * the maximum number of days of e-mail items to synchronize to the
     * device; 0 - PAST ALL 1 - One Day 2 - Three Days 3 - One Week 4 - Two
     * Weeks 5 - One Month ignored if zmailFeatureMobilePolicyEnabled=FALSE
     * or zmailMobilePolicyMaxEmailAgeFilter value is set to -1
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1291)
    public Map<String,Object> unsetMobilePolicyMaxEmailAgeFilter(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyMaxEmailAgeFilter, "");
        return attrs;
    }

    /**
     * the maximum size at which e-mail messages are truncated when
     * synchronized to the device; The value is specified in kilobytes (KB).
     * ignored if zmailFeatureMobilePolicyEnabled=FALSE
     *
     * @return zmailMobilePolicyMaxEmailBodyTruncationSize, or -1 if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1292)
    public int getMobilePolicyMaxEmailBodyTruncationSize() {
        return getIntAttr(Provisioning.A_zmailMobilePolicyMaxEmailBodyTruncationSize, -1);
    }

    /**
     * the maximum size at which e-mail messages are truncated when
     * synchronized to the device; The value is specified in kilobytes (KB).
     * ignored if zmailFeatureMobilePolicyEnabled=FALSE
     *
     * @param zmailMobilePolicyMaxEmailBodyTruncationSize new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1292)
    public void setMobilePolicyMaxEmailBodyTruncationSize(int zmailMobilePolicyMaxEmailBodyTruncationSize) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyMaxEmailBodyTruncationSize, Integer.toString(zmailMobilePolicyMaxEmailBodyTruncationSize));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * the maximum size at which e-mail messages are truncated when
     * synchronized to the device; The value is specified in kilobytes (KB).
     * ignored if zmailFeatureMobilePolicyEnabled=FALSE
     *
     * @param zmailMobilePolicyMaxEmailBodyTruncationSize new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1292)
    public Map<String,Object> setMobilePolicyMaxEmailBodyTruncationSize(int zmailMobilePolicyMaxEmailBodyTruncationSize, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyMaxEmailBodyTruncationSize, Integer.toString(zmailMobilePolicyMaxEmailBodyTruncationSize));
        return attrs;
    }

    /**
     * the maximum size at which e-mail messages are truncated when
     * synchronized to the device; The value is specified in kilobytes (KB).
     * ignored if zmailFeatureMobilePolicyEnabled=FALSE
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1292)
    public void unsetMobilePolicyMaxEmailBodyTruncationSize() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyMaxEmailBodyTruncationSize, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * the maximum size at which e-mail messages are truncated when
     * synchronized to the device; The value is specified in kilobytes (KB).
     * ignored if zmailFeatureMobilePolicyEnabled=FALSE
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1292)
    public Map<String,Object> unsetMobilePolicyMaxEmailBodyTruncationSize(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyMaxEmailBodyTruncationSize, "");
        return attrs;
    }

    /**
     * the maximum size at which HTML-formatted e-mail messages are
     * synchronized to the devices. The value is specified in KB. ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE
     *
     * @return zmailMobilePolicyMaxEmailHTMLBodyTruncationSize, or -1 if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1293)
    public int getMobilePolicyMaxEmailHTMLBodyTruncationSize() {
        return getIntAttr(Provisioning.A_zmailMobilePolicyMaxEmailHTMLBodyTruncationSize, -1);
    }

    /**
     * the maximum size at which HTML-formatted e-mail messages are
     * synchronized to the devices. The value is specified in KB. ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE
     *
     * @param zmailMobilePolicyMaxEmailHTMLBodyTruncationSize new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1293)
    public void setMobilePolicyMaxEmailHTMLBodyTruncationSize(int zmailMobilePolicyMaxEmailHTMLBodyTruncationSize) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyMaxEmailHTMLBodyTruncationSize, Integer.toString(zmailMobilePolicyMaxEmailHTMLBodyTruncationSize));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * the maximum size at which HTML-formatted e-mail messages are
     * synchronized to the devices. The value is specified in KB. ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE
     *
     * @param zmailMobilePolicyMaxEmailHTMLBodyTruncationSize new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1293)
    public Map<String,Object> setMobilePolicyMaxEmailHTMLBodyTruncationSize(int zmailMobilePolicyMaxEmailHTMLBodyTruncationSize, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyMaxEmailHTMLBodyTruncationSize, Integer.toString(zmailMobilePolicyMaxEmailHTMLBodyTruncationSize));
        return attrs;
    }

    /**
     * the maximum size at which HTML-formatted e-mail messages are
     * synchronized to the devices. The value is specified in KB. ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1293)
    public void unsetMobilePolicyMaxEmailHTMLBodyTruncationSize() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyMaxEmailHTMLBodyTruncationSize, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * the maximum size at which HTML-formatted e-mail messages are
     * synchronized to the devices. The value is specified in KB. ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1293)
    public Map<String,Object> unsetMobilePolicyMaxEmailHTMLBodyTruncationSize(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyMaxEmailHTMLBodyTruncationSize, "");
        return attrs;
    }

    /**
     * max idle time in minutes before device is locked; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyDevicePasswordEnabled=FALSE
     *
     * @return zmailMobilePolicyMaxInactivityTimeDeviceLock, or 15 if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=844)
    public int getMobilePolicyMaxInactivityTimeDeviceLock() {
        return getIntAttr(Provisioning.A_zmailMobilePolicyMaxInactivityTimeDeviceLock, 15);
    }

    /**
     * max idle time in minutes before device is locked; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyDevicePasswordEnabled=FALSE
     *
     * @param zmailMobilePolicyMaxInactivityTimeDeviceLock new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=844)
    public void setMobilePolicyMaxInactivityTimeDeviceLock(int zmailMobilePolicyMaxInactivityTimeDeviceLock) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyMaxInactivityTimeDeviceLock, Integer.toString(zmailMobilePolicyMaxInactivityTimeDeviceLock));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * max idle time in minutes before device is locked; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyDevicePasswordEnabled=FALSE
     *
     * @param zmailMobilePolicyMaxInactivityTimeDeviceLock new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=844)
    public Map<String,Object> setMobilePolicyMaxInactivityTimeDeviceLock(int zmailMobilePolicyMaxInactivityTimeDeviceLock, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyMaxInactivityTimeDeviceLock, Integer.toString(zmailMobilePolicyMaxInactivityTimeDeviceLock));
        return attrs;
    }

    /**
     * max idle time in minutes before device is locked; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyDevicePasswordEnabled=FALSE
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=844)
    public void unsetMobilePolicyMaxInactivityTimeDeviceLock() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyMaxInactivityTimeDeviceLock, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * max idle time in minutes before device is locked; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyDevicePasswordEnabled=FALSE
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=844)
    public Map<String,Object> unsetMobilePolicyMaxInactivityTimeDeviceLock(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyMaxInactivityTimeDeviceLock, "");
        return attrs;
    }

    /**
     * least number of complex characters must be included in device pin;
     * ignored if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyDevicePasswordEnabled=FALSE
     *
     * @return zmailMobilePolicyMinDevicePasswordComplexCharacters, or 0 if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=841)
    public int getMobilePolicyMinDevicePasswordComplexCharacters() {
        return getIntAttr(Provisioning.A_zmailMobilePolicyMinDevicePasswordComplexCharacters, 0);
    }

    /**
     * least number of complex characters must be included in device pin;
     * ignored if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyDevicePasswordEnabled=FALSE
     *
     * @param zmailMobilePolicyMinDevicePasswordComplexCharacters new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=841)
    public void setMobilePolicyMinDevicePasswordComplexCharacters(int zmailMobilePolicyMinDevicePasswordComplexCharacters) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyMinDevicePasswordComplexCharacters, Integer.toString(zmailMobilePolicyMinDevicePasswordComplexCharacters));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * least number of complex characters must be included in device pin;
     * ignored if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyDevicePasswordEnabled=FALSE
     *
     * @param zmailMobilePolicyMinDevicePasswordComplexCharacters new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=841)
    public Map<String,Object> setMobilePolicyMinDevicePasswordComplexCharacters(int zmailMobilePolicyMinDevicePasswordComplexCharacters, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyMinDevicePasswordComplexCharacters, Integer.toString(zmailMobilePolicyMinDevicePasswordComplexCharacters));
        return attrs;
    }

    /**
     * least number of complex characters must be included in device pin;
     * ignored if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyDevicePasswordEnabled=FALSE
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=841)
    public void unsetMobilePolicyMinDevicePasswordComplexCharacters() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyMinDevicePasswordComplexCharacters, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * least number of complex characters must be included in device pin;
     * ignored if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyDevicePasswordEnabled=FALSE
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=841)
    public Map<String,Object> unsetMobilePolicyMinDevicePasswordComplexCharacters(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyMinDevicePasswordComplexCharacters, "");
        return attrs;
    }

    /**
     * min length for device pin; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyDevicePasswordEnabled=FALSE
     *
     * @return zmailMobilePolicyMinDevicePasswordLength, or 4 if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=838)
    public int getMobilePolicyMinDevicePasswordLength() {
        return getIntAttr(Provisioning.A_zmailMobilePolicyMinDevicePasswordLength, 4);
    }

    /**
     * min length for device pin; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyDevicePasswordEnabled=FALSE
     *
     * @param zmailMobilePolicyMinDevicePasswordLength new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=838)
    public void setMobilePolicyMinDevicePasswordLength(int zmailMobilePolicyMinDevicePasswordLength) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyMinDevicePasswordLength, Integer.toString(zmailMobilePolicyMinDevicePasswordLength));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * min length for device pin; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyDevicePasswordEnabled=FALSE
     *
     * @param zmailMobilePolicyMinDevicePasswordLength new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=838)
    public Map<String,Object> setMobilePolicyMinDevicePasswordLength(int zmailMobilePolicyMinDevicePasswordLength, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyMinDevicePasswordLength, Integer.toString(zmailMobilePolicyMinDevicePasswordLength));
        return attrs;
    }

    /**
     * min length for device pin; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyDevicePasswordEnabled=FALSE
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=838)
    public void unsetMobilePolicyMinDevicePasswordLength() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyMinDevicePasswordLength, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * min length for device pin; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyDevicePasswordEnabled=FALSE
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=838)
    public Map<String,Object> unsetMobilePolicyMinDevicePasswordLength(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyMinDevicePasswordLength, "");
        return attrs;
    }

    /**
     * support device pin recovery; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyDevicePasswordEnabled=FALSE
     *
     * @return zmailMobilePolicyPasswordRecoveryEnabled, or true if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=846)
    public boolean isMobilePolicyPasswordRecoveryEnabled() {
        return getBooleanAttr(Provisioning.A_zmailMobilePolicyPasswordRecoveryEnabled, true);
    }

    /**
     * support device pin recovery; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyDevicePasswordEnabled=FALSE
     *
     * @param zmailMobilePolicyPasswordRecoveryEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=846)
    public void setMobilePolicyPasswordRecoveryEnabled(boolean zmailMobilePolicyPasswordRecoveryEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyPasswordRecoveryEnabled, zmailMobilePolicyPasswordRecoveryEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * support device pin recovery; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyDevicePasswordEnabled=FALSE
     *
     * @param zmailMobilePolicyPasswordRecoveryEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=846)
    public Map<String,Object> setMobilePolicyPasswordRecoveryEnabled(boolean zmailMobilePolicyPasswordRecoveryEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyPasswordRecoveryEnabled, zmailMobilePolicyPasswordRecoveryEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * support device pin recovery; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyDevicePasswordEnabled=FALSE
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=846)
    public void unsetMobilePolicyPasswordRecoveryEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyPasswordRecoveryEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * support device pin recovery; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyDevicePasswordEnabled=FALSE
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=846)
    public Map<String,Object> unsetMobilePolicyPasswordRecoveryEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyPasswordRecoveryEnabled, "");
        return attrs;
    }

    /**
     * time interval in minutes before forcing device to refresh policy;
     * ignored if zmailFeatureMobilePolicyEnabled=FALSE
     *
     * @return zmailMobilePolicyRefreshInterval, or 1440 if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=836)
    public int getMobilePolicyRefreshInterval() {
        return getIntAttr(Provisioning.A_zmailMobilePolicyRefreshInterval, 1440);
    }

    /**
     * time interval in minutes before forcing device to refresh policy;
     * ignored if zmailFeatureMobilePolicyEnabled=FALSE
     *
     * @param zmailMobilePolicyRefreshInterval new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=836)
    public void setMobilePolicyRefreshInterval(int zmailMobilePolicyRefreshInterval) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyRefreshInterval, Integer.toString(zmailMobilePolicyRefreshInterval));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * time interval in minutes before forcing device to refresh policy;
     * ignored if zmailFeatureMobilePolicyEnabled=FALSE
     *
     * @param zmailMobilePolicyRefreshInterval new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=836)
    public Map<String,Object> setMobilePolicyRefreshInterval(int zmailMobilePolicyRefreshInterval, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyRefreshInterval, Integer.toString(zmailMobilePolicyRefreshInterval));
        return attrs;
    }

    /**
     * time interval in minutes before forcing device to refresh policy;
     * ignored if zmailFeatureMobilePolicyEnabled=FALSE
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=836)
    public void unsetMobilePolicyRefreshInterval() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyRefreshInterval, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * time interval in minutes before forcing device to refresh policy;
     * ignored if zmailFeatureMobilePolicyEnabled=FALSE
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=836)
    public Map<String,Object> unsetMobilePolicyRefreshInterval(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyRefreshInterval, "");
        return attrs;
    }

    /**
     * whether encryption on device is required; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyRequireDeviceEncryption value is set to -1
     *
     * @return zmailMobilePolicyRequireDeviceEncryption, or 0 if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1279)
    public int getMobilePolicyRequireDeviceEncryption() {
        return getIntAttr(Provisioning.A_zmailMobilePolicyRequireDeviceEncryption, 0);
    }

    /**
     * whether encryption on device is required; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyRequireDeviceEncryption value is set to -1
     *
     * @param zmailMobilePolicyRequireDeviceEncryption new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1279)
    public void setMobilePolicyRequireDeviceEncryption(int zmailMobilePolicyRequireDeviceEncryption) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyRequireDeviceEncryption, Integer.toString(zmailMobilePolicyRequireDeviceEncryption));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether encryption on device is required; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyRequireDeviceEncryption value is set to -1
     *
     * @param zmailMobilePolicyRequireDeviceEncryption new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1279)
    public Map<String,Object> setMobilePolicyRequireDeviceEncryption(int zmailMobilePolicyRequireDeviceEncryption, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyRequireDeviceEncryption, Integer.toString(zmailMobilePolicyRequireDeviceEncryption));
        return attrs;
    }

    /**
     * whether encryption on device is required; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyRequireDeviceEncryption value is set to -1
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1279)
    public void unsetMobilePolicyRequireDeviceEncryption() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyRequireDeviceEncryption, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether encryption on device is required; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyRequireDeviceEncryption value is set to -1
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1279)
    public Map<String,Object> unsetMobilePolicyRequireDeviceEncryption(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyRequireDeviceEncryption, "");
        return attrs;
    }

    /**
     * whether you must encrypt S/MIME messages; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyRequireEncryptedSMIMEMessages value is set to -1
     *
     * @return zmailMobilePolicyRequireEncryptedSMIMEMessages, or 0 if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1295)
    public int getMobilePolicyRequireEncryptedSMIMEMessages() {
        return getIntAttr(Provisioning.A_zmailMobilePolicyRequireEncryptedSMIMEMessages, 0);
    }

    /**
     * whether you must encrypt S/MIME messages; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyRequireEncryptedSMIMEMessages value is set to -1
     *
     * @param zmailMobilePolicyRequireEncryptedSMIMEMessages new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1295)
    public void setMobilePolicyRequireEncryptedSMIMEMessages(int zmailMobilePolicyRequireEncryptedSMIMEMessages) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyRequireEncryptedSMIMEMessages, Integer.toString(zmailMobilePolicyRequireEncryptedSMIMEMessages));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether you must encrypt S/MIME messages; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyRequireEncryptedSMIMEMessages value is set to -1
     *
     * @param zmailMobilePolicyRequireEncryptedSMIMEMessages new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1295)
    public Map<String,Object> setMobilePolicyRequireEncryptedSMIMEMessages(int zmailMobilePolicyRequireEncryptedSMIMEMessages, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyRequireEncryptedSMIMEMessages, Integer.toString(zmailMobilePolicyRequireEncryptedSMIMEMessages));
        return attrs;
    }

    /**
     * whether you must encrypt S/MIME messages; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyRequireEncryptedSMIMEMessages value is set to -1
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1295)
    public void unsetMobilePolicyRequireEncryptedSMIMEMessages() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyRequireEncryptedSMIMEMessages, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether you must encrypt S/MIME messages; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyRequireEncryptedSMIMEMessages value is set to -1
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1295)
    public Map<String,Object> unsetMobilePolicyRequireEncryptedSMIMEMessages(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyRequireEncryptedSMIMEMessages, "");
        return attrs;
    }

    /**
     * what required algorithm must be used when encrypting a message;
     * ignored if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyRequireEncryptionSMIMEAlgorithm value is set to -1
     *
     * @return zmailMobilePolicyRequireEncryptionSMIMEAlgorithm, or 0 if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1297)
    public int getMobilePolicyRequireEncryptionSMIMEAlgorithm() {
        return getIntAttr(Provisioning.A_zmailMobilePolicyRequireEncryptionSMIMEAlgorithm, 0);
    }

    /**
     * what required algorithm must be used when encrypting a message;
     * ignored if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyRequireEncryptionSMIMEAlgorithm value is set to -1
     *
     * @param zmailMobilePolicyRequireEncryptionSMIMEAlgorithm new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1297)
    public void setMobilePolicyRequireEncryptionSMIMEAlgorithm(int zmailMobilePolicyRequireEncryptionSMIMEAlgorithm) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyRequireEncryptionSMIMEAlgorithm, Integer.toString(zmailMobilePolicyRequireEncryptionSMIMEAlgorithm));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * what required algorithm must be used when encrypting a message;
     * ignored if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyRequireEncryptionSMIMEAlgorithm value is set to -1
     *
     * @param zmailMobilePolicyRequireEncryptionSMIMEAlgorithm new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1297)
    public Map<String,Object> setMobilePolicyRequireEncryptionSMIMEAlgorithm(int zmailMobilePolicyRequireEncryptionSMIMEAlgorithm, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyRequireEncryptionSMIMEAlgorithm, Integer.toString(zmailMobilePolicyRequireEncryptionSMIMEAlgorithm));
        return attrs;
    }

    /**
     * what required algorithm must be used when encrypting a message;
     * ignored if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyRequireEncryptionSMIMEAlgorithm value is set to -1
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1297)
    public void unsetMobilePolicyRequireEncryptionSMIMEAlgorithm() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyRequireEncryptionSMIMEAlgorithm, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * what required algorithm must be used when encrypting a message;
     * ignored if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyRequireEncryptionSMIMEAlgorithm value is set to -1
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1297)
    public Map<String,Object> unsetMobilePolicyRequireEncryptionSMIMEAlgorithm(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyRequireEncryptionSMIMEAlgorithm, "");
        return attrs;
    }

    /**
     * whether the mobile device must synchronize manually while roaming;
     * ignored if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyRequireManualSyncWhenRoaming value is set to -1
     *
     * @return zmailMobilePolicyRequireManualSyncWhenRoaming, or 0 if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1287)
    public int getMobilePolicyRequireManualSyncWhenRoaming() {
        return getIntAttr(Provisioning.A_zmailMobilePolicyRequireManualSyncWhenRoaming, 0);
    }

    /**
     * whether the mobile device must synchronize manually while roaming;
     * ignored if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyRequireManualSyncWhenRoaming value is set to -1
     *
     * @param zmailMobilePolicyRequireManualSyncWhenRoaming new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1287)
    public void setMobilePolicyRequireManualSyncWhenRoaming(int zmailMobilePolicyRequireManualSyncWhenRoaming) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyRequireManualSyncWhenRoaming, Integer.toString(zmailMobilePolicyRequireManualSyncWhenRoaming));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether the mobile device must synchronize manually while roaming;
     * ignored if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyRequireManualSyncWhenRoaming value is set to -1
     *
     * @param zmailMobilePolicyRequireManualSyncWhenRoaming new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1287)
    public Map<String,Object> setMobilePolicyRequireManualSyncWhenRoaming(int zmailMobilePolicyRequireManualSyncWhenRoaming, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyRequireManualSyncWhenRoaming, Integer.toString(zmailMobilePolicyRequireManualSyncWhenRoaming));
        return attrs;
    }

    /**
     * whether the mobile device must synchronize manually while roaming;
     * ignored if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyRequireManualSyncWhenRoaming value is set to -1
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1287)
    public void unsetMobilePolicyRequireManualSyncWhenRoaming() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyRequireManualSyncWhenRoaming, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether the mobile device must synchronize manually while roaming;
     * ignored if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyRequireManualSyncWhenRoaming value is set to -1
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1287)
    public Map<String,Object> unsetMobilePolicyRequireManualSyncWhenRoaming(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyRequireManualSyncWhenRoaming, "");
        return attrs;
    }

    /**
     * what required algorithm must be used when signing a message; ignored
     * if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyRequireSignedSMIMEAlgorithm value is set to -1
     *
     * @return zmailMobilePolicyRequireSignedSMIMEAlgorithm, or 0 if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1296)
    public int getMobilePolicyRequireSignedSMIMEAlgorithm() {
        return getIntAttr(Provisioning.A_zmailMobilePolicyRequireSignedSMIMEAlgorithm, 0);
    }

    /**
     * what required algorithm must be used when signing a message; ignored
     * if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyRequireSignedSMIMEAlgorithm value is set to -1
     *
     * @param zmailMobilePolicyRequireSignedSMIMEAlgorithm new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1296)
    public void setMobilePolicyRequireSignedSMIMEAlgorithm(int zmailMobilePolicyRequireSignedSMIMEAlgorithm) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyRequireSignedSMIMEAlgorithm, Integer.toString(zmailMobilePolicyRequireSignedSMIMEAlgorithm));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * what required algorithm must be used when signing a message; ignored
     * if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyRequireSignedSMIMEAlgorithm value is set to -1
     *
     * @param zmailMobilePolicyRequireSignedSMIMEAlgorithm new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1296)
    public Map<String,Object> setMobilePolicyRequireSignedSMIMEAlgorithm(int zmailMobilePolicyRequireSignedSMIMEAlgorithm, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyRequireSignedSMIMEAlgorithm, Integer.toString(zmailMobilePolicyRequireSignedSMIMEAlgorithm));
        return attrs;
    }

    /**
     * what required algorithm must be used when signing a message; ignored
     * if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyRequireSignedSMIMEAlgorithm value is set to -1
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1296)
    public void unsetMobilePolicyRequireSignedSMIMEAlgorithm() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyRequireSignedSMIMEAlgorithm, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * what required algorithm must be used when signing a message; ignored
     * if zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyRequireSignedSMIMEAlgorithm value is set to -1
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1296)
    public Map<String,Object> unsetMobilePolicyRequireSignedSMIMEAlgorithm(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyRequireSignedSMIMEAlgorithm, "");
        return attrs;
    }

    /**
     * whether the device must send signed S/MIME messages; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyRequireSignedSMIMEMessages value is set to -1
     *
     * @return zmailMobilePolicyRequireSignedSMIMEMessages, or 0 if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1294)
    public int getMobilePolicyRequireSignedSMIMEMessages() {
        return getIntAttr(Provisioning.A_zmailMobilePolicyRequireSignedSMIMEMessages, 0);
    }

    /**
     * whether the device must send signed S/MIME messages; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyRequireSignedSMIMEMessages value is set to -1
     *
     * @param zmailMobilePolicyRequireSignedSMIMEMessages new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1294)
    public void setMobilePolicyRequireSignedSMIMEMessages(int zmailMobilePolicyRequireSignedSMIMEMessages) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyRequireSignedSMIMEMessages, Integer.toString(zmailMobilePolicyRequireSignedSMIMEMessages));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether the device must send signed S/MIME messages; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyRequireSignedSMIMEMessages value is set to -1
     *
     * @param zmailMobilePolicyRequireSignedSMIMEMessages new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1294)
    public Map<String,Object> setMobilePolicyRequireSignedSMIMEMessages(int zmailMobilePolicyRequireSignedSMIMEMessages, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyRequireSignedSMIMEMessages, Integer.toString(zmailMobilePolicyRequireSignedSMIMEMessages));
        return attrs;
    }

    /**
     * whether the device must send signed S/MIME messages; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyRequireSignedSMIMEMessages value is set to -1
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1294)
    public void unsetMobilePolicyRequireSignedSMIMEMessages() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyRequireSignedSMIMEMessages, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether the device must send signed S/MIME messages; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE or
     * zmailMobilePolicyRequireSignedSMIMEMessages value is set to -1
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1294)
    public Map<String,Object> unsetMobilePolicyRequireSignedSMIMEMessages(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyRequireSignedSMIMEMessages, "");
        return attrs;
    }

    /**
     * when set to TRUE, suppresses DeviceEncryptionEnabled to be sent down
     * to the device; Some devices choke when DeviceEncryptionEnabled policy
     * is downloaded irrespective of their value set to 0 or, 1 ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE
     *
     * @return zmailMobilePolicySuppressDeviceEncryption, or false if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1306)
    public boolean isMobilePolicySuppressDeviceEncryption() {
        return getBooleanAttr(Provisioning.A_zmailMobilePolicySuppressDeviceEncryption, false);
    }

    /**
     * when set to TRUE, suppresses DeviceEncryptionEnabled to be sent down
     * to the device; Some devices choke when DeviceEncryptionEnabled policy
     * is downloaded irrespective of their value set to 0 or, 1 ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE
     *
     * @param zmailMobilePolicySuppressDeviceEncryption new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1306)
    public void setMobilePolicySuppressDeviceEncryption(boolean zmailMobilePolicySuppressDeviceEncryption) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicySuppressDeviceEncryption, zmailMobilePolicySuppressDeviceEncryption ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * when set to TRUE, suppresses DeviceEncryptionEnabled to be sent down
     * to the device; Some devices choke when DeviceEncryptionEnabled policy
     * is downloaded irrespective of their value set to 0 or, 1 ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE
     *
     * @param zmailMobilePolicySuppressDeviceEncryption new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1306)
    public Map<String,Object> setMobilePolicySuppressDeviceEncryption(boolean zmailMobilePolicySuppressDeviceEncryption, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicySuppressDeviceEncryption, zmailMobilePolicySuppressDeviceEncryption ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * when set to TRUE, suppresses DeviceEncryptionEnabled to be sent down
     * to the device; Some devices choke when DeviceEncryptionEnabled policy
     * is downloaded irrespective of their value set to 0 or, 1 ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1306)
    public void unsetMobilePolicySuppressDeviceEncryption() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicySuppressDeviceEncryption, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * when set to TRUE, suppresses DeviceEncryptionEnabled to be sent down
     * to the device; Some devices choke when DeviceEncryptionEnabled policy
     * is downloaded irrespective of their value set to 0 or, 1 ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1306)
    public Map<String,Object> unsetMobilePolicySuppressDeviceEncryption(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicySuppressDeviceEncryption, "");
        return attrs;
    }

    /**
     * application that can&#039;t be run in device ROM; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE
     *
     * @return zmailMobilePolicyUnapprovedInROMApplication, or empty array if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1304)
    public String[] getMobilePolicyUnapprovedInROMApplication() {
        return getMultiAttr(Provisioning.A_zmailMobilePolicyUnapprovedInROMApplication);
    }

    /**
     * application that can&#039;t be run in device ROM; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE
     *
     * @param zmailMobilePolicyUnapprovedInROMApplication new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1304)
    public void setMobilePolicyUnapprovedInROMApplication(String[] zmailMobilePolicyUnapprovedInROMApplication) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyUnapprovedInROMApplication, zmailMobilePolicyUnapprovedInROMApplication);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * application that can&#039;t be run in device ROM; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE
     *
     * @param zmailMobilePolicyUnapprovedInROMApplication new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1304)
    public Map<String,Object> setMobilePolicyUnapprovedInROMApplication(String[] zmailMobilePolicyUnapprovedInROMApplication, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyUnapprovedInROMApplication, zmailMobilePolicyUnapprovedInROMApplication);
        return attrs;
    }

    /**
     * application that can&#039;t be run in device ROM; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE
     *
     * @param zmailMobilePolicyUnapprovedInROMApplication new to add to existing values
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1304)
    public void addMobilePolicyUnapprovedInROMApplication(String zmailMobilePolicyUnapprovedInROMApplication) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "+" + Provisioning.A_zmailMobilePolicyUnapprovedInROMApplication, zmailMobilePolicyUnapprovedInROMApplication);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * application that can&#039;t be run in device ROM; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE
     *
     * @param zmailMobilePolicyUnapprovedInROMApplication new to add to existing values
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1304)
    public Map<String,Object> addMobilePolicyUnapprovedInROMApplication(String zmailMobilePolicyUnapprovedInROMApplication, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "+" + Provisioning.A_zmailMobilePolicyUnapprovedInROMApplication, zmailMobilePolicyUnapprovedInROMApplication);
        return attrs;
    }

    /**
     * application that can&#039;t be run in device ROM; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE
     *
     * @param zmailMobilePolicyUnapprovedInROMApplication existing value to remove
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1304)
    public void removeMobilePolicyUnapprovedInROMApplication(String zmailMobilePolicyUnapprovedInROMApplication) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "-" + Provisioning.A_zmailMobilePolicyUnapprovedInROMApplication, zmailMobilePolicyUnapprovedInROMApplication);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * application that can&#039;t be run in device ROM; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE
     *
     * @param zmailMobilePolicyUnapprovedInROMApplication existing value to remove
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1304)
    public Map<String,Object> removeMobilePolicyUnapprovedInROMApplication(String zmailMobilePolicyUnapprovedInROMApplication, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "-" + Provisioning.A_zmailMobilePolicyUnapprovedInROMApplication, zmailMobilePolicyUnapprovedInROMApplication);
        return attrs;
    }

    /**
     * application that can&#039;t be run in device ROM; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1304)
    public void unsetMobilePolicyUnapprovedInROMApplication() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyUnapprovedInROMApplication, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * application that can&#039;t be run in device ROM; ignored if
     * zmailFeatureMobilePolicyEnabled=FALSE
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1304)
    public Map<String,Object> unsetMobilePolicyUnapprovedInROMApplication(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobilePolicyUnapprovedInROMApplication, "");
        return attrs;
    }

    /**
     * indicates whether the application can forward original email as RFC
     * 822 .eml attachment. Note: this setting is applicable only to the
     * devices using activesync smart forward for forwarding email messages.
     *
     * @return zmailMobileSmartForwardRFC822Enabled, or false if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1205)
    public boolean isMobileSmartForwardRFC822Enabled() {
        return getBooleanAttr(Provisioning.A_zmailMobileSmartForwardRFC822Enabled, false);
    }

    /**
     * indicates whether the application can forward original email as RFC
     * 822 .eml attachment. Note: this setting is applicable only to the
     * devices using activesync smart forward for forwarding email messages.
     *
     * @param zmailMobileSmartForwardRFC822Enabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1205)
    public void setMobileSmartForwardRFC822Enabled(boolean zmailMobileSmartForwardRFC822Enabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobileSmartForwardRFC822Enabled, zmailMobileSmartForwardRFC822Enabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * indicates whether the application can forward original email as RFC
     * 822 .eml attachment. Note: this setting is applicable only to the
     * devices using activesync smart forward for forwarding email messages.
     *
     * @param zmailMobileSmartForwardRFC822Enabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1205)
    public Map<String,Object> setMobileSmartForwardRFC822Enabled(boolean zmailMobileSmartForwardRFC822Enabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobileSmartForwardRFC822Enabled, zmailMobileSmartForwardRFC822Enabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * indicates whether the application can forward original email as RFC
     * 822 .eml attachment. Note: this setting is applicable only to the
     * devices using activesync smart forward for forwarding email messages.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1205)
    public void unsetMobileSmartForwardRFC822Enabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobileSmartForwardRFC822Enabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * indicates whether the application can forward original email as RFC
     * 822 .eml attachment. Note: this setting is applicable only to the
     * devices using activesync smart forward for forwarding email messages.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1205)
    public Map<String,Object> unsetMobileSmartForwardRFC822Enabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobileSmartForwardRFC822Enabled, "");
        return attrs;
    }

    /**
     * folders whose sync key are already converted, each device has a list
     * of folders. e.g. ApplDN6GJSQJDFHW:0,2,10 meaning device
     * ApplDN6GJSQJDFHW&#039;s folders, inbox and calendar folder sync key
     * format are converted, use 0 for FolderSync
     *
     * @return zmailMobileSyncKeyFormatConvertedFolders, or empty array if unset
     *
     * @since ZCS 8.0.4
     */
    @ZAttr(id=1439)
    public String[] getMobileSyncKeyFormatConvertedFolders() {
        return getMultiAttr(Provisioning.A_zmailMobileSyncKeyFormatConvertedFolders);
    }

    /**
     * folders whose sync key are already converted, each device has a list
     * of folders. e.g. ApplDN6GJSQJDFHW:0,2,10 meaning device
     * ApplDN6GJSQJDFHW&#039;s folders, inbox and calendar folder sync key
     * format are converted, use 0 for FolderSync
     *
     * @param zmailMobileSyncKeyFormatConvertedFolders new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.4
     */
    @ZAttr(id=1439)
    public void setMobileSyncKeyFormatConvertedFolders(String[] zmailMobileSyncKeyFormatConvertedFolders) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobileSyncKeyFormatConvertedFolders, zmailMobileSyncKeyFormatConvertedFolders);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * folders whose sync key are already converted, each device has a list
     * of folders. e.g. ApplDN6GJSQJDFHW:0,2,10 meaning device
     * ApplDN6GJSQJDFHW&#039;s folders, inbox and calendar folder sync key
     * format are converted, use 0 for FolderSync
     *
     * @param zmailMobileSyncKeyFormatConvertedFolders new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.4
     */
    @ZAttr(id=1439)
    public Map<String,Object> setMobileSyncKeyFormatConvertedFolders(String[] zmailMobileSyncKeyFormatConvertedFolders, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobileSyncKeyFormatConvertedFolders, zmailMobileSyncKeyFormatConvertedFolders);
        return attrs;
    }

    /**
     * folders whose sync key are already converted, each device has a list
     * of folders. e.g. ApplDN6GJSQJDFHW:0,2,10 meaning device
     * ApplDN6GJSQJDFHW&#039;s folders, inbox and calendar folder sync key
     * format are converted, use 0 for FolderSync
     *
     * @param zmailMobileSyncKeyFormatConvertedFolders new to add to existing values
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.4
     */
    @ZAttr(id=1439)
    public void addMobileSyncKeyFormatConvertedFolders(String zmailMobileSyncKeyFormatConvertedFolders) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "+" + Provisioning.A_zmailMobileSyncKeyFormatConvertedFolders, zmailMobileSyncKeyFormatConvertedFolders);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * folders whose sync key are already converted, each device has a list
     * of folders. e.g. ApplDN6GJSQJDFHW:0,2,10 meaning device
     * ApplDN6GJSQJDFHW&#039;s folders, inbox and calendar folder sync key
     * format are converted, use 0 for FolderSync
     *
     * @param zmailMobileSyncKeyFormatConvertedFolders new to add to existing values
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.4
     */
    @ZAttr(id=1439)
    public Map<String,Object> addMobileSyncKeyFormatConvertedFolders(String zmailMobileSyncKeyFormatConvertedFolders, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "+" + Provisioning.A_zmailMobileSyncKeyFormatConvertedFolders, zmailMobileSyncKeyFormatConvertedFolders);
        return attrs;
    }

    /**
     * folders whose sync key are already converted, each device has a list
     * of folders. e.g. ApplDN6GJSQJDFHW:0,2,10 meaning device
     * ApplDN6GJSQJDFHW&#039;s folders, inbox and calendar folder sync key
     * format are converted, use 0 for FolderSync
     *
     * @param zmailMobileSyncKeyFormatConvertedFolders existing value to remove
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.4
     */
    @ZAttr(id=1439)
    public void removeMobileSyncKeyFormatConvertedFolders(String zmailMobileSyncKeyFormatConvertedFolders) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "-" + Provisioning.A_zmailMobileSyncKeyFormatConvertedFolders, zmailMobileSyncKeyFormatConvertedFolders);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * folders whose sync key are already converted, each device has a list
     * of folders. e.g. ApplDN6GJSQJDFHW:0,2,10 meaning device
     * ApplDN6GJSQJDFHW&#039;s folders, inbox and calendar folder sync key
     * format are converted, use 0 for FolderSync
     *
     * @param zmailMobileSyncKeyFormatConvertedFolders existing value to remove
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.4
     */
    @ZAttr(id=1439)
    public Map<String,Object> removeMobileSyncKeyFormatConvertedFolders(String zmailMobileSyncKeyFormatConvertedFolders, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "-" + Provisioning.A_zmailMobileSyncKeyFormatConvertedFolders, zmailMobileSyncKeyFormatConvertedFolders);
        return attrs;
    }

    /**
     * folders whose sync key are already converted, each device has a list
     * of folders. e.g. ApplDN6GJSQJDFHW:0,2,10 meaning device
     * ApplDN6GJSQJDFHW&#039;s folders, inbox and calendar folder sync key
     * format are converted, use 0 for FolderSync
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.4
     */
    @ZAttr(id=1439)
    public void unsetMobileSyncKeyFormatConvertedFolders() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobileSyncKeyFormatConvertedFolders, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * folders whose sync key are already converted, each device has a list
     * of folders. e.g. ApplDN6GJSQJDFHW:0,2,10 meaning device
     * ApplDN6GJSQJDFHW&#039;s folders, inbox and calendar folder sync key
     * format are converted, use 0 for FolderSync
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.4
     */
    @ZAttr(id=1439)
    public Map<String,Object> unsetMobileSyncKeyFormatConvertedFolders(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailMobileSyncKeyFormatConvertedFolders, "");
        return attrs;
    }

    /**
     * template used to construct the body of an email notification message
     *
     * @return zmailNewMailNotificationBody, or "New message received at ${RECIPIENT_ADDRESS}.${NEWLINE}Sender: ${SENDER_ADDRESS}${NEWLINE}Subject: ${SUBJECT}" if unset
     */
    @ZAttr(id=152)
    public String getNewMailNotificationBody() {
        return getAttr(Provisioning.A_zmailNewMailNotificationBody, "New message received at ${RECIPIENT_ADDRESS}.${NEWLINE}Sender: ${SENDER_ADDRESS}${NEWLINE}Subject: ${SUBJECT}");
    }

    /**
     * template used to construct the body of an email notification message
     *
     * @param zmailNewMailNotificationBody new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=152)
    public void setNewMailNotificationBody(String zmailNewMailNotificationBody) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailNewMailNotificationBody, zmailNewMailNotificationBody);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * template used to construct the body of an email notification message
     *
     * @param zmailNewMailNotificationBody new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=152)
    public Map<String,Object> setNewMailNotificationBody(String zmailNewMailNotificationBody, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailNewMailNotificationBody, zmailNewMailNotificationBody);
        return attrs;
    }

    /**
     * template used to construct the body of an email notification message
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=152)
    public void unsetNewMailNotificationBody() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailNewMailNotificationBody, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * template used to construct the body of an email notification message
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=152)
    public Map<String,Object> unsetNewMailNotificationBody(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailNewMailNotificationBody, "");
        return attrs;
    }

    /**
     * template used to construct the sender of an email notification message
     *
     * @return zmailNewMailNotificationFrom, or "Postmaster <postmaster@${RECIPIENT_DOMAIN}>" if unset
     */
    @ZAttr(id=150)
    public String getNewMailNotificationFrom() {
        return getAttr(Provisioning.A_zmailNewMailNotificationFrom, "Postmaster <postmaster@${RECIPIENT_DOMAIN}>");
    }

    /**
     * template used to construct the sender of an email notification message
     *
     * @param zmailNewMailNotificationFrom new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=150)
    public void setNewMailNotificationFrom(String zmailNewMailNotificationFrom) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailNewMailNotificationFrom, zmailNewMailNotificationFrom);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * template used to construct the sender of an email notification message
     *
     * @param zmailNewMailNotificationFrom new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=150)
    public Map<String,Object> setNewMailNotificationFrom(String zmailNewMailNotificationFrom, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailNewMailNotificationFrom, zmailNewMailNotificationFrom);
        return attrs;
    }

    /**
     * template used to construct the sender of an email notification message
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=150)
    public void unsetNewMailNotificationFrom() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailNewMailNotificationFrom, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * template used to construct the sender of an email notification message
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=150)
    public Map<String,Object> unsetNewMailNotificationFrom(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailNewMailNotificationFrom, "");
        return attrs;
    }

    /**
     * template used to construct the subject of an email notification
     * message
     *
     * @return zmailNewMailNotificationSubject, or "New message received at ${RECIPIENT_ADDRESS}" if unset
     */
    @ZAttr(id=151)
    public String getNewMailNotificationSubject() {
        return getAttr(Provisioning.A_zmailNewMailNotificationSubject, "New message received at ${RECIPIENT_ADDRESS}");
    }

    /**
     * template used to construct the subject of an email notification
     * message
     *
     * @param zmailNewMailNotificationSubject new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=151)
    public void setNewMailNotificationSubject(String zmailNewMailNotificationSubject) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailNewMailNotificationSubject, zmailNewMailNotificationSubject);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * template used to construct the subject of an email notification
     * message
     *
     * @param zmailNewMailNotificationSubject new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=151)
    public Map<String,Object> setNewMailNotificationSubject(String zmailNewMailNotificationSubject, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailNewMailNotificationSubject, zmailNewMailNotificationSubject);
        return attrs;
    }

    /**
     * template used to construct the subject of an email notification
     * message
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=151)
    public void unsetNewMailNotificationSubject() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailNewMailNotificationSubject, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * template used to construct the subject of an email notification
     * message
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=151)
    public Map<String,Object> unsetNewMailNotificationSubject(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailNewMailNotificationSubject, "");
        return attrs;
    }

    /**
     * maximum number of revisions to keep for wiki pages and documents. 0
     * means unlimited.
     *
     * @return zmailNotebookMaxRevisions, or 0 if unset
     */
    @ZAttr(id=482)
    public int getNotebookMaxRevisions() {
        return getIntAttr(Provisioning.A_zmailNotebookMaxRevisions, 0);
    }

    /**
     * maximum number of revisions to keep for wiki pages and documents. 0
     * means unlimited.
     *
     * @param zmailNotebookMaxRevisions new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=482)
    public void setNotebookMaxRevisions(int zmailNotebookMaxRevisions) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailNotebookMaxRevisions, Integer.toString(zmailNotebookMaxRevisions));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * maximum number of revisions to keep for wiki pages and documents. 0
     * means unlimited.
     *
     * @param zmailNotebookMaxRevisions new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=482)
    public Map<String,Object> setNotebookMaxRevisions(int zmailNotebookMaxRevisions, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailNotebookMaxRevisions, Integer.toString(zmailNotebookMaxRevisions));
        return attrs;
    }

    /**
     * maximum number of revisions to keep for wiki pages and documents. 0
     * means unlimited.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=482)
    public void unsetNotebookMaxRevisions() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailNotebookMaxRevisions, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * maximum number of revisions to keep for wiki pages and documents. 0
     * means unlimited.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=482)
    public Map<String,Object> unsetNotebookMaxRevisions(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailNotebookMaxRevisions, "");
        return attrs;
    }

    /**
     * whether to strip off potentially harming HTML tags in Wiki and HTML
     * Documents.
     *
     * @return zmailNotebookSanitizeHtml, or true if unset
     *
     * @since ZCS 5.0.6
     */
    @ZAttr(id=646)
    public boolean isNotebookSanitizeHtml() {
        return getBooleanAttr(Provisioning.A_zmailNotebookSanitizeHtml, true);
    }

    /**
     * whether to strip off potentially harming HTML tags in Wiki and HTML
     * Documents.
     *
     * @param zmailNotebookSanitizeHtml new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.6
     */
    @ZAttr(id=646)
    public void setNotebookSanitizeHtml(boolean zmailNotebookSanitizeHtml) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailNotebookSanitizeHtml, zmailNotebookSanitizeHtml ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to strip off potentially harming HTML tags in Wiki and HTML
     * Documents.
     *
     * @param zmailNotebookSanitizeHtml new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.6
     */
    @ZAttr(id=646)
    public Map<String,Object> setNotebookSanitizeHtml(boolean zmailNotebookSanitizeHtml, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailNotebookSanitizeHtml, zmailNotebookSanitizeHtml ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether to strip off potentially harming HTML tags in Wiki and HTML
     * Documents.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.6
     */
    @ZAttr(id=646)
    public void unsetNotebookSanitizeHtml() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailNotebookSanitizeHtml, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to strip off potentially harming HTML tags in Wiki and HTML
     * Documents.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.6
     */
    @ZAttr(id=646)
    public Map<String,Object> unsetNotebookSanitizeHtml(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailNotebookSanitizeHtml, "");
        return attrs;
    }

    /**
     * administrative notes
     *
     * @return zmailNotes, or null if unset
     */
    @ZAttr(id=9)
    public String getNotes() {
        return getAttr(Provisioning.A_zmailNotes, null);
    }

    /**
     * administrative notes
     *
     * @param zmailNotes new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=9)
    public void setNotes(String zmailNotes) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailNotes, zmailNotes);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * administrative notes
     *
     * @param zmailNotes new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=9)
    public Map<String,Object> setNotes(String zmailNotes, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailNotes, zmailNotes);
        return attrs;
    }

    /**
     * administrative notes
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=9)
    public void unsetNotes() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailNotes, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * administrative notes
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=9)
    public Map<String,Object> unsetNotes(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailNotes, "");
        return attrs;
    }

    /**
     * regex of allowed characters in password
     *
     * @return zmailPasswordAllowedChars, or null if unset
     *
     * @since ZCS 7.1.0
     */
    @ZAttr(id=1163)
    public String getPasswordAllowedChars() {
        return getAttr(Provisioning.A_zmailPasswordAllowedChars, null);
    }

    /**
     * regex of allowed characters in password
     *
     * @param zmailPasswordAllowedChars new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.1.0
     */
    @ZAttr(id=1163)
    public void setPasswordAllowedChars(String zmailPasswordAllowedChars) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordAllowedChars, zmailPasswordAllowedChars);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * regex of allowed characters in password
     *
     * @param zmailPasswordAllowedChars new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.1.0
     */
    @ZAttr(id=1163)
    public Map<String,Object> setPasswordAllowedChars(String zmailPasswordAllowedChars, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordAllowedChars, zmailPasswordAllowedChars);
        return attrs;
    }

    /**
     * regex of allowed characters in password
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.1.0
     */
    @ZAttr(id=1163)
    public void unsetPasswordAllowedChars() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordAllowedChars, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * regex of allowed characters in password
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.1.0
     */
    @ZAttr(id=1163)
    public Map<String,Object> unsetPasswordAllowedChars(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordAllowedChars, "");
        return attrs;
    }

    /**
     * regex of allowed punctuation characters in password
     *
     * @return zmailPasswordAllowedPunctuationChars, or null if unset
     *
     * @since ZCS 7.1.3
     */
    @ZAttr(id=1256)
    public String getPasswordAllowedPunctuationChars() {
        return getAttr(Provisioning.A_zmailPasswordAllowedPunctuationChars, null);
    }

    /**
     * regex of allowed punctuation characters in password
     *
     * @param zmailPasswordAllowedPunctuationChars new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.1.3
     */
    @ZAttr(id=1256)
    public void setPasswordAllowedPunctuationChars(String zmailPasswordAllowedPunctuationChars) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordAllowedPunctuationChars, zmailPasswordAllowedPunctuationChars);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * regex of allowed punctuation characters in password
     *
     * @param zmailPasswordAllowedPunctuationChars new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.1.3
     */
    @ZAttr(id=1256)
    public Map<String,Object> setPasswordAllowedPunctuationChars(String zmailPasswordAllowedPunctuationChars, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordAllowedPunctuationChars, zmailPasswordAllowedPunctuationChars);
        return attrs;
    }

    /**
     * regex of allowed punctuation characters in password
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.1.3
     */
    @ZAttr(id=1256)
    public void unsetPasswordAllowedPunctuationChars() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordAllowedPunctuationChars, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * regex of allowed punctuation characters in password
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.1.3
     */
    @ZAttr(id=1256)
    public Map<String,Object> unsetPasswordAllowedPunctuationChars(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordAllowedPunctuationChars, "");
        return attrs;
    }

    /**
     * whether or not to enforce password history. Number of unique passwords
     * a user must have before being allowed to re-use an old one. A value of
     * 0 means no password history.
     *
     * @return zmailPasswordEnforceHistory, or 0 if unset
     */
    @ZAttr(id=37)
    public int getPasswordEnforceHistory() {
        return getIntAttr(Provisioning.A_zmailPasswordEnforceHistory, 0);
    }

    /**
     * whether or not to enforce password history. Number of unique passwords
     * a user must have before being allowed to re-use an old one. A value of
     * 0 means no password history.
     *
     * @param zmailPasswordEnforceHistory new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=37)
    public void setPasswordEnforceHistory(int zmailPasswordEnforceHistory) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordEnforceHistory, Integer.toString(zmailPasswordEnforceHistory));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether or not to enforce password history. Number of unique passwords
     * a user must have before being allowed to re-use an old one. A value of
     * 0 means no password history.
     *
     * @param zmailPasswordEnforceHistory new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=37)
    public Map<String,Object> setPasswordEnforceHistory(int zmailPasswordEnforceHistory, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordEnforceHistory, Integer.toString(zmailPasswordEnforceHistory));
        return attrs;
    }

    /**
     * whether or not to enforce password history. Number of unique passwords
     * a user must have before being allowed to re-use an old one. A value of
     * 0 means no password history.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=37)
    public void unsetPasswordEnforceHistory() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordEnforceHistory, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether or not to enforce password history. Number of unique passwords
     * a user must have before being allowed to re-use an old one. A value of
     * 0 means no password history.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=37)
    public Map<String,Object> unsetPasswordEnforceHistory(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordEnforceHistory, "");
        return attrs;
    }

    /**
     * user is unable to change password
     *
     * @return zmailPasswordLocked, or false if unset
     */
    @ZAttr(id=45)
    public boolean isPasswordLocked() {
        return getBooleanAttr(Provisioning.A_zmailPasswordLocked, false);
    }

    /**
     * user is unable to change password
     *
     * @param zmailPasswordLocked new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=45)
    public void setPasswordLocked(boolean zmailPasswordLocked) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordLocked, zmailPasswordLocked ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * user is unable to change password
     *
     * @param zmailPasswordLocked new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=45)
    public Map<String,Object> setPasswordLocked(boolean zmailPasswordLocked, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordLocked, zmailPasswordLocked ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * user is unable to change password
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=45)
    public void unsetPasswordLocked() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordLocked, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * user is unable to change password
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=45)
    public Map<String,Object> unsetPasswordLocked(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordLocked, "");
        return attrs;
    }

    /**
     * how long an account is locked out. Use 0 to lockout an account until
     * admin resets it. Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * <p>Use getPasswordLockoutDurationAsString to access value as a string.
     *
     * @see #getPasswordLockoutDurationAsString()
     *
     * @return zmailPasswordLockoutDuration in millseconds, or 3600000 (1h)  if unset
     */
    @ZAttr(id=379)
    public long getPasswordLockoutDuration() {
        return getTimeInterval(Provisioning.A_zmailPasswordLockoutDuration, 3600000L);
    }

    /**
     * how long an account is locked out. Use 0 to lockout an account until
     * admin resets it. Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @return zmailPasswordLockoutDuration, or "1h" if unset
     */
    @ZAttr(id=379)
    public String getPasswordLockoutDurationAsString() {
        return getAttr(Provisioning.A_zmailPasswordLockoutDuration, "1h");
    }

    /**
     * how long an account is locked out. Use 0 to lockout an account until
     * admin resets it. Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param zmailPasswordLockoutDuration new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=379)
    public void setPasswordLockoutDuration(String zmailPasswordLockoutDuration) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordLockoutDuration, zmailPasswordLockoutDuration);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * how long an account is locked out. Use 0 to lockout an account until
     * admin resets it. Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param zmailPasswordLockoutDuration new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=379)
    public Map<String,Object> setPasswordLockoutDuration(String zmailPasswordLockoutDuration, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordLockoutDuration, zmailPasswordLockoutDuration);
        return attrs;
    }

    /**
     * how long an account is locked out. Use 0 to lockout an account until
     * admin resets it. Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=379)
    public void unsetPasswordLockoutDuration() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordLockoutDuration, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * how long an account is locked out. Use 0 to lockout an account until
     * admin resets it. Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=379)
    public Map<String,Object> unsetPasswordLockoutDuration(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordLockoutDuration, "");
        return attrs;
    }

    /**
     * whether or not account lockout is enabled.
     *
     * @return zmailPasswordLockoutEnabled, or false if unset
     */
    @ZAttr(id=378)
    public boolean isPasswordLockoutEnabled() {
        return getBooleanAttr(Provisioning.A_zmailPasswordLockoutEnabled, false);
    }

    /**
     * whether or not account lockout is enabled.
     *
     * @param zmailPasswordLockoutEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=378)
    public void setPasswordLockoutEnabled(boolean zmailPasswordLockoutEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordLockoutEnabled, zmailPasswordLockoutEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether or not account lockout is enabled.
     *
     * @param zmailPasswordLockoutEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=378)
    public Map<String,Object> setPasswordLockoutEnabled(boolean zmailPasswordLockoutEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordLockoutEnabled, zmailPasswordLockoutEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether or not account lockout is enabled.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=378)
    public void unsetPasswordLockoutEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordLockoutEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether or not account lockout is enabled.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=378)
    public Map<String,Object> unsetPasswordLockoutEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordLockoutEnabled, "");
        return attrs;
    }

    /**
     * the duration after which old consecutive failed login attempts are
     * purged from the list, even though no successful authentication has
     * occurred. Must be in valid duration format: {digits}{time-unit}.
     * digits: 0-9, time-unit: [hmsd]|ms. h - hours, m - minutes, s -
     * seconds, d - days, ms - milliseconds. If time unit is not specified,
     * the default is s(seconds).
     *
     * <p>Use getPasswordLockoutFailureLifetimeAsString to access value as a string.
     *
     * @see #getPasswordLockoutFailureLifetimeAsString()
     *
     * @return zmailPasswordLockoutFailureLifetime in millseconds, or 3600000 (1h)  if unset
     */
    @ZAttr(id=381)
    public long getPasswordLockoutFailureLifetime() {
        return getTimeInterval(Provisioning.A_zmailPasswordLockoutFailureLifetime, 3600000L);
    }

    /**
     * the duration after which old consecutive failed login attempts are
     * purged from the list, even though no successful authentication has
     * occurred. Must be in valid duration format: {digits}{time-unit}.
     * digits: 0-9, time-unit: [hmsd]|ms. h - hours, m - minutes, s -
     * seconds, d - days, ms - milliseconds. If time unit is not specified,
     * the default is s(seconds).
     *
     * @return zmailPasswordLockoutFailureLifetime, or "1h" if unset
     */
    @ZAttr(id=381)
    public String getPasswordLockoutFailureLifetimeAsString() {
        return getAttr(Provisioning.A_zmailPasswordLockoutFailureLifetime, "1h");
    }

    /**
     * the duration after which old consecutive failed login attempts are
     * purged from the list, even though no successful authentication has
     * occurred. Must be in valid duration format: {digits}{time-unit}.
     * digits: 0-9, time-unit: [hmsd]|ms. h - hours, m - minutes, s -
     * seconds, d - days, ms - milliseconds. If time unit is not specified,
     * the default is s(seconds).
     *
     * @param zmailPasswordLockoutFailureLifetime new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=381)
    public void setPasswordLockoutFailureLifetime(String zmailPasswordLockoutFailureLifetime) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordLockoutFailureLifetime, zmailPasswordLockoutFailureLifetime);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * the duration after which old consecutive failed login attempts are
     * purged from the list, even though no successful authentication has
     * occurred. Must be in valid duration format: {digits}{time-unit}.
     * digits: 0-9, time-unit: [hmsd]|ms. h - hours, m - minutes, s -
     * seconds, d - days, ms - milliseconds. If time unit is not specified,
     * the default is s(seconds).
     *
     * @param zmailPasswordLockoutFailureLifetime new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=381)
    public Map<String,Object> setPasswordLockoutFailureLifetime(String zmailPasswordLockoutFailureLifetime, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordLockoutFailureLifetime, zmailPasswordLockoutFailureLifetime);
        return attrs;
    }

    /**
     * the duration after which old consecutive failed login attempts are
     * purged from the list, even though no successful authentication has
     * occurred. Must be in valid duration format: {digits}{time-unit}.
     * digits: 0-9, time-unit: [hmsd]|ms. h - hours, m - minutes, s -
     * seconds, d - days, ms - milliseconds. If time unit is not specified,
     * the default is s(seconds).
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=381)
    public void unsetPasswordLockoutFailureLifetime() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordLockoutFailureLifetime, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * the duration after which old consecutive failed login attempts are
     * purged from the list, even though no successful authentication has
     * occurred. Must be in valid duration format: {digits}{time-unit}.
     * digits: 0-9, time-unit: [hmsd]|ms. h - hours, m - minutes, s -
     * seconds, d - days, ms - milliseconds. If time unit is not specified,
     * the default is s(seconds).
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=381)
    public Map<String,Object> unsetPasswordLockoutFailureLifetime(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordLockoutFailureLifetime, "");
        return attrs;
    }

    /**
     * number of consecutive failed login attempts until an account is locked
     * out
     *
     * @return zmailPasswordLockoutMaxFailures, or 10 if unset
     */
    @ZAttr(id=380)
    public int getPasswordLockoutMaxFailures() {
        return getIntAttr(Provisioning.A_zmailPasswordLockoutMaxFailures, 10);
    }

    /**
     * number of consecutive failed login attempts until an account is locked
     * out
     *
     * @param zmailPasswordLockoutMaxFailures new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=380)
    public void setPasswordLockoutMaxFailures(int zmailPasswordLockoutMaxFailures) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordLockoutMaxFailures, Integer.toString(zmailPasswordLockoutMaxFailures));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * number of consecutive failed login attempts until an account is locked
     * out
     *
     * @param zmailPasswordLockoutMaxFailures new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=380)
    public Map<String,Object> setPasswordLockoutMaxFailures(int zmailPasswordLockoutMaxFailures, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordLockoutMaxFailures, Integer.toString(zmailPasswordLockoutMaxFailures));
        return attrs;
    }

    /**
     * number of consecutive failed login attempts until an account is locked
     * out
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=380)
    public void unsetPasswordLockoutMaxFailures() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordLockoutMaxFailures, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * number of consecutive failed login attempts until an account is locked
     * out
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=380)
    public Map<String,Object> unsetPasswordLockoutMaxFailures(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordLockoutMaxFailures, "");
        return attrs;
    }

    /**
     * maximum days between password changes
     *
     * @return zmailPasswordMaxAge, or 0 if unset
     */
    @ZAttr(id=36)
    public int getPasswordMaxAge() {
        return getIntAttr(Provisioning.A_zmailPasswordMaxAge, 0);
    }

    /**
     * maximum days between password changes
     *
     * @param zmailPasswordMaxAge new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=36)
    public void setPasswordMaxAge(int zmailPasswordMaxAge) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordMaxAge, Integer.toString(zmailPasswordMaxAge));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * maximum days between password changes
     *
     * @param zmailPasswordMaxAge new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=36)
    public Map<String,Object> setPasswordMaxAge(int zmailPasswordMaxAge, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordMaxAge, Integer.toString(zmailPasswordMaxAge));
        return attrs;
    }

    /**
     * maximum days between password changes
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=36)
    public void unsetPasswordMaxAge() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordMaxAge, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * maximum days between password changes
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=36)
    public Map<String,Object> unsetPasswordMaxAge(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordMaxAge, "");
        return attrs;
    }

    /**
     * max length of a password
     *
     * @return zmailPasswordMaxLength, or 64 if unset
     */
    @ZAttr(id=34)
    public int getPasswordMaxLength() {
        return getIntAttr(Provisioning.A_zmailPasswordMaxLength, 64);
    }

    /**
     * max length of a password
     *
     * @param zmailPasswordMaxLength new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=34)
    public void setPasswordMaxLength(int zmailPasswordMaxLength) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordMaxLength, Integer.toString(zmailPasswordMaxLength));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * max length of a password
     *
     * @param zmailPasswordMaxLength new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=34)
    public Map<String,Object> setPasswordMaxLength(int zmailPasswordMaxLength, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordMaxLength, Integer.toString(zmailPasswordMaxLength));
        return attrs;
    }

    /**
     * max length of a password
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=34)
    public void unsetPasswordMaxLength() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordMaxLength, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * max length of a password
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=34)
    public Map<String,Object> unsetPasswordMaxLength(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordMaxLength, "");
        return attrs;
    }

    /**
     * minimum days between password changes
     *
     * @return zmailPasswordMinAge, or 0 if unset
     */
    @ZAttr(id=35)
    public int getPasswordMinAge() {
        return getIntAttr(Provisioning.A_zmailPasswordMinAge, 0);
    }

    /**
     * minimum days between password changes
     *
     * @param zmailPasswordMinAge new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=35)
    public void setPasswordMinAge(int zmailPasswordMinAge) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordMinAge, Integer.toString(zmailPasswordMinAge));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * minimum days between password changes
     *
     * @param zmailPasswordMinAge new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=35)
    public Map<String,Object> setPasswordMinAge(int zmailPasswordMinAge, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordMinAge, Integer.toString(zmailPasswordMinAge));
        return attrs;
    }

    /**
     * minimum days between password changes
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=35)
    public void unsetPasswordMinAge() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordMinAge, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * minimum days between password changes
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=35)
    public Map<String,Object> unsetPasswordMinAge(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordMinAge, "");
        return attrs;
    }

    /**
     * minimum number of alphabet characters required in a password
     *
     * @return zmailPasswordMinAlphaChars, or 0 if unset
     *
     * @since ZCS 7.1.0
     */
    @ZAttr(id=1162)
    public int getPasswordMinAlphaChars() {
        return getIntAttr(Provisioning.A_zmailPasswordMinAlphaChars, 0);
    }

    /**
     * minimum number of alphabet characters required in a password
     *
     * @param zmailPasswordMinAlphaChars new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.1.0
     */
    @ZAttr(id=1162)
    public void setPasswordMinAlphaChars(int zmailPasswordMinAlphaChars) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordMinAlphaChars, Integer.toString(zmailPasswordMinAlphaChars));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * minimum number of alphabet characters required in a password
     *
     * @param zmailPasswordMinAlphaChars new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.1.0
     */
    @ZAttr(id=1162)
    public Map<String,Object> setPasswordMinAlphaChars(int zmailPasswordMinAlphaChars, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordMinAlphaChars, Integer.toString(zmailPasswordMinAlphaChars));
        return attrs;
    }

    /**
     * minimum number of alphabet characters required in a password
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.1.0
     */
    @ZAttr(id=1162)
    public void unsetPasswordMinAlphaChars() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordMinAlphaChars, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * minimum number of alphabet characters required in a password
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.1.0
     */
    @ZAttr(id=1162)
    public Map<String,Object> unsetPasswordMinAlphaChars(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordMinAlphaChars, "");
        return attrs;
    }

    /**
     * minimum number of numeric or ascii punctuation characters required in
     * a password
     *
     * @return zmailPasswordMinDigitsOrPuncs, or 0 if unset
     *
     * @since ZCS 7.1.3
     */
    @ZAttr(id=1255)
    public int getPasswordMinDigitsOrPuncs() {
        return getIntAttr(Provisioning.A_zmailPasswordMinDigitsOrPuncs, 0);
    }

    /**
     * minimum number of numeric or ascii punctuation characters required in
     * a password
     *
     * @param zmailPasswordMinDigitsOrPuncs new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.1.3
     */
    @ZAttr(id=1255)
    public void setPasswordMinDigitsOrPuncs(int zmailPasswordMinDigitsOrPuncs) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordMinDigitsOrPuncs, Integer.toString(zmailPasswordMinDigitsOrPuncs));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * minimum number of numeric or ascii punctuation characters required in
     * a password
     *
     * @param zmailPasswordMinDigitsOrPuncs new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.1.3
     */
    @ZAttr(id=1255)
    public Map<String,Object> setPasswordMinDigitsOrPuncs(int zmailPasswordMinDigitsOrPuncs, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordMinDigitsOrPuncs, Integer.toString(zmailPasswordMinDigitsOrPuncs));
        return attrs;
    }

    /**
     * minimum number of numeric or ascii punctuation characters required in
     * a password
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.1.3
     */
    @ZAttr(id=1255)
    public void unsetPasswordMinDigitsOrPuncs() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordMinDigitsOrPuncs, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * minimum number of numeric or ascii punctuation characters required in
     * a password
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.1.3
     */
    @ZAttr(id=1255)
    public Map<String,Object> unsetPasswordMinDigitsOrPuncs(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordMinDigitsOrPuncs, "");
        return attrs;
    }

    /**
     * minimum length of a password
     *
     * @return zmailPasswordMinLength, or 6 if unset
     */
    @ZAttr(id=33)
    public int getPasswordMinLength() {
        return getIntAttr(Provisioning.A_zmailPasswordMinLength, 6);
    }

    /**
     * minimum length of a password
     *
     * @param zmailPasswordMinLength new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=33)
    public void setPasswordMinLength(int zmailPasswordMinLength) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordMinLength, Integer.toString(zmailPasswordMinLength));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * minimum length of a password
     *
     * @param zmailPasswordMinLength new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=33)
    public Map<String,Object> setPasswordMinLength(int zmailPasswordMinLength, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordMinLength, Integer.toString(zmailPasswordMinLength));
        return attrs;
    }

    /**
     * minimum length of a password
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=33)
    public void unsetPasswordMinLength() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordMinLength, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * minimum length of a password
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=33)
    public Map<String,Object> unsetPasswordMinLength(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordMinLength, "");
        return attrs;
    }

    /**
     * minimum number of lower case characters required in a password
     *
     * @return zmailPasswordMinLowerCaseChars, or 0 if unset
     */
    @ZAttr(id=390)
    public int getPasswordMinLowerCaseChars() {
        return getIntAttr(Provisioning.A_zmailPasswordMinLowerCaseChars, 0);
    }

    /**
     * minimum number of lower case characters required in a password
     *
     * @param zmailPasswordMinLowerCaseChars new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=390)
    public void setPasswordMinLowerCaseChars(int zmailPasswordMinLowerCaseChars) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordMinLowerCaseChars, Integer.toString(zmailPasswordMinLowerCaseChars));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * minimum number of lower case characters required in a password
     *
     * @param zmailPasswordMinLowerCaseChars new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=390)
    public Map<String,Object> setPasswordMinLowerCaseChars(int zmailPasswordMinLowerCaseChars, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordMinLowerCaseChars, Integer.toString(zmailPasswordMinLowerCaseChars));
        return attrs;
    }

    /**
     * minimum number of lower case characters required in a password
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=390)
    public void unsetPasswordMinLowerCaseChars() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordMinLowerCaseChars, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * minimum number of lower case characters required in a password
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=390)
    public Map<String,Object> unsetPasswordMinLowerCaseChars(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordMinLowerCaseChars, "");
        return attrs;
    }

    /**
     * minimum number of numeric characters required in a password
     *
     * @return zmailPasswordMinNumericChars, or 0 if unset
     */
    @ZAttr(id=392)
    public int getPasswordMinNumericChars() {
        return getIntAttr(Provisioning.A_zmailPasswordMinNumericChars, 0);
    }

    /**
     * minimum number of numeric characters required in a password
     *
     * @param zmailPasswordMinNumericChars new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=392)
    public void setPasswordMinNumericChars(int zmailPasswordMinNumericChars) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordMinNumericChars, Integer.toString(zmailPasswordMinNumericChars));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * minimum number of numeric characters required in a password
     *
     * @param zmailPasswordMinNumericChars new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=392)
    public Map<String,Object> setPasswordMinNumericChars(int zmailPasswordMinNumericChars, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordMinNumericChars, Integer.toString(zmailPasswordMinNumericChars));
        return attrs;
    }

    /**
     * minimum number of numeric characters required in a password
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=392)
    public void unsetPasswordMinNumericChars() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordMinNumericChars, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * minimum number of numeric characters required in a password
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=392)
    public Map<String,Object> unsetPasswordMinNumericChars(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordMinNumericChars, "");
        return attrs;
    }

    /**
     * minimum number of ascii punctuation characters required in a password
     *
     * @return zmailPasswordMinPunctuationChars, or 0 if unset
     */
    @ZAttr(id=391)
    public int getPasswordMinPunctuationChars() {
        return getIntAttr(Provisioning.A_zmailPasswordMinPunctuationChars, 0);
    }

    /**
     * minimum number of ascii punctuation characters required in a password
     *
     * @param zmailPasswordMinPunctuationChars new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=391)
    public void setPasswordMinPunctuationChars(int zmailPasswordMinPunctuationChars) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordMinPunctuationChars, Integer.toString(zmailPasswordMinPunctuationChars));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * minimum number of ascii punctuation characters required in a password
     *
     * @param zmailPasswordMinPunctuationChars new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=391)
    public Map<String,Object> setPasswordMinPunctuationChars(int zmailPasswordMinPunctuationChars, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordMinPunctuationChars, Integer.toString(zmailPasswordMinPunctuationChars));
        return attrs;
    }

    /**
     * minimum number of ascii punctuation characters required in a password
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=391)
    public void unsetPasswordMinPunctuationChars() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordMinPunctuationChars, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * minimum number of ascii punctuation characters required in a password
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=391)
    public Map<String,Object> unsetPasswordMinPunctuationChars(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordMinPunctuationChars, "");
        return attrs;
    }

    /**
     * minimum number of upper case characters required in a password
     *
     * @return zmailPasswordMinUpperCaseChars, or 0 if unset
     */
    @ZAttr(id=389)
    public int getPasswordMinUpperCaseChars() {
        return getIntAttr(Provisioning.A_zmailPasswordMinUpperCaseChars, 0);
    }

    /**
     * minimum number of upper case characters required in a password
     *
     * @param zmailPasswordMinUpperCaseChars new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=389)
    public void setPasswordMinUpperCaseChars(int zmailPasswordMinUpperCaseChars) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordMinUpperCaseChars, Integer.toString(zmailPasswordMinUpperCaseChars));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * minimum number of upper case characters required in a password
     *
     * @param zmailPasswordMinUpperCaseChars new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=389)
    public Map<String,Object> setPasswordMinUpperCaseChars(int zmailPasswordMinUpperCaseChars, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordMinUpperCaseChars, Integer.toString(zmailPasswordMinUpperCaseChars));
        return attrs;
    }

    /**
     * minimum number of upper case characters required in a password
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=389)
    public void unsetPasswordMinUpperCaseChars() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordMinUpperCaseChars, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * minimum number of upper case characters required in a password
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=389)
    public Map<String,Object> unsetPasswordMinUpperCaseChars(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPasswordMinUpperCaseChars, "");
        return attrs;
    }

    /**
     * whether POP3 is enabled for an account
     *
     * @return zmailPop3Enabled, or true if unset
     */
    @ZAttr(id=175)
    public boolean isPop3Enabled() {
        return getBooleanAttr(Provisioning.A_zmailPop3Enabled, true);
    }

    /**
     * whether POP3 is enabled for an account
     *
     * @param zmailPop3Enabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=175)
    public void setPop3Enabled(boolean zmailPop3Enabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPop3Enabled, zmailPop3Enabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether POP3 is enabled for an account
     *
     * @param zmailPop3Enabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=175)
    public Map<String,Object> setPop3Enabled(boolean zmailPop3Enabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPop3Enabled, zmailPop3Enabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether POP3 is enabled for an account
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=175)
    public void unsetPop3Enabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPop3Enabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether POP3 is enabled for an account
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=175)
    public Map<String,Object> unsetPop3Enabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPop3Enabled, "");
        return attrs;
    }

    /**
     * portal name
     *
     * @return zmailPortalName, or "example" if unset
     */
    @ZAttr(id=448)
    public String getPortalName() {
        return getAttr(Provisioning.A_zmailPortalName, "example");
    }

    /**
     * portal name
     *
     * @param zmailPortalName new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=448)
    public void setPortalName(String zmailPortalName) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPortalName, zmailPortalName);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * portal name
     *
     * @param zmailPortalName new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=448)
    public Map<String,Object> setPortalName(String zmailPortalName, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPortalName, zmailPortalName);
        return attrs;
    }

    /**
     * portal name
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=448)
    public void unsetPortalName() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPortalName, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * portal name
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=448)
    public Map<String,Object> unsetPortalName(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPortalName, "");
        return attrs;
    }

    /**
     * whether or not account tree is expanded
     *
     * @return zmailPrefAccountTreeOpen, or true if unset
     *
     * @since ZCS 6.0.2
     */
    @ZAttr(id=1048)
    public boolean isPrefAccountTreeOpen() {
        return getBooleanAttr(Provisioning.A_zmailPrefAccountTreeOpen, true);
    }

    /**
     * whether or not account tree is expanded
     *
     * @param zmailPrefAccountTreeOpen new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.2
     */
    @ZAttr(id=1048)
    public void setPrefAccountTreeOpen(boolean zmailPrefAccountTreeOpen) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefAccountTreeOpen, zmailPrefAccountTreeOpen ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether or not account tree is expanded
     *
     * @param zmailPrefAccountTreeOpen new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.2
     */
    @ZAttr(id=1048)
    public Map<String,Object> setPrefAccountTreeOpen(boolean zmailPrefAccountTreeOpen, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefAccountTreeOpen, zmailPrefAccountTreeOpen ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether or not account tree is expanded
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.2
     */
    @ZAttr(id=1048)
    public void unsetPrefAccountTreeOpen() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefAccountTreeOpen, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether or not account tree is expanded
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.2
     */
    @ZAttr(id=1048)
    public Map<String,Object> unsetPrefAccountTreeOpen(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefAccountTreeOpen, "");
        return attrs;
    }

    /**
     * whether to display a warning when users try to navigate away from the
     * admin console
     *
     * @return zmailPrefAdminConsoleWarnOnExit, or true if unset
     *
     * @since ZCS 6.0.0_RC1
     */
    @ZAttr(id=1036)
    public boolean isPrefAdminConsoleWarnOnExit() {
        return getBooleanAttr(Provisioning.A_zmailPrefAdminConsoleWarnOnExit, true);
    }

    /**
     * whether to display a warning when users try to navigate away from the
     * admin console
     *
     * @param zmailPrefAdminConsoleWarnOnExit new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_RC1
     */
    @ZAttr(id=1036)
    public void setPrefAdminConsoleWarnOnExit(boolean zmailPrefAdminConsoleWarnOnExit) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefAdminConsoleWarnOnExit, zmailPrefAdminConsoleWarnOnExit ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to display a warning when users try to navigate away from the
     * admin console
     *
     * @param zmailPrefAdminConsoleWarnOnExit new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_RC1
     */
    @ZAttr(id=1036)
    public Map<String,Object> setPrefAdminConsoleWarnOnExit(boolean zmailPrefAdminConsoleWarnOnExit, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefAdminConsoleWarnOnExit, zmailPrefAdminConsoleWarnOnExit ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether to display a warning when users try to navigate away from the
     * admin console
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_RC1
     */
    @ZAttr(id=1036)
    public void unsetPrefAdminConsoleWarnOnExit() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefAdminConsoleWarnOnExit, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to display a warning when users try to navigate away from the
     * admin console
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_RC1
     */
    @ZAttr(id=1036)
    public Map<String,Object> unsetPrefAdminConsoleWarnOnExit(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefAdminConsoleWarnOnExit, "");
        return attrs;
    }

    /**
     * After login, whether the advanced client should enforce minimum
     * display resolution
     *
     * @return zmailPrefAdvancedClientEnforceMinDisplay, or true if unset
     *
     * @since ZCS 5.0.7
     */
    @ZAttr(id=678)
    public boolean isPrefAdvancedClientEnforceMinDisplay() {
        return getBooleanAttr(Provisioning.A_zmailPrefAdvancedClientEnforceMinDisplay, true);
    }

    /**
     * After login, whether the advanced client should enforce minimum
     * display resolution
     *
     * @param zmailPrefAdvancedClientEnforceMinDisplay new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.7
     */
    @ZAttr(id=678)
    public void setPrefAdvancedClientEnforceMinDisplay(boolean zmailPrefAdvancedClientEnforceMinDisplay) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefAdvancedClientEnforceMinDisplay, zmailPrefAdvancedClientEnforceMinDisplay ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * After login, whether the advanced client should enforce minimum
     * display resolution
     *
     * @param zmailPrefAdvancedClientEnforceMinDisplay new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.7
     */
    @ZAttr(id=678)
    public Map<String,Object> setPrefAdvancedClientEnforceMinDisplay(boolean zmailPrefAdvancedClientEnforceMinDisplay, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefAdvancedClientEnforceMinDisplay, zmailPrefAdvancedClientEnforceMinDisplay ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * After login, whether the advanced client should enforce minimum
     * display resolution
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.7
     */
    @ZAttr(id=678)
    public void unsetPrefAdvancedClientEnforceMinDisplay() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefAdvancedClientEnforceMinDisplay, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * After login, whether the advanced client should enforce minimum
     * display resolution
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.7
     */
    @ZAttr(id=678)
    public Map<String,Object> unsetPrefAdvancedClientEnforceMinDisplay(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefAdvancedClientEnforceMinDisplay, "");
        return attrs;
    }

    /**
     * Use the iCal style delegation model for shared calendars for CalDAV
     * interface when set to TRUE.
     *
     * @return zmailPrefAppleIcalDelegationEnabled, or false if unset
     *
     * @since ZCS 5.0.17
     */
    @ZAttr(id=1028)
    public boolean isPrefAppleIcalDelegationEnabled() {
        return getBooleanAttr(Provisioning.A_zmailPrefAppleIcalDelegationEnabled, false);
    }

    /**
     * Use the iCal style delegation model for shared calendars for CalDAV
     * interface when set to TRUE.
     *
     * @param zmailPrefAppleIcalDelegationEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.17
     */
    @ZAttr(id=1028)
    public void setPrefAppleIcalDelegationEnabled(boolean zmailPrefAppleIcalDelegationEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefAppleIcalDelegationEnabled, zmailPrefAppleIcalDelegationEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Use the iCal style delegation model for shared calendars for CalDAV
     * interface when set to TRUE.
     *
     * @param zmailPrefAppleIcalDelegationEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.17
     */
    @ZAttr(id=1028)
    public Map<String,Object> setPrefAppleIcalDelegationEnabled(boolean zmailPrefAppleIcalDelegationEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefAppleIcalDelegationEnabled, zmailPrefAppleIcalDelegationEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * Use the iCal style delegation model for shared calendars for CalDAV
     * interface when set to TRUE.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.17
     */
    @ZAttr(id=1028)
    public void unsetPrefAppleIcalDelegationEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefAppleIcalDelegationEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Use the iCal style delegation model for shared calendars for CalDAV
     * interface when set to TRUE.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.17
     */
    @ZAttr(id=1028)
    public Map<String,Object> unsetPrefAppleIcalDelegationEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefAppleIcalDelegationEnabled, "");
        return attrs;
    }

    /**
     * whether or not new address in outgoing email are auto added to address
     * book
     *
     * @return zmailPrefAutoAddAddressEnabled, or true if unset
     */
    @ZAttr(id=131)
    public boolean isPrefAutoAddAddressEnabled() {
        return getBooleanAttr(Provisioning.A_zmailPrefAutoAddAddressEnabled, true);
    }

    /**
     * whether or not new address in outgoing email are auto added to address
     * book
     *
     * @param zmailPrefAutoAddAddressEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=131)
    public void setPrefAutoAddAddressEnabled(boolean zmailPrefAutoAddAddressEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefAutoAddAddressEnabled, zmailPrefAutoAddAddressEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether or not new address in outgoing email are auto added to address
     * book
     *
     * @param zmailPrefAutoAddAddressEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=131)
    public Map<String,Object> setPrefAutoAddAddressEnabled(boolean zmailPrefAutoAddAddressEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefAutoAddAddressEnabled, zmailPrefAutoAddAddressEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether or not new address in outgoing email are auto added to address
     * book
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=131)
    public void unsetPrefAutoAddAddressEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefAutoAddAddressEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether or not new address in outgoing email are auto added to address
     * book
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=131)
    public Map<String,Object> unsetPrefAutoAddAddressEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefAutoAddAddressEnabled, "");
        return attrs;
    }

    /**
     * whether to end auto-complete on comma
     *
     * @return zmailPrefAutoCompleteQuickCompletionOnComma, or true if unset
     *
     * @since ZCS 6.0.7
     */
    @ZAttr(id=1091)
    public boolean isPrefAutoCompleteQuickCompletionOnComma() {
        return getBooleanAttr(Provisioning.A_zmailPrefAutoCompleteQuickCompletionOnComma, true);
    }

    /**
     * whether to end auto-complete on comma
     *
     * @param zmailPrefAutoCompleteQuickCompletionOnComma new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.7
     */
    @ZAttr(id=1091)
    public void setPrefAutoCompleteQuickCompletionOnComma(boolean zmailPrefAutoCompleteQuickCompletionOnComma) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefAutoCompleteQuickCompletionOnComma, zmailPrefAutoCompleteQuickCompletionOnComma ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to end auto-complete on comma
     *
     * @param zmailPrefAutoCompleteQuickCompletionOnComma new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.7
     */
    @ZAttr(id=1091)
    public Map<String,Object> setPrefAutoCompleteQuickCompletionOnComma(boolean zmailPrefAutoCompleteQuickCompletionOnComma, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefAutoCompleteQuickCompletionOnComma, zmailPrefAutoCompleteQuickCompletionOnComma ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether to end auto-complete on comma
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.7
     */
    @ZAttr(id=1091)
    public void unsetPrefAutoCompleteQuickCompletionOnComma() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefAutoCompleteQuickCompletionOnComma, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to end auto-complete on comma
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.7
     */
    @ZAttr(id=1091)
    public Map<String,Object> unsetPrefAutoCompleteQuickCompletionOnComma(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefAutoCompleteQuickCompletionOnComma, "");
        return attrs;
    }

    /**
     * time to wait before auto saving a draft. Must be in valid duration
     * format: {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h -
     * hours, m - minutes, s - seconds, d - days, ms - milliseconds. If time
     * unit is not specified, the default is s(seconds).
     *
     * <p>Use getPrefAutoSaveDraftIntervalAsString to access value as a string.
     *
     * @see #getPrefAutoSaveDraftIntervalAsString()
     *
     * @return zmailPrefAutoSaveDraftInterval in millseconds, or 30000 (30s)  if unset
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=561)
    public long getPrefAutoSaveDraftInterval() {
        return getTimeInterval(Provisioning.A_zmailPrefAutoSaveDraftInterval, 30000L);
    }

    /**
     * time to wait before auto saving a draft. Must be in valid duration
     * format: {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h -
     * hours, m - minutes, s - seconds, d - days, ms - milliseconds. If time
     * unit is not specified, the default is s(seconds).
     *
     * @return zmailPrefAutoSaveDraftInterval, or "30s" if unset
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=561)
    public String getPrefAutoSaveDraftIntervalAsString() {
        return getAttr(Provisioning.A_zmailPrefAutoSaveDraftInterval, "30s");
    }

    /**
     * time to wait before auto saving a draft. Must be in valid duration
     * format: {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h -
     * hours, m - minutes, s - seconds, d - days, ms - milliseconds. If time
     * unit is not specified, the default is s(seconds).
     *
     * @param zmailPrefAutoSaveDraftInterval new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=561)
    public void setPrefAutoSaveDraftInterval(String zmailPrefAutoSaveDraftInterval) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefAutoSaveDraftInterval, zmailPrefAutoSaveDraftInterval);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * time to wait before auto saving a draft. Must be in valid duration
     * format: {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h -
     * hours, m - minutes, s - seconds, d - days, ms - milliseconds. If time
     * unit is not specified, the default is s(seconds).
     *
     * @param zmailPrefAutoSaveDraftInterval new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=561)
    public Map<String,Object> setPrefAutoSaveDraftInterval(String zmailPrefAutoSaveDraftInterval, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefAutoSaveDraftInterval, zmailPrefAutoSaveDraftInterval);
        return attrs;
    }

    /**
     * time to wait before auto saving a draft. Must be in valid duration
     * format: {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h -
     * hours, m - minutes, s - seconds, d - days, ms - milliseconds. If time
     * unit is not specified, the default is s(seconds).
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=561)
    public void unsetPrefAutoSaveDraftInterval() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefAutoSaveDraftInterval, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * time to wait before auto saving a draft. Must be in valid duration
     * format: {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h -
     * hours, m - minutes, s - seconds, d - days, ms - milliseconds. If time
     * unit is not specified, the default is s(seconds).
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=561)
    public Map<String,Object> unsetPrefAutoSaveDraftInterval(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefAutoSaveDraftInterval, "");
        return attrs;
    }

    /**
     * whether actionable address objects result from autocomplete is enabled
     *
     * @return zmailPrefAutocompleteAddressBubblesEnabled, or true if unset
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1146)
    public boolean isPrefAutocompleteAddressBubblesEnabled() {
        return getBooleanAttr(Provisioning.A_zmailPrefAutocompleteAddressBubblesEnabled, true);
    }

    /**
     * whether actionable address objects result from autocomplete is enabled
     *
     * @param zmailPrefAutocompleteAddressBubblesEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1146)
    public void setPrefAutocompleteAddressBubblesEnabled(boolean zmailPrefAutocompleteAddressBubblesEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefAutocompleteAddressBubblesEnabled, zmailPrefAutocompleteAddressBubblesEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether actionable address objects result from autocomplete is enabled
     *
     * @param zmailPrefAutocompleteAddressBubblesEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1146)
    public Map<String,Object> setPrefAutocompleteAddressBubblesEnabled(boolean zmailPrefAutocompleteAddressBubblesEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefAutocompleteAddressBubblesEnabled, zmailPrefAutocompleteAddressBubblesEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether actionable address objects result from autocomplete is enabled
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1146)
    public void unsetPrefAutocompleteAddressBubblesEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefAutocompleteAddressBubblesEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether actionable address objects result from autocomplete is enabled
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1146)
    public Map<String,Object> unsetPrefAutocompleteAddressBubblesEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefAutocompleteAddressBubblesEnabled, "");
        return attrs;
    }

    /**
     * where the reading pane is displayed for briefcase
     *
     * <p>Valid values: [off, bottom, right]
     *
     * @return zmailPrefBriefcaseReadingPaneLocation, or ZAttrProvisioning.PrefBriefcaseReadingPaneLocation.right if unset and/or has invalid value
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1152)
    public ZAttrProvisioning.PrefBriefcaseReadingPaneLocation getPrefBriefcaseReadingPaneLocation() {
        try { String v = getAttr(Provisioning.A_zmailPrefBriefcaseReadingPaneLocation); return v == null ? ZAttrProvisioning.PrefBriefcaseReadingPaneLocation.right : ZAttrProvisioning.PrefBriefcaseReadingPaneLocation.fromString(v); } catch(org.zmail.common.service.ServiceException e) { return ZAttrProvisioning.PrefBriefcaseReadingPaneLocation.right; }
    }

    /**
     * where the reading pane is displayed for briefcase
     *
     * <p>Valid values: [off, bottom, right]
     *
     * @return zmailPrefBriefcaseReadingPaneLocation, or "right" if unset
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1152)
    public String getPrefBriefcaseReadingPaneLocationAsString() {
        return getAttr(Provisioning.A_zmailPrefBriefcaseReadingPaneLocation, "right");
    }

    /**
     * where the reading pane is displayed for briefcase
     *
     * <p>Valid values: [off, bottom, right]
     *
     * @param zmailPrefBriefcaseReadingPaneLocation new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1152)
    public void setPrefBriefcaseReadingPaneLocation(ZAttrProvisioning.PrefBriefcaseReadingPaneLocation zmailPrefBriefcaseReadingPaneLocation) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefBriefcaseReadingPaneLocation, zmailPrefBriefcaseReadingPaneLocation.toString());
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * where the reading pane is displayed for briefcase
     *
     * <p>Valid values: [off, bottom, right]
     *
     * @param zmailPrefBriefcaseReadingPaneLocation new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1152)
    public Map<String,Object> setPrefBriefcaseReadingPaneLocation(ZAttrProvisioning.PrefBriefcaseReadingPaneLocation zmailPrefBriefcaseReadingPaneLocation, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefBriefcaseReadingPaneLocation, zmailPrefBriefcaseReadingPaneLocation.toString());
        return attrs;
    }

    /**
     * where the reading pane is displayed for briefcase
     *
     * <p>Valid values: [off, bottom, right]
     *
     * @param zmailPrefBriefcaseReadingPaneLocation new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1152)
    public void setPrefBriefcaseReadingPaneLocationAsString(String zmailPrefBriefcaseReadingPaneLocation) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefBriefcaseReadingPaneLocation, zmailPrefBriefcaseReadingPaneLocation);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * where the reading pane is displayed for briefcase
     *
     * <p>Valid values: [off, bottom, right]
     *
     * @param zmailPrefBriefcaseReadingPaneLocation new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1152)
    public Map<String,Object> setPrefBriefcaseReadingPaneLocationAsString(String zmailPrefBriefcaseReadingPaneLocation, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefBriefcaseReadingPaneLocation, zmailPrefBriefcaseReadingPaneLocation);
        return attrs;
    }

    /**
     * where the reading pane is displayed for briefcase
     *
     * <p>Valid values: [off, bottom, right]
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1152)
    public void unsetPrefBriefcaseReadingPaneLocation() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefBriefcaseReadingPaneLocation, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * where the reading pane is displayed for briefcase
     *
     * <p>Valid values: [off, bottom, right]
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1152)
    public Map<String,Object> unsetPrefBriefcaseReadingPaneLocation(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefBriefcaseReadingPaneLocation, "");
        return attrs;
    }

    /**
     * whether to allow a cancel email sent to organizer of appointment
     *
     * @return zmailPrefCalendarAllowCancelEmailToSelf, or false if unset
     *
     * @since ZCS 5.0.9
     */
    @ZAttr(id=702)
    public boolean isPrefCalendarAllowCancelEmailToSelf() {
        return getBooleanAttr(Provisioning.A_zmailPrefCalendarAllowCancelEmailToSelf, false);
    }

    /**
     * whether to allow a cancel email sent to organizer of appointment
     *
     * @param zmailPrefCalendarAllowCancelEmailToSelf new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.9
     */
    @ZAttr(id=702)
    public void setPrefCalendarAllowCancelEmailToSelf(boolean zmailPrefCalendarAllowCancelEmailToSelf) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarAllowCancelEmailToSelf, zmailPrefCalendarAllowCancelEmailToSelf ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to allow a cancel email sent to organizer of appointment
     *
     * @param zmailPrefCalendarAllowCancelEmailToSelf new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.9
     */
    @ZAttr(id=702)
    public Map<String,Object> setPrefCalendarAllowCancelEmailToSelf(boolean zmailPrefCalendarAllowCancelEmailToSelf, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarAllowCancelEmailToSelf, zmailPrefCalendarAllowCancelEmailToSelf ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether to allow a cancel email sent to organizer of appointment
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.9
     */
    @ZAttr(id=702)
    public void unsetPrefCalendarAllowCancelEmailToSelf() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarAllowCancelEmailToSelf, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to allow a cancel email sent to organizer of appointment
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.9
     */
    @ZAttr(id=702)
    public Map<String,Object> unsetPrefCalendarAllowCancelEmailToSelf(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarAllowCancelEmailToSelf, "");
        return attrs;
    }

    /**
     * whether calendar invite part in a forwarded email is auto-added to
     * calendar
     *
     * @return zmailPrefCalendarAllowForwardedInvite, or true if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=686)
    public boolean isPrefCalendarAllowForwardedInvite() {
        return getBooleanAttr(Provisioning.A_zmailPrefCalendarAllowForwardedInvite, true);
    }

    /**
     * whether calendar invite part in a forwarded email is auto-added to
     * calendar
     *
     * @param zmailPrefCalendarAllowForwardedInvite new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=686)
    public void setPrefCalendarAllowForwardedInvite(boolean zmailPrefCalendarAllowForwardedInvite) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarAllowForwardedInvite, zmailPrefCalendarAllowForwardedInvite ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether calendar invite part in a forwarded email is auto-added to
     * calendar
     *
     * @param zmailPrefCalendarAllowForwardedInvite new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=686)
    public Map<String,Object> setPrefCalendarAllowForwardedInvite(boolean zmailPrefCalendarAllowForwardedInvite, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarAllowForwardedInvite, zmailPrefCalendarAllowForwardedInvite ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether calendar invite part in a forwarded email is auto-added to
     * calendar
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=686)
    public void unsetPrefCalendarAllowForwardedInvite() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarAllowForwardedInvite, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether calendar invite part in a forwarded email is auto-added to
     * calendar
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=686)
    public Map<String,Object> unsetPrefCalendarAllowForwardedInvite(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarAllowForwardedInvite, "");
        return attrs;
    }

    /**
     * whether calendar invite part with PUBLISH method is auto-added to
     * calendar
     *
     * @return zmailPrefCalendarAllowPublishMethodInvite, or false if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=688)
    public boolean isPrefCalendarAllowPublishMethodInvite() {
        return getBooleanAttr(Provisioning.A_zmailPrefCalendarAllowPublishMethodInvite, false);
    }

    /**
     * whether calendar invite part with PUBLISH method is auto-added to
     * calendar
     *
     * @param zmailPrefCalendarAllowPublishMethodInvite new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=688)
    public void setPrefCalendarAllowPublishMethodInvite(boolean zmailPrefCalendarAllowPublishMethodInvite) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarAllowPublishMethodInvite, zmailPrefCalendarAllowPublishMethodInvite ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether calendar invite part with PUBLISH method is auto-added to
     * calendar
     *
     * @param zmailPrefCalendarAllowPublishMethodInvite new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=688)
    public Map<String,Object> setPrefCalendarAllowPublishMethodInvite(boolean zmailPrefCalendarAllowPublishMethodInvite, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarAllowPublishMethodInvite, zmailPrefCalendarAllowPublishMethodInvite ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether calendar invite part with PUBLISH method is auto-added to
     * calendar
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=688)
    public void unsetPrefCalendarAllowPublishMethodInvite() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarAllowPublishMethodInvite, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether calendar invite part with PUBLISH method is auto-added to
     * calendar
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=688)
    public Map<String,Object> unsetPrefCalendarAllowPublishMethodInvite(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarAllowPublishMethodInvite, "");
        return attrs;
    }

    /**
     * always show the mini calendar
     *
     * @return zmailPrefCalendarAlwaysShowMiniCal, or true if unset
     */
    @ZAttr(id=276)
    public boolean isPrefCalendarAlwaysShowMiniCal() {
        return getBooleanAttr(Provisioning.A_zmailPrefCalendarAlwaysShowMiniCal, true);
    }

    /**
     * always show the mini calendar
     *
     * @param zmailPrefCalendarAlwaysShowMiniCal new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=276)
    public void setPrefCalendarAlwaysShowMiniCal(boolean zmailPrefCalendarAlwaysShowMiniCal) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarAlwaysShowMiniCal, zmailPrefCalendarAlwaysShowMiniCal ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * always show the mini calendar
     *
     * @param zmailPrefCalendarAlwaysShowMiniCal new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=276)
    public Map<String,Object> setPrefCalendarAlwaysShowMiniCal(boolean zmailPrefCalendarAlwaysShowMiniCal, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarAlwaysShowMiniCal, zmailPrefCalendarAlwaysShowMiniCal ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * always show the mini calendar
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=276)
    public void unsetPrefCalendarAlwaysShowMiniCal() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarAlwaysShowMiniCal, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * always show the mini calendar
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=276)
    public Map<String,Object> unsetPrefCalendarAlwaysShowMiniCal(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarAlwaysShowMiniCal, "");
        return attrs;
    }

    /**
     * Whether to allow attendees to make local edits to appointments. The
     * change is only on the attendees copy of the message and changes from
     * the organizer will overwrite the local changes.
     *
     * @return zmailPrefCalendarApptAllowAtendeeEdit, or true if unset
     *
     * @since ZCS 6.0.7
     */
    @ZAttr(id=1089)
    public boolean isPrefCalendarApptAllowAtendeeEdit() {
        return getBooleanAttr(Provisioning.A_zmailPrefCalendarApptAllowAtendeeEdit, true);
    }

    /**
     * Whether to allow attendees to make local edits to appointments. The
     * change is only on the attendees copy of the message and changes from
     * the organizer will overwrite the local changes.
     *
     * @param zmailPrefCalendarApptAllowAtendeeEdit new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.7
     */
    @ZAttr(id=1089)
    public void setPrefCalendarApptAllowAtendeeEdit(boolean zmailPrefCalendarApptAllowAtendeeEdit) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarApptAllowAtendeeEdit, zmailPrefCalendarApptAllowAtendeeEdit ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Whether to allow attendees to make local edits to appointments. The
     * change is only on the attendees copy of the message and changes from
     * the organizer will overwrite the local changes.
     *
     * @param zmailPrefCalendarApptAllowAtendeeEdit new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.7
     */
    @ZAttr(id=1089)
    public Map<String,Object> setPrefCalendarApptAllowAtendeeEdit(boolean zmailPrefCalendarApptAllowAtendeeEdit, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarApptAllowAtendeeEdit, zmailPrefCalendarApptAllowAtendeeEdit ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * Whether to allow attendees to make local edits to appointments. The
     * change is only on the attendees copy of the message and changes from
     * the organizer will overwrite the local changes.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.7
     */
    @ZAttr(id=1089)
    public void unsetPrefCalendarApptAllowAtendeeEdit() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarApptAllowAtendeeEdit, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Whether to allow attendees to make local edits to appointments. The
     * change is only on the attendees copy of the message and changes from
     * the organizer will overwrite the local changes.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.7
     */
    @ZAttr(id=1089)
    public Map<String,Object> unsetPrefCalendarApptAllowAtendeeEdit(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarApptAllowAtendeeEdit, "");
        return attrs;
    }

    /**
     * number of minutes (0 = never) before appt to show reminder dialog
     *
     * @return zmailPrefCalendarApptReminderWarningTime, or 5 if unset
     */
    @ZAttr(id=341)
    public int getPrefCalendarApptReminderWarningTime() {
        return getIntAttr(Provisioning.A_zmailPrefCalendarApptReminderWarningTime, 5);
    }

    /**
     * number of minutes (0 = never) before appt to show reminder dialog
     *
     * @param zmailPrefCalendarApptReminderWarningTime new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=341)
    public void setPrefCalendarApptReminderWarningTime(int zmailPrefCalendarApptReminderWarningTime) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarApptReminderWarningTime, Integer.toString(zmailPrefCalendarApptReminderWarningTime));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * number of minutes (0 = never) before appt to show reminder dialog
     *
     * @param zmailPrefCalendarApptReminderWarningTime new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=341)
    public Map<String,Object> setPrefCalendarApptReminderWarningTime(int zmailPrefCalendarApptReminderWarningTime, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarApptReminderWarningTime, Integer.toString(zmailPrefCalendarApptReminderWarningTime));
        return attrs;
    }

    /**
     * number of minutes (0 = never) before appt to show reminder dialog
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=341)
    public void unsetPrefCalendarApptReminderWarningTime() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarApptReminderWarningTime, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * number of minutes (0 = never) before appt to show reminder dialog
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=341)
    public Map<String,Object> unsetPrefCalendarApptReminderWarningTime(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarApptReminderWarningTime, "");
        return attrs;
    }

    /**
     * default visibility of the appointment when starting a new appointment
     * in the UI
     *
     * <p>Valid values: [public, private]
     *
     * @return zmailPrefCalendarApptVisibility, or ZAttrProvisioning.PrefCalendarApptVisibility.public_ if unset and/or has invalid value
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=832)
    public ZAttrProvisioning.PrefCalendarApptVisibility getPrefCalendarApptVisibility() {
        try { String v = getAttr(Provisioning.A_zmailPrefCalendarApptVisibility); return v == null ? ZAttrProvisioning.PrefCalendarApptVisibility.public_ : ZAttrProvisioning.PrefCalendarApptVisibility.fromString(v); } catch(org.zmail.common.service.ServiceException e) { return ZAttrProvisioning.PrefCalendarApptVisibility.public_; }
    }

    /**
     * default visibility of the appointment when starting a new appointment
     * in the UI
     *
     * <p>Valid values: [public, private]
     *
     * @return zmailPrefCalendarApptVisibility, or "public" if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=832)
    public String getPrefCalendarApptVisibilityAsString() {
        return getAttr(Provisioning.A_zmailPrefCalendarApptVisibility, "public");
    }

    /**
     * default visibility of the appointment when starting a new appointment
     * in the UI
     *
     * <p>Valid values: [public, private]
     *
     * @param zmailPrefCalendarApptVisibility new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=832)
    public void setPrefCalendarApptVisibility(ZAttrProvisioning.PrefCalendarApptVisibility zmailPrefCalendarApptVisibility) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarApptVisibility, zmailPrefCalendarApptVisibility.toString());
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * default visibility of the appointment when starting a new appointment
     * in the UI
     *
     * <p>Valid values: [public, private]
     *
     * @param zmailPrefCalendarApptVisibility new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=832)
    public Map<String,Object> setPrefCalendarApptVisibility(ZAttrProvisioning.PrefCalendarApptVisibility zmailPrefCalendarApptVisibility, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarApptVisibility, zmailPrefCalendarApptVisibility.toString());
        return attrs;
    }

    /**
     * default visibility of the appointment when starting a new appointment
     * in the UI
     *
     * <p>Valid values: [public, private]
     *
     * @param zmailPrefCalendarApptVisibility new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=832)
    public void setPrefCalendarApptVisibilityAsString(String zmailPrefCalendarApptVisibility) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarApptVisibility, zmailPrefCalendarApptVisibility);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * default visibility of the appointment when starting a new appointment
     * in the UI
     *
     * <p>Valid values: [public, private]
     *
     * @param zmailPrefCalendarApptVisibility new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=832)
    public Map<String,Object> setPrefCalendarApptVisibilityAsString(String zmailPrefCalendarApptVisibility, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarApptVisibility, zmailPrefCalendarApptVisibility);
        return attrs;
    }

    /**
     * default visibility of the appointment when starting a new appointment
     * in the UI
     *
     * <p>Valid values: [public, private]
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=832)
    public void unsetPrefCalendarApptVisibility() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarApptVisibility, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * default visibility of the appointment when starting a new appointment
     * in the UI
     *
     * <p>Valid values: [public, private]
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=832)
    public Map<String,Object> unsetPrefCalendarApptVisibility(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarApptVisibility, "");
        return attrs;
    }

    /**
     * automatically add appointments when invited
     *
     * @return zmailPrefCalendarAutoAddInvites, or true if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=848)
    public boolean isPrefCalendarAutoAddInvites() {
        return getBooleanAttr(Provisioning.A_zmailPrefCalendarAutoAddInvites, true);
    }

    /**
     * automatically add appointments when invited
     *
     * @param zmailPrefCalendarAutoAddInvites new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=848)
    public void setPrefCalendarAutoAddInvites(boolean zmailPrefCalendarAutoAddInvites) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarAutoAddInvites, zmailPrefCalendarAutoAddInvites ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * automatically add appointments when invited
     *
     * @param zmailPrefCalendarAutoAddInvites new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=848)
    public Map<String,Object> setPrefCalendarAutoAddInvites(boolean zmailPrefCalendarAutoAddInvites, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarAutoAddInvites, zmailPrefCalendarAutoAddInvites ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * automatically add appointments when invited
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=848)
    public void unsetPrefCalendarAutoAddInvites() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarAutoAddInvites, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * automatically add appointments when invited
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=848)
    public Map<String,Object> unsetPrefCalendarAutoAddInvites(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarAutoAddInvites, "");
        return attrs;
    }

    /**
     * hour of day that the day view should end at, non-inclusive (16=4pm, 24
     * = midnight, etc)
     *
     * @return zmailPrefCalendarDayHourEnd, or 18 if unset
     */
    @ZAttr(id=440)
    public int getPrefCalendarDayHourEnd() {
        return getIntAttr(Provisioning.A_zmailPrefCalendarDayHourEnd, 18);
    }

    /**
     * hour of day that the day view should end at, non-inclusive (16=4pm, 24
     * = midnight, etc)
     *
     * @param zmailPrefCalendarDayHourEnd new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=440)
    public void setPrefCalendarDayHourEnd(int zmailPrefCalendarDayHourEnd) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarDayHourEnd, Integer.toString(zmailPrefCalendarDayHourEnd));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * hour of day that the day view should end at, non-inclusive (16=4pm, 24
     * = midnight, etc)
     *
     * @param zmailPrefCalendarDayHourEnd new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=440)
    public Map<String,Object> setPrefCalendarDayHourEnd(int zmailPrefCalendarDayHourEnd, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarDayHourEnd, Integer.toString(zmailPrefCalendarDayHourEnd));
        return attrs;
    }

    /**
     * hour of day that the day view should end at, non-inclusive (16=4pm, 24
     * = midnight, etc)
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=440)
    public void unsetPrefCalendarDayHourEnd() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarDayHourEnd, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * hour of day that the day view should end at, non-inclusive (16=4pm, 24
     * = midnight, etc)
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=440)
    public Map<String,Object> unsetPrefCalendarDayHourEnd(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarDayHourEnd, "");
        return attrs;
    }

    /**
     * hour of day that the day view should start at (1=1 AM, 8=8 AM, etc)
     *
     * @return zmailPrefCalendarDayHourStart, or 8 if unset
     */
    @ZAttr(id=439)
    public int getPrefCalendarDayHourStart() {
        return getIntAttr(Provisioning.A_zmailPrefCalendarDayHourStart, 8);
    }

    /**
     * hour of day that the day view should start at (1=1 AM, 8=8 AM, etc)
     *
     * @param zmailPrefCalendarDayHourStart new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=439)
    public void setPrefCalendarDayHourStart(int zmailPrefCalendarDayHourStart) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarDayHourStart, Integer.toString(zmailPrefCalendarDayHourStart));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * hour of day that the day view should start at (1=1 AM, 8=8 AM, etc)
     *
     * @param zmailPrefCalendarDayHourStart new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=439)
    public Map<String,Object> setPrefCalendarDayHourStart(int zmailPrefCalendarDayHourStart, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarDayHourStart, Integer.toString(zmailPrefCalendarDayHourStart));
        return attrs;
    }

    /**
     * hour of day that the day view should start at (1=1 AM, 8=8 AM, etc)
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=439)
    public void unsetPrefCalendarDayHourStart() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarDayHourStart, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * hour of day that the day view should start at (1=1 AM, 8=8 AM, etc)
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=439)
    public Map<String,Object> unsetPrefCalendarDayHourStart(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarDayHourStart, "");
        return attrs;
    }

    /**
     * default appointment duration. Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * <p>Use getPrefCalendarDefaultApptDurationAsString to access value as a string.
     *
     * @see #getPrefCalendarDefaultApptDurationAsString()
     *
     * @return zmailPrefCalendarDefaultApptDuration in millseconds, or 3600000 (60m)  if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1187)
    public long getPrefCalendarDefaultApptDuration() {
        return getTimeInterval(Provisioning.A_zmailPrefCalendarDefaultApptDuration, 3600000L);
    }

    /**
     * default appointment duration. Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @return zmailPrefCalendarDefaultApptDuration, or "60m" if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1187)
    public String getPrefCalendarDefaultApptDurationAsString() {
        return getAttr(Provisioning.A_zmailPrefCalendarDefaultApptDuration, "60m");
    }

    /**
     * default appointment duration. Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param zmailPrefCalendarDefaultApptDuration new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1187)
    public void setPrefCalendarDefaultApptDuration(String zmailPrefCalendarDefaultApptDuration) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarDefaultApptDuration, zmailPrefCalendarDefaultApptDuration);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * default appointment duration. Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param zmailPrefCalendarDefaultApptDuration new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1187)
    public Map<String,Object> setPrefCalendarDefaultApptDuration(String zmailPrefCalendarDefaultApptDuration, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarDefaultApptDuration, zmailPrefCalendarDefaultApptDuration);
        return attrs;
    }

    /**
     * default appointment duration. Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1187)
    public void unsetPrefCalendarDefaultApptDuration() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarDefaultApptDuration, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * default appointment duration. Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1187)
    public Map<String,Object> unsetPrefCalendarDefaultApptDuration(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarDefaultApptDuration, "");
        return attrs;
    }

    /**
     * first day of week to show in calendar (0=sunday, 6=saturday)
     *
     * @return zmailPrefCalendarFirstDayOfWeek, or 0 if unset
     */
    @ZAttr(id=261)
    public int getPrefCalendarFirstDayOfWeek() {
        return getIntAttr(Provisioning.A_zmailPrefCalendarFirstDayOfWeek, 0);
    }

    /**
     * first day of week to show in calendar (0=sunday, 6=saturday)
     *
     * @param zmailPrefCalendarFirstDayOfWeek new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=261)
    public void setPrefCalendarFirstDayOfWeek(int zmailPrefCalendarFirstDayOfWeek) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarFirstDayOfWeek, Integer.toString(zmailPrefCalendarFirstDayOfWeek));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * first day of week to show in calendar (0=sunday, 6=saturday)
     *
     * @param zmailPrefCalendarFirstDayOfWeek new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=261)
    public Map<String,Object> setPrefCalendarFirstDayOfWeek(int zmailPrefCalendarFirstDayOfWeek, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarFirstDayOfWeek, Integer.toString(zmailPrefCalendarFirstDayOfWeek));
        return attrs;
    }

    /**
     * first day of week to show in calendar (0=sunday, 6=saturday)
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=261)
    public void unsetPrefCalendarFirstDayOfWeek() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarFirstDayOfWeek, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * first day of week to show in calendar (0=sunday, 6=saturday)
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=261)
    public Map<String,Object> unsetPrefCalendarFirstDayOfWeek(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarFirstDayOfWeek, "");
        return attrs;
    }

    /**
     * initial calendar view to use
     *
     * <p>Valid values: [month, workWeek, list, day, week]
     *
     * @return zmailPrefCalendarInitialView, or ZAttrProvisioning.PrefCalendarInitialView.workWeek if unset and/or has invalid value
     */
    @ZAttr(id=240)
    public ZAttrProvisioning.PrefCalendarInitialView getPrefCalendarInitialView() {
        try { String v = getAttr(Provisioning.A_zmailPrefCalendarInitialView); return v == null ? ZAttrProvisioning.PrefCalendarInitialView.workWeek : ZAttrProvisioning.PrefCalendarInitialView.fromString(v); } catch(org.zmail.common.service.ServiceException e) { return ZAttrProvisioning.PrefCalendarInitialView.workWeek; }
    }

    /**
     * initial calendar view to use
     *
     * <p>Valid values: [month, workWeek, list, day, week]
     *
     * @return zmailPrefCalendarInitialView, or "workWeek" if unset
     */
    @ZAttr(id=240)
    public String getPrefCalendarInitialViewAsString() {
        return getAttr(Provisioning.A_zmailPrefCalendarInitialView, "workWeek");
    }

    /**
     * initial calendar view to use
     *
     * <p>Valid values: [month, workWeek, list, day, week]
     *
     * @param zmailPrefCalendarInitialView new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=240)
    public void setPrefCalendarInitialView(ZAttrProvisioning.PrefCalendarInitialView zmailPrefCalendarInitialView) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarInitialView, zmailPrefCalendarInitialView.toString());
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * initial calendar view to use
     *
     * <p>Valid values: [month, workWeek, list, day, week]
     *
     * @param zmailPrefCalendarInitialView new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=240)
    public Map<String,Object> setPrefCalendarInitialView(ZAttrProvisioning.PrefCalendarInitialView zmailPrefCalendarInitialView, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarInitialView, zmailPrefCalendarInitialView.toString());
        return attrs;
    }

    /**
     * initial calendar view to use
     *
     * <p>Valid values: [month, workWeek, list, day, week]
     *
     * @param zmailPrefCalendarInitialView new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=240)
    public void setPrefCalendarInitialViewAsString(String zmailPrefCalendarInitialView) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarInitialView, zmailPrefCalendarInitialView);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * initial calendar view to use
     *
     * <p>Valid values: [month, workWeek, list, day, week]
     *
     * @param zmailPrefCalendarInitialView new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=240)
    public Map<String,Object> setPrefCalendarInitialViewAsString(String zmailPrefCalendarInitialView, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarInitialView, zmailPrefCalendarInitialView);
        return attrs;
    }

    /**
     * initial calendar view to use
     *
     * <p>Valid values: [month, workWeek, list, day, week]
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=240)
    public void unsetPrefCalendarInitialView() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarInitialView, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * initial calendar view to use
     *
     * <p>Valid values: [month, workWeek, list, day, week]
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=240)
    public Map<String,Object> unsetPrefCalendarInitialView(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarInitialView, "");
        return attrs;
    }

    /**
     * If set to true, user is notified by email of changes made to her
     * calendar by others via delegated calendar access.
     *
     * @return zmailPrefCalendarNotifyDelegatedChanges, or false if unset
     */
    @ZAttr(id=273)
    public boolean isPrefCalendarNotifyDelegatedChanges() {
        return getBooleanAttr(Provisioning.A_zmailPrefCalendarNotifyDelegatedChanges, false);
    }

    /**
     * If set to true, user is notified by email of changes made to her
     * calendar by others via delegated calendar access.
     *
     * @param zmailPrefCalendarNotifyDelegatedChanges new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=273)
    public void setPrefCalendarNotifyDelegatedChanges(boolean zmailPrefCalendarNotifyDelegatedChanges) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarNotifyDelegatedChanges, zmailPrefCalendarNotifyDelegatedChanges ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * If set to true, user is notified by email of changes made to her
     * calendar by others via delegated calendar access.
     *
     * @param zmailPrefCalendarNotifyDelegatedChanges new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=273)
    public Map<String,Object> setPrefCalendarNotifyDelegatedChanges(boolean zmailPrefCalendarNotifyDelegatedChanges, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarNotifyDelegatedChanges, zmailPrefCalendarNotifyDelegatedChanges ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * If set to true, user is notified by email of changes made to her
     * calendar by others via delegated calendar access.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=273)
    public void unsetPrefCalendarNotifyDelegatedChanges() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarNotifyDelegatedChanges, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * If set to true, user is notified by email of changes made to her
     * calendar by others via delegated calendar access.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=273)
    public Map<String,Object> unsetPrefCalendarNotifyDelegatedChanges(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarNotifyDelegatedChanges, "");
        return attrs;
    }

    /**
     * Deprecated since: 6.0.0_BETA1. was added for Yahoo calendar, no longer
     * used. Orig desc: When to send the first reminder for an event.
     *
     * @return zmailPrefCalendarReminderDuration1, or "-PT15M" if unset
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=573)
    public String getPrefCalendarReminderDuration1() {
        return getAttr(Provisioning.A_zmailPrefCalendarReminderDuration1, "-PT15M");
    }

    /**
     * Deprecated since: 6.0.0_BETA1. was added for Yahoo calendar, no longer
     * used. Orig desc: When to send the first reminder for an event.
     *
     * @param zmailPrefCalendarReminderDuration1 new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=573)
    public void setPrefCalendarReminderDuration1(String zmailPrefCalendarReminderDuration1) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarReminderDuration1, zmailPrefCalendarReminderDuration1);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Deprecated since: 6.0.0_BETA1. was added for Yahoo calendar, no longer
     * used. Orig desc: When to send the first reminder for an event.
     *
     * @param zmailPrefCalendarReminderDuration1 new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=573)
    public Map<String,Object> setPrefCalendarReminderDuration1(String zmailPrefCalendarReminderDuration1, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarReminderDuration1, zmailPrefCalendarReminderDuration1);
        return attrs;
    }

    /**
     * Deprecated since: 6.0.0_BETA1. was added for Yahoo calendar, no longer
     * used. Orig desc: When to send the first reminder for an event.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=573)
    public void unsetPrefCalendarReminderDuration1() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarReminderDuration1, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Deprecated since: 6.0.0_BETA1. was added for Yahoo calendar, no longer
     * used. Orig desc: When to send the first reminder for an event.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=573)
    public Map<String,Object> unsetPrefCalendarReminderDuration1(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarReminderDuration1, "");
        return attrs;
    }

    /**
     * Deprecated since: 6.0.0_BETA1. was added for Yahoo calendar, no longer
     * used. Orig desc: When to send the second reminder for an event.
     *
     * @return zmailPrefCalendarReminderDuration2, or null if unset
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=574)
    public String getPrefCalendarReminderDuration2() {
        return getAttr(Provisioning.A_zmailPrefCalendarReminderDuration2, null);
    }

    /**
     * Deprecated since: 6.0.0_BETA1. was added for Yahoo calendar, no longer
     * used. Orig desc: When to send the second reminder for an event.
     *
     * @param zmailPrefCalendarReminderDuration2 new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=574)
    public void setPrefCalendarReminderDuration2(String zmailPrefCalendarReminderDuration2) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarReminderDuration2, zmailPrefCalendarReminderDuration2);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Deprecated since: 6.0.0_BETA1. was added for Yahoo calendar, no longer
     * used. Orig desc: When to send the second reminder for an event.
     *
     * @param zmailPrefCalendarReminderDuration2 new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=574)
    public Map<String,Object> setPrefCalendarReminderDuration2(String zmailPrefCalendarReminderDuration2, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarReminderDuration2, zmailPrefCalendarReminderDuration2);
        return attrs;
    }

    /**
     * Deprecated since: 6.0.0_BETA1. was added for Yahoo calendar, no longer
     * used. Orig desc: When to send the second reminder for an event.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=574)
    public void unsetPrefCalendarReminderDuration2() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarReminderDuration2, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Deprecated since: 6.0.0_BETA1. was added for Yahoo calendar, no longer
     * used. Orig desc: When to send the second reminder for an event.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=574)
    public Map<String,Object> unsetPrefCalendarReminderDuration2(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarReminderDuration2, "");
        return attrs;
    }

    /**
     * Flash title when on appointment reminder notification
     *
     * @return zmailPrefCalendarReminderFlashTitle, or true if unset
     *
     * @since ZCS 5.0.7
     */
    @ZAttr(id=682)
    public boolean isPrefCalendarReminderFlashTitle() {
        return getBooleanAttr(Provisioning.A_zmailPrefCalendarReminderFlashTitle, true);
    }

    /**
     * Flash title when on appointment reminder notification
     *
     * @param zmailPrefCalendarReminderFlashTitle new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.7
     */
    @ZAttr(id=682)
    public void setPrefCalendarReminderFlashTitle(boolean zmailPrefCalendarReminderFlashTitle) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarReminderFlashTitle, zmailPrefCalendarReminderFlashTitle ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Flash title when on appointment reminder notification
     *
     * @param zmailPrefCalendarReminderFlashTitle new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.7
     */
    @ZAttr(id=682)
    public Map<String,Object> setPrefCalendarReminderFlashTitle(boolean zmailPrefCalendarReminderFlashTitle, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarReminderFlashTitle, zmailPrefCalendarReminderFlashTitle ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * Flash title when on appointment reminder notification
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.7
     */
    @ZAttr(id=682)
    public void unsetPrefCalendarReminderFlashTitle() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarReminderFlashTitle, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Flash title when on appointment reminder notification
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.7
     */
    @ZAttr(id=682)
    public Map<String,Object> unsetPrefCalendarReminderFlashTitle(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarReminderFlashTitle, "");
        return attrs;
    }

    /**
     * Deprecated since: 6.0.0_BETA1. was added for Yahoo calendar, no longer
     * used. Orig desc: The mobile device (phone) the reminder goes to.
     *
     * @return zmailPrefCalendarReminderMobile, or false if unset
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=577)
    public boolean isPrefCalendarReminderMobile() {
        return getBooleanAttr(Provisioning.A_zmailPrefCalendarReminderMobile, false);
    }

    /**
     * Deprecated since: 6.0.0_BETA1. was added for Yahoo calendar, no longer
     * used. Orig desc: The mobile device (phone) the reminder goes to.
     *
     * @param zmailPrefCalendarReminderMobile new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=577)
    public void setPrefCalendarReminderMobile(boolean zmailPrefCalendarReminderMobile) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarReminderMobile, zmailPrefCalendarReminderMobile ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Deprecated since: 6.0.0_BETA1. was added for Yahoo calendar, no longer
     * used. Orig desc: The mobile device (phone) the reminder goes to.
     *
     * @param zmailPrefCalendarReminderMobile new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=577)
    public Map<String,Object> setPrefCalendarReminderMobile(boolean zmailPrefCalendarReminderMobile, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarReminderMobile, zmailPrefCalendarReminderMobile ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * Deprecated since: 6.0.0_BETA1. was added for Yahoo calendar, no longer
     * used. Orig desc: The mobile device (phone) the reminder goes to.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=577)
    public void unsetPrefCalendarReminderMobile() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarReminderMobile, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Deprecated since: 6.0.0_BETA1. was added for Yahoo calendar, no longer
     * used. Orig desc: The mobile device (phone) the reminder goes to.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=577)
    public Map<String,Object> unsetPrefCalendarReminderMobile(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarReminderMobile, "");
        return attrs;
    }

    /**
     * Deprecated since: 6.0.0_BETA1. was added for Yahoo calendar, no longer
     * used. Orig desc: whether or not email reminders for appointments and
     * tasks are enabled
     *
     * @return zmailPrefCalendarReminderSendEmail, or false if unset
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=576)
    public boolean isPrefCalendarReminderSendEmail() {
        return getBooleanAttr(Provisioning.A_zmailPrefCalendarReminderSendEmail, false);
    }

    /**
     * Deprecated since: 6.0.0_BETA1. was added for Yahoo calendar, no longer
     * used. Orig desc: whether or not email reminders for appointments and
     * tasks are enabled
     *
     * @param zmailPrefCalendarReminderSendEmail new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=576)
    public void setPrefCalendarReminderSendEmail(boolean zmailPrefCalendarReminderSendEmail) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarReminderSendEmail, zmailPrefCalendarReminderSendEmail ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Deprecated since: 6.0.0_BETA1. was added for Yahoo calendar, no longer
     * used. Orig desc: whether or not email reminders for appointments and
     * tasks are enabled
     *
     * @param zmailPrefCalendarReminderSendEmail new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=576)
    public Map<String,Object> setPrefCalendarReminderSendEmail(boolean zmailPrefCalendarReminderSendEmail, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarReminderSendEmail, zmailPrefCalendarReminderSendEmail ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * Deprecated since: 6.0.0_BETA1. was added for Yahoo calendar, no longer
     * used. Orig desc: whether or not email reminders for appointments and
     * tasks are enabled
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=576)
    public void unsetPrefCalendarReminderSendEmail() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarReminderSendEmail, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Deprecated since: 6.0.0_BETA1. was added for Yahoo calendar, no longer
     * used. Orig desc: whether or not email reminders for appointments and
     * tasks are enabled
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=576)
    public Map<String,Object> unsetPrefCalendarReminderSendEmail(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarReminderSendEmail, "");
        return attrs;
    }

    /**
     * whether audible alert is enabled when appointment notification is
     * played
     *
     * @return zmailPrefCalendarReminderSoundsEnabled, or true if unset
     *
     * @since ZCS 5.0.7
     */
    @ZAttr(id=667)
    public boolean isPrefCalendarReminderSoundsEnabled() {
        return getBooleanAttr(Provisioning.A_zmailPrefCalendarReminderSoundsEnabled, true);
    }

    /**
     * whether audible alert is enabled when appointment notification is
     * played
     *
     * @param zmailPrefCalendarReminderSoundsEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.7
     */
    @ZAttr(id=667)
    public void setPrefCalendarReminderSoundsEnabled(boolean zmailPrefCalendarReminderSoundsEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarReminderSoundsEnabled, zmailPrefCalendarReminderSoundsEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether audible alert is enabled when appointment notification is
     * played
     *
     * @param zmailPrefCalendarReminderSoundsEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.7
     */
    @ZAttr(id=667)
    public Map<String,Object> setPrefCalendarReminderSoundsEnabled(boolean zmailPrefCalendarReminderSoundsEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarReminderSoundsEnabled, zmailPrefCalendarReminderSoundsEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether audible alert is enabled when appointment notification is
     * played
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.7
     */
    @ZAttr(id=667)
    public void unsetPrefCalendarReminderSoundsEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarReminderSoundsEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether audible alert is enabled when appointment notification is
     * played
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.7
     */
    @ZAttr(id=667)
    public Map<String,Object> unsetPrefCalendarReminderSoundsEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarReminderSoundsEnabled, "");
        return attrs;
    }

    /**
     * Deprecated since: 6.0.0_BETA1. was added for Yahoo calendar, no longer
     * used. Orig desc: Send a reminder via YIM
     *
     * @return zmailPrefCalendarReminderYMessenger, or false if unset
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=578)
    public boolean isPrefCalendarReminderYMessenger() {
        return getBooleanAttr(Provisioning.A_zmailPrefCalendarReminderYMessenger, false);
    }

    /**
     * Deprecated since: 6.0.0_BETA1. was added for Yahoo calendar, no longer
     * used. Orig desc: Send a reminder via YIM
     *
     * @param zmailPrefCalendarReminderYMessenger new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=578)
    public void setPrefCalendarReminderYMessenger(boolean zmailPrefCalendarReminderYMessenger) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarReminderYMessenger, zmailPrefCalendarReminderYMessenger ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Deprecated since: 6.0.0_BETA1. was added for Yahoo calendar, no longer
     * used. Orig desc: Send a reminder via YIM
     *
     * @param zmailPrefCalendarReminderYMessenger new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=578)
    public Map<String,Object> setPrefCalendarReminderYMessenger(boolean zmailPrefCalendarReminderYMessenger, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarReminderYMessenger, zmailPrefCalendarReminderYMessenger ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * Deprecated since: 6.0.0_BETA1. was added for Yahoo calendar, no longer
     * used. Orig desc: Send a reminder via YIM
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=578)
    public void unsetPrefCalendarReminderYMessenger() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarReminderYMessenger, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Deprecated since: 6.0.0_BETA1. was added for Yahoo calendar, no longer
     * used. Orig desc: Send a reminder via YIM
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=578)
    public Map<String,Object> unsetPrefCalendarReminderYMessenger(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarReminderYMessenger, "");
        return attrs;
    }

    /**
     * if an invite is received from an organizer who does not have
     * permission to invite this user to a meeting, send an auto-decline
     * reply
     *
     * @return zmailPrefCalendarSendInviteDeniedAutoReply, or false if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=849)
    public boolean isPrefCalendarSendInviteDeniedAutoReply() {
        return getBooleanAttr(Provisioning.A_zmailPrefCalendarSendInviteDeniedAutoReply, false);
    }

    /**
     * if an invite is received from an organizer who does not have
     * permission to invite this user to a meeting, send an auto-decline
     * reply
     *
     * @param zmailPrefCalendarSendInviteDeniedAutoReply new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=849)
    public void setPrefCalendarSendInviteDeniedAutoReply(boolean zmailPrefCalendarSendInviteDeniedAutoReply) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarSendInviteDeniedAutoReply, zmailPrefCalendarSendInviteDeniedAutoReply ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * if an invite is received from an organizer who does not have
     * permission to invite this user to a meeting, send an auto-decline
     * reply
     *
     * @param zmailPrefCalendarSendInviteDeniedAutoReply new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=849)
    public Map<String,Object> setPrefCalendarSendInviteDeniedAutoReply(boolean zmailPrefCalendarSendInviteDeniedAutoReply, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarSendInviteDeniedAutoReply, zmailPrefCalendarSendInviteDeniedAutoReply ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * if an invite is received from an organizer who does not have
     * permission to invite this user to a meeting, send an auto-decline
     * reply
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=849)
    public void unsetPrefCalendarSendInviteDeniedAutoReply() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarSendInviteDeniedAutoReply, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * if an invite is received from an organizer who does not have
     * permission to invite this user to a meeting, send an auto-decline
     * reply
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=849)
    public Map<String,Object> unsetPrefCalendarSendInviteDeniedAutoReply(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarSendInviteDeniedAutoReply, "");
        return attrs;
    }

    /**
     * whether to show declined meetings in calendar
     *
     * @return zmailPrefCalendarShowDeclinedMeetings, or true if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1196)
    public boolean isPrefCalendarShowDeclinedMeetings() {
        return getBooleanAttr(Provisioning.A_zmailPrefCalendarShowDeclinedMeetings, true);
    }

    /**
     * whether to show declined meetings in calendar
     *
     * @param zmailPrefCalendarShowDeclinedMeetings new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1196)
    public void setPrefCalendarShowDeclinedMeetings(boolean zmailPrefCalendarShowDeclinedMeetings) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarShowDeclinedMeetings, zmailPrefCalendarShowDeclinedMeetings ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to show declined meetings in calendar
     *
     * @param zmailPrefCalendarShowDeclinedMeetings new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1196)
    public Map<String,Object> setPrefCalendarShowDeclinedMeetings(boolean zmailPrefCalendarShowDeclinedMeetings, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarShowDeclinedMeetings, zmailPrefCalendarShowDeclinedMeetings ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether to show declined meetings in calendar
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1196)
    public void unsetPrefCalendarShowDeclinedMeetings() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarShowDeclinedMeetings, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to show declined meetings in calendar
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1196)
    public Map<String,Object> unsetPrefCalendarShowDeclinedMeetings(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarShowDeclinedMeetings, "");
        return attrs;
    }

    /**
     * whether to pop-up reminder for past due appointments in the UI
     *
     * @return zmailPrefCalendarShowPastDueReminders, or true if unset
     *
     * @since ZCS 6.0.0_BETA2
     */
    @ZAttr(id=1022)
    public boolean isPrefCalendarShowPastDueReminders() {
        return getBooleanAttr(Provisioning.A_zmailPrefCalendarShowPastDueReminders, true);
    }

    /**
     * whether to pop-up reminder for past due appointments in the UI
     *
     * @param zmailPrefCalendarShowPastDueReminders new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA2
     */
    @ZAttr(id=1022)
    public void setPrefCalendarShowPastDueReminders(boolean zmailPrefCalendarShowPastDueReminders) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarShowPastDueReminders, zmailPrefCalendarShowPastDueReminders ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to pop-up reminder for past due appointments in the UI
     *
     * @param zmailPrefCalendarShowPastDueReminders new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA2
     */
    @ZAttr(id=1022)
    public Map<String,Object> setPrefCalendarShowPastDueReminders(boolean zmailPrefCalendarShowPastDueReminders, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarShowPastDueReminders, zmailPrefCalendarShowPastDueReminders ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether to pop-up reminder for past due appointments in the UI
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA2
     */
    @ZAttr(id=1022)
    public void unsetPrefCalendarShowPastDueReminders() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarShowPastDueReminders, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to pop-up reminder for past due appointments in the UI
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA2
     */
    @ZAttr(id=1022)
    public Map<String,Object> unsetPrefCalendarShowPastDueReminders(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarShowPastDueReminders, "");
        return attrs;
    }

    /**
     * whether to enable toaster notification for new mail
     *
     * @return zmailPrefCalendarToasterEnabled, or false if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=813)
    public boolean isPrefCalendarToasterEnabled() {
        return getBooleanAttr(Provisioning.A_zmailPrefCalendarToasterEnabled, false);
    }

    /**
     * whether to enable toaster notification for new mail
     *
     * @param zmailPrefCalendarToasterEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=813)
    public void setPrefCalendarToasterEnabled(boolean zmailPrefCalendarToasterEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarToasterEnabled, zmailPrefCalendarToasterEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to enable toaster notification for new mail
     *
     * @param zmailPrefCalendarToasterEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=813)
    public Map<String,Object> setPrefCalendarToasterEnabled(boolean zmailPrefCalendarToasterEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarToasterEnabled, zmailPrefCalendarToasterEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether to enable toaster notification for new mail
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=813)
    public void unsetPrefCalendarToasterEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarToasterEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to enable toaster notification for new mail
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=813)
    public Map<String,Object> unsetPrefCalendarToasterEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarToasterEnabled, "");
        return attrs;
    }

    /**
     * whether or not use quick add dialog or go into full appt edit view
     *
     * @return zmailPrefCalendarUseQuickAdd, or true if unset
     */
    @ZAttr(id=274)
    public boolean isPrefCalendarUseQuickAdd() {
        return getBooleanAttr(Provisioning.A_zmailPrefCalendarUseQuickAdd, true);
    }

    /**
     * whether or not use quick add dialog or go into full appt edit view
     *
     * @param zmailPrefCalendarUseQuickAdd new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=274)
    public void setPrefCalendarUseQuickAdd(boolean zmailPrefCalendarUseQuickAdd) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarUseQuickAdd, zmailPrefCalendarUseQuickAdd ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether or not use quick add dialog or go into full appt edit view
     *
     * @param zmailPrefCalendarUseQuickAdd new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=274)
    public Map<String,Object> setPrefCalendarUseQuickAdd(boolean zmailPrefCalendarUseQuickAdd, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarUseQuickAdd, zmailPrefCalendarUseQuickAdd ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether or not use quick add dialog or go into full appt edit view
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=274)
    public void unsetPrefCalendarUseQuickAdd() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarUseQuickAdd, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether or not use quick add dialog or go into full appt edit view
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=274)
    public Map<String,Object> unsetPrefCalendarUseQuickAdd(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarUseQuickAdd, "");
        return attrs;
    }

    /**
     * time interval to display on calendar views. Must be in valid duration
     * format: {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h -
     * hours, m - minutes, s - seconds, d - days, ms - milliseconds. If time
     * unit is not specified, the default is s(seconds).
     *
     * <p>Use getPrefCalendarViewTimeIntervalAsString to access value as a string.
     *
     * @see #getPrefCalendarViewTimeIntervalAsString()
     *
     * @return zmailPrefCalendarViewTimeInterval in millseconds, or 3600000 (1h)  if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1195)
    public long getPrefCalendarViewTimeInterval() {
        return getTimeInterval(Provisioning.A_zmailPrefCalendarViewTimeInterval, 3600000L);
    }

    /**
     * time interval to display on calendar views. Must be in valid duration
     * format: {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h -
     * hours, m - minutes, s - seconds, d - days, ms - milliseconds. If time
     * unit is not specified, the default is s(seconds).
     *
     * @return zmailPrefCalendarViewTimeInterval, or "1h" if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1195)
    public String getPrefCalendarViewTimeIntervalAsString() {
        return getAttr(Provisioning.A_zmailPrefCalendarViewTimeInterval, "1h");
    }

    /**
     * time interval to display on calendar views. Must be in valid duration
     * format: {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h -
     * hours, m - minutes, s - seconds, d - days, ms - milliseconds. If time
     * unit is not specified, the default is s(seconds).
     *
     * @param zmailPrefCalendarViewTimeInterval new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1195)
    public void setPrefCalendarViewTimeInterval(String zmailPrefCalendarViewTimeInterval) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarViewTimeInterval, zmailPrefCalendarViewTimeInterval);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * time interval to display on calendar views. Must be in valid duration
     * format: {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h -
     * hours, m - minutes, s - seconds, d - days, ms - milliseconds. If time
     * unit is not specified, the default is s(seconds).
     *
     * @param zmailPrefCalendarViewTimeInterval new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1195)
    public Map<String,Object> setPrefCalendarViewTimeInterval(String zmailPrefCalendarViewTimeInterval, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarViewTimeInterval, zmailPrefCalendarViewTimeInterval);
        return attrs;
    }

    /**
     * time interval to display on calendar views. Must be in valid duration
     * format: {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h -
     * hours, m - minutes, s - seconds, d - days, ms - milliseconds. If time
     * unit is not specified, the default is s(seconds).
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1195)
    public void unsetPrefCalendarViewTimeInterval() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarViewTimeInterval, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * time interval to display on calendar views. Must be in valid duration
     * format: {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h -
     * hours, m - minutes, s - seconds, d - days, ms - milliseconds. If time
     * unit is not specified, the default is s(seconds).
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1195)
    public Map<String,Object> unsetPrefCalendarViewTimeInterval(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarViewTimeInterval, "");
        return attrs;
    }

    /**
     * working hours for each day of the week
     *
     * @return zmailPrefCalendarWorkingHours, or "1:N:0800:1700,2:Y:0800:1700,3:Y:0800:1700,4:Y:0800:1700,5:Y:0800:1700,6:Y:0800:1700,7:N:0800:1700" if unset
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1103)
    public String getPrefCalendarWorkingHours() {
        return getAttr(Provisioning.A_zmailPrefCalendarWorkingHours, "1:N:0800:1700,2:Y:0800:1700,3:Y:0800:1700,4:Y:0800:1700,5:Y:0800:1700,6:Y:0800:1700,7:N:0800:1700");
    }

    /**
     * working hours for each day of the week
     *
     * @param zmailPrefCalendarWorkingHours new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1103)
    public void setPrefCalendarWorkingHours(String zmailPrefCalendarWorkingHours) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarWorkingHours, zmailPrefCalendarWorkingHours);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * working hours for each day of the week
     *
     * @param zmailPrefCalendarWorkingHours new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1103)
    public Map<String,Object> setPrefCalendarWorkingHours(String zmailPrefCalendarWorkingHours, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarWorkingHours, zmailPrefCalendarWorkingHours);
        return attrs;
    }

    /**
     * working hours for each day of the week
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1103)
    public void unsetPrefCalendarWorkingHours() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarWorkingHours, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * working hours for each day of the week
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1103)
    public Map<String,Object> unsetPrefCalendarWorkingHours(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefCalendarWorkingHours, "");
        return attrs;
    }

    /**
     * user preference of client type
     *
     * <p>Valid values: [standard, advanced]
     *
     * @return zmailPrefClientType, or ZAttrProvisioning.PrefClientType.advanced if unset and/or has invalid value
     */
    @ZAttr(id=453)
    public ZAttrProvisioning.PrefClientType getPrefClientType() {
        try { String v = getAttr(Provisioning.A_zmailPrefClientType); return v == null ? ZAttrProvisioning.PrefClientType.advanced : ZAttrProvisioning.PrefClientType.fromString(v); } catch(org.zmail.common.service.ServiceException e) { return ZAttrProvisioning.PrefClientType.advanced; }
    }

    /**
     * user preference of client type
     *
     * <p>Valid values: [standard, advanced]
     *
     * @return zmailPrefClientType, or "advanced" if unset
     */
    @ZAttr(id=453)
    public String getPrefClientTypeAsString() {
        return getAttr(Provisioning.A_zmailPrefClientType, "advanced");
    }

    /**
     * user preference of client type
     *
     * <p>Valid values: [standard, advanced]
     *
     * @param zmailPrefClientType new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=453)
    public void setPrefClientType(ZAttrProvisioning.PrefClientType zmailPrefClientType) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefClientType, zmailPrefClientType.toString());
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * user preference of client type
     *
     * <p>Valid values: [standard, advanced]
     *
     * @param zmailPrefClientType new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=453)
    public Map<String,Object> setPrefClientType(ZAttrProvisioning.PrefClientType zmailPrefClientType, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefClientType, zmailPrefClientType.toString());
        return attrs;
    }

    /**
     * user preference of client type
     *
     * <p>Valid values: [standard, advanced]
     *
     * @param zmailPrefClientType new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=453)
    public void setPrefClientTypeAsString(String zmailPrefClientType) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefClientType, zmailPrefClientType);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * user preference of client type
     *
     * <p>Valid values: [standard, advanced]
     *
     * @param zmailPrefClientType new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=453)
    public Map<String,Object> setPrefClientTypeAsString(String zmailPrefClientType, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefClientType, zmailPrefClientType);
        return attrs;
    }

    /**
     * user preference of client type
     *
     * <p>Valid values: [standard, advanced]
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=453)
    public void unsetPrefClientType() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefClientType, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * user preference of client type
     *
     * <p>Valid values: [standard, advanced]
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=453)
    public Map<String,Object> unsetPrefClientType(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefClientType, "");
        return attrs;
    }

    /**
     * whether or not to use tag color as the color for message items
     *
     * @return zmailPrefColorMessagesEnabled, or false if unset
     *
     * @since ZCS 8.0.3
     */
    @ZAttr(id=1424)
    public boolean isPrefColorMessagesEnabled() {
        return getBooleanAttr(Provisioning.A_zmailPrefColorMessagesEnabled, false);
    }

    /**
     * whether or not to use tag color as the color for message items
     *
     * @param zmailPrefColorMessagesEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.3
     */
    @ZAttr(id=1424)
    public void setPrefColorMessagesEnabled(boolean zmailPrefColorMessagesEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefColorMessagesEnabled, zmailPrefColorMessagesEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether or not to use tag color as the color for message items
     *
     * @param zmailPrefColorMessagesEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.3
     */
    @ZAttr(id=1424)
    public Map<String,Object> setPrefColorMessagesEnabled(boolean zmailPrefColorMessagesEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefColorMessagesEnabled, zmailPrefColorMessagesEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether or not to use tag color as the color for message items
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.3
     */
    @ZAttr(id=1424)
    public void unsetPrefColorMessagesEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefColorMessagesEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether or not to use tag color as the color for message items
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.3
     */
    @ZAttr(id=1424)
    public Map<String,Object> unsetPrefColorMessagesEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefColorMessagesEnabled, "");
        return attrs;
    }

    /**
     * direction for composing messages in the web client UI
     *
     * <p>Valid values: [RTL, LTR]
     *
     * @return zmailPrefComposeDirection, or null if unset and/or has invalid value
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1273)
    public ZAttrProvisioning.PrefComposeDirection getPrefComposeDirection() {
        try { String v = getAttr(Provisioning.A_zmailPrefComposeDirection); return v == null ? null : ZAttrProvisioning.PrefComposeDirection.fromString(v); } catch(org.zmail.common.service.ServiceException e) { return null; }
    }

    /**
     * direction for composing messages in the web client UI
     *
     * <p>Valid values: [RTL, LTR]
     *
     * @return zmailPrefComposeDirection, or null if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1273)
    public String getPrefComposeDirectionAsString() {
        return getAttr(Provisioning.A_zmailPrefComposeDirection, null);
    }

    /**
     * direction for composing messages in the web client UI
     *
     * <p>Valid values: [RTL, LTR]
     *
     * @param zmailPrefComposeDirection new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1273)
    public void setPrefComposeDirection(ZAttrProvisioning.PrefComposeDirection zmailPrefComposeDirection) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefComposeDirection, zmailPrefComposeDirection.toString());
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * direction for composing messages in the web client UI
     *
     * <p>Valid values: [RTL, LTR]
     *
     * @param zmailPrefComposeDirection new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1273)
    public Map<String,Object> setPrefComposeDirection(ZAttrProvisioning.PrefComposeDirection zmailPrefComposeDirection, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefComposeDirection, zmailPrefComposeDirection.toString());
        return attrs;
    }

    /**
     * direction for composing messages in the web client UI
     *
     * <p>Valid values: [RTL, LTR]
     *
     * @param zmailPrefComposeDirection new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1273)
    public void setPrefComposeDirectionAsString(String zmailPrefComposeDirection) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefComposeDirection, zmailPrefComposeDirection);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * direction for composing messages in the web client UI
     *
     * <p>Valid values: [RTL, LTR]
     *
     * @param zmailPrefComposeDirection new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1273)
    public Map<String,Object> setPrefComposeDirectionAsString(String zmailPrefComposeDirection, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefComposeDirection, zmailPrefComposeDirection);
        return attrs;
    }

    /**
     * direction for composing messages in the web client UI
     *
     * <p>Valid values: [RTL, LTR]
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1273)
    public void unsetPrefComposeDirection() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefComposeDirection, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * direction for composing messages in the web client UI
     *
     * <p>Valid values: [RTL, LTR]
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1273)
    public Map<String,Object> unsetPrefComposeDirection(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefComposeDirection, "");
        return attrs;
    }

    /**
     * whether or not to compose in html or text.
     *
     * <p>Valid values: [text, html]
     *
     * @return zmailPrefComposeFormat, or ZAttrProvisioning.PrefComposeFormat.text if unset and/or has invalid value
     */
    @ZAttr(id=217)
    public ZAttrProvisioning.PrefComposeFormat getPrefComposeFormat() {
        try { String v = getAttr(Provisioning.A_zmailPrefComposeFormat); return v == null ? ZAttrProvisioning.PrefComposeFormat.text : ZAttrProvisioning.PrefComposeFormat.fromString(v); } catch(org.zmail.common.service.ServiceException e) { return ZAttrProvisioning.PrefComposeFormat.text; }
    }

    /**
     * whether or not to compose in html or text.
     *
     * <p>Valid values: [text, html]
     *
     * @return zmailPrefComposeFormat, or "text" if unset
     */
    @ZAttr(id=217)
    public String getPrefComposeFormatAsString() {
        return getAttr(Provisioning.A_zmailPrefComposeFormat, "text");
    }

    /**
     * whether or not to compose in html or text.
     *
     * <p>Valid values: [text, html]
     *
     * @param zmailPrefComposeFormat new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=217)
    public void setPrefComposeFormat(ZAttrProvisioning.PrefComposeFormat zmailPrefComposeFormat) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefComposeFormat, zmailPrefComposeFormat.toString());
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether or not to compose in html or text.
     *
     * <p>Valid values: [text, html]
     *
     * @param zmailPrefComposeFormat new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=217)
    public Map<String,Object> setPrefComposeFormat(ZAttrProvisioning.PrefComposeFormat zmailPrefComposeFormat, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefComposeFormat, zmailPrefComposeFormat.toString());
        return attrs;
    }

    /**
     * whether or not to compose in html or text.
     *
     * <p>Valid values: [text, html]
     *
     * @param zmailPrefComposeFormat new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=217)
    public void setPrefComposeFormatAsString(String zmailPrefComposeFormat) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefComposeFormat, zmailPrefComposeFormat);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether or not to compose in html or text.
     *
     * <p>Valid values: [text, html]
     *
     * @param zmailPrefComposeFormat new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=217)
    public Map<String,Object> setPrefComposeFormatAsString(String zmailPrefComposeFormat, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefComposeFormat, zmailPrefComposeFormat);
        return attrs;
    }

    /**
     * whether or not to compose in html or text.
     *
     * <p>Valid values: [text, html]
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=217)
    public void unsetPrefComposeFormat() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefComposeFormat, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether or not to compose in html or text.
     *
     * <p>Valid values: [text, html]
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=217)
    public Map<String,Object> unsetPrefComposeFormat(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefComposeFormat, "");
        return attrs;
    }

    /**
     * whether or not compose messages in a new windows by default
     *
     * @return zmailPrefComposeInNewWindow, or false if unset
     */
    @ZAttr(id=209)
    public boolean isPrefComposeInNewWindow() {
        return getBooleanAttr(Provisioning.A_zmailPrefComposeInNewWindow, false);
    }

    /**
     * whether or not compose messages in a new windows by default
     *
     * @param zmailPrefComposeInNewWindow new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=209)
    public void setPrefComposeInNewWindow(boolean zmailPrefComposeInNewWindow) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefComposeInNewWindow, zmailPrefComposeInNewWindow ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether or not compose messages in a new windows by default
     *
     * @param zmailPrefComposeInNewWindow new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=209)
    public Map<String,Object> setPrefComposeInNewWindow(boolean zmailPrefComposeInNewWindow, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefComposeInNewWindow, zmailPrefComposeInNewWindow ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether or not compose messages in a new windows by default
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=209)
    public void unsetPrefComposeInNewWindow() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefComposeInNewWindow, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether or not compose messages in a new windows by default
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=209)
    public Map<String,Object> unsetPrefComposeInNewWindow(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefComposeInNewWindow, "");
        return attrs;
    }

    /**
     * Deprecated since: 8.0.0. Since 8.0.0, the contact group can contain
     * member references, but member references are not searchable.. Orig
     * desc: Disables autocomplete matching against the members email
     * address.
     *
     * @return zmailPrefContactsDisableAutocompleteOnContactGroupMembers, or false if unset
     *
     * @since ZCS 6.0.7
     */
    @ZAttr(id=1090)
    public boolean isPrefContactsDisableAutocompleteOnContactGroupMembers() {
        return getBooleanAttr(Provisioning.A_zmailPrefContactsDisableAutocompleteOnContactGroupMembers, false);
    }

    /**
     * Deprecated since: 8.0.0. Since 8.0.0, the contact group can contain
     * member references, but member references are not searchable.. Orig
     * desc: Disables autocomplete matching against the members email
     * address.
     *
     * @param zmailPrefContactsDisableAutocompleteOnContactGroupMembers new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.7
     */
    @ZAttr(id=1090)
    public void setPrefContactsDisableAutocompleteOnContactGroupMembers(boolean zmailPrefContactsDisableAutocompleteOnContactGroupMembers) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefContactsDisableAutocompleteOnContactGroupMembers, zmailPrefContactsDisableAutocompleteOnContactGroupMembers ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Deprecated since: 8.0.0. Since 8.0.0, the contact group can contain
     * member references, but member references are not searchable.. Orig
     * desc: Disables autocomplete matching against the members email
     * address.
     *
     * @param zmailPrefContactsDisableAutocompleteOnContactGroupMembers new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.7
     */
    @ZAttr(id=1090)
    public Map<String,Object> setPrefContactsDisableAutocompleteOnContactGroupMembers(boolean zmailPrefContactsDisableAutocompleteOnContactGroupMembers, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefContactsDisableAutocompleteOnContactGroupMembers, zmailPrefContactsDisableAutocompleteOnContactGroupMembers ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * Deprecated since: 8.0.0. Since 8.0.0, the contact group can contain
     * member references, but member references are not searchable.. Orig
     * desc: Disables autocomplete matching against the members email
     * address.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.7
     */
    @ZAttr(id=1090)
    public void unsetPrefContactsDisableAutocompleteOnContactGroupMembers() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefContactsDisableAutocompleteOnContactGroupMembers, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Deprecated since: 8.0.0. Since 8.0.0, the contact group can contain
     * member references, but member references are not searchable.. Orig
     * desc: Disables autocomplete matching against the members email
     * address.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.7
     */
    @ZAttr(id=1090)
    public Map<String,Object> unsetPrefContactsDisableAutocompleteOnContactGroupMembers(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefContactsDisableAutocompleteOnContactGroupMembers, "");
        return attrs;
    }

    /**
     * Deprecated since: 8.0.0. deprecated now that Zmail supports keeping
     * member references in a contact group. Orig desc: Expand the contact
     * groups in Apple Address Book format to Zmail format over CardDAV.
     *
     * @return zmailPrefContactsExpandAppleContactGroups, or false if unset
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1102)
    public boolean isPrefContactsExpandAppleContactGroups() {
        return getBooleanAttr(Provisioning.A_zmailPrefContactsExpandAppleContactGroups, false);
    }

    /**
     * Deprecated since: 8.0.0. deprecated now that Zmail supports keeping
     * member references in a contact group. Orig desc: Expand the contact
     * groups in Apple Address Book format to Zmail format over CardDAV.
     *
     * @param zmailPrefContactsExpandAppleContactGroups new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1102)
    public void setPrefContactsExpandAppleContactGroups(boolean zmailPrefContactsExpandAppleContactGroups) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefContactsExpandAppleContactGroups, zmailPrefContactsExpandAppleContactGroups ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Deprecated since: 8.0.0. deprecated now that Zmail supports keeping
     * member references in a contact group. Orig desc: Expand the contact
     * groups in Apple Address Book format to Zmail format over CardDAV.
     *
     * @param zmailPrefContactsExpandAppleContactGroups new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1102)
    public Map<String,Object> setPrefContactsExpandAppleContactGroups(boolean zmailPrefContactsExpandAppleContactGroups, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefContactsExpandAppleContactGroups, zmailPrefContactsExpandAppleContactGroups ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * Deprecated since: 8.0.0. deprecated now that Zmail supports keeping
     * member references in a contact group. Orig desc: Expand the contact
     * groups in Apple Address Book format to Zmail format over CardDAV.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1102)
    public void unsetPrefContactsExpandAppleContactGroups() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefContactsExpandAppleContactGroups, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Deprecated since: 8.0.0. deprecated now that Zmail supports keeping
     * member references in a contact group. Orig desc: Expand the contact
     * groups in Apple Address Book format to Zmail format over CardDAV.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1102)
    public Map<String,Object> unsetPrefContactsExpandAppleContactGroups(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefContactsExpandAppleContactGroups, "");
        return attrs;
    }

    /**
     * Deprecated since: 6.0.5. We do not support cards view any more. See
     * bug 47439. Orig desc: initial contact view to use
     *
     * <p>Valid values: [cards, list]
     *
     * @return zmailPrefContactsInitialView, or ZAttrProvisioning.PrefContactsInitialView.list if unset and/or has invalid value
     */
    @ZAttr(id=167)
    public ZAttrProvisioning.PrefContactsInitialView getPrefContactsInitialView() {
        try { String v = getAttr(Provisioning.A_zmailPrefContactsInitialView); return v == null ? ZAttrProvisioning.PrefContactsInitialView.list : ZAttrProvisioning.PrefContactsInitialView.fromString(v); } catch(org.zmail.common.service.ServiceException e) { return ZAttrProvisioning.PrefContactsInitialView.list; }
    }

    /**
     * Deprecated since: 6.0.5. We do not support cards view any more. See
     * bug 47439. Orig desc: initial contact view to use
     *
     * <p>Valid values: [cards, list]
     *
     * @return zmailPrefContactsInitialView, or "list" if unset
     */
    @ZAttr(id=167)
    public String getPrefContactsInitialViewAsString() {
        return getAttr(Provisioning.A_zmailPrefContactsInitialView, "list");
    }

    /**
     * Deprecated since: 6.0.5. We do not support cards view any more. See
     * bug 47439. Orig desc: initial contact view to use
     *
     * <p>Valid values: [cards, list]
     *
     * @param zmailPrefContactsInitialView new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=167)
    public void setPrefContactsInitialView(ZAttrProvisioning.PrefContactsInitialView zmailPrefContactsInitialView) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefContactsInitialView, zmailPrefContactsInitialView.toString());
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Deprecated since: 6.0.5. We do not support cards view any more. See
     * bug 47439. Orig desc: initial contact view to use
     *
     * <p>Valid values: [cards, list]
     *
     * @param zmailPrefContactsInitialView new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=167)
    public Map<String,Object> setPrefContactsInitialView(ZAttrProvisioning.PrefContactsInitialView zmailPrefContactsInitialView, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefContactsInitialView, zmailPrefContactsInitialView.toString());
        return attrs;
    }

    /**
     * Deprecated since: 6.0.5. We do not support cards view any more. See
     * bug 47439. Orig desc: initial contact view to use
     *
     * <p>Valid values: [cards, list]
     *
     * @param zmailPrefContactsInitialView new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=167)
    public void setPrefContactsInitialViewAsString(String zmailPrefContactsInitialView) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefContactsInitialView, zmailPrefContactsInitialView);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Deprecated since: 6.0.5. We do not support cards view any more. See
     * bug 47439. Orig desc: initial contact view to use
     *
     * <p>Valid values: [cards, list]
     *
     * @param zmailPrefContactsInitialView new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=167)
    public Map<String,Object> setPrefContactsInitialViewAsString(String zmailPrefContactsInitialView, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefContactsInitialView, zmailPrefContactsInitialView);
        return attrs;
    }

    /**
     * Deprecated since: 6.0.5. We do not support cards view any more. See
     * bug 47439. Orig desc: initial contact view to use
     *
     * <p>Valid values: [cards, list]
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=167)
    public void unsetPrefContactsInitialView() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefContactsInitialView, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Deprecated since: 6.0.5. We do not support cards view any more. See
     * bug 47439. Orig desc: initial contact view to use
     *
     * <p>Valid values: [cards, list]
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=167)
    public Map<String,Object> unsetPrefContactsInitialView(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefContactsInitialView, "");
        return attrs;
    }

    /**
     * number of contacts per page
     *
     * @return zmailPrefContactsPerPage, or 25 if unset
     */
    @ZAttr(id=148)
    public int getPrefContactsPerPage() {
        return getIntAttr(Provisioning.A_zmailPrefContactsPerPage, 25);
    }

    /**
     * number of contacts per page
     *
     * @param zmailPrefContactsPerPage new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=148)
    public void setPrefContactsPerPage(int zmailPrefContactsPerPage) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefContactsPerPage, Integer.toString(zmailPrefContactsPerPage));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * number of contacts per page
     *
     * @param zmailPrefContactsPerPage new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=148)
    public Map<String,Object> setPrefContactsPerPage(int zmailPrefContactsPerPage, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefContactsPerPage, Integer.toString(zmailPrefContactsPerPage));
        return attrs;
    }

    /**
     * number of contacts per page
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=148)
    public void unsetPrefContactsPerPage() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefContactsPerPage, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * number of contacts per page
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=148)
    public Map<String,Object> unsetPrefContactsPerPage(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefContactsPerPage, "");
        return attrs;
    }

    /**
     * where the message reading pane is displayed in conv view
     *
     * <p>Valid values: [off, bottom, right]
     *
     * @return zmailPrefConvReadingPaneLocation, or ZAttrProvisioning.PrefConvReadingPaneLocation.bottom if unset and/or has invalid value
     *
     * @since ZCS 6.0.0_BETA2
     */
    @ZAttr(id=1010)
    public ZAttrProvisioning.PrefConvReadingPaneLocation getPrefConvReadingPaneLocation() {
        try { String v = getAttr(Provisioning.A_zmailPrefConvReadingPaneLocation); return v == null ? ZAttrProvisioning.PrefConvReadingPaneLocation.bottom : ZAttrProvisioning.PrefConvReadingPaneLocation.fromString(v); } catch(org.zmail.common.service.ServiceException e) { return ZAttrProvisioning.PrefConvReadingPaneLocation.bottom; }
    }

    /**
     * where the message reading pane is displayed in conv view
     *
     * <p>Valid values: [off, bottom, right]
     *
     * @return zmailPrefConvReadingPaneLocation, or "bottom" if unset
     *
     * @since ZCS 6.0.0_BETA2
     */
    @ZAttr(id=1010)
    public String getPrefConvReadingPaneLocationAsString() {
        return getAttr(Provisioning.A_zmailPrefConvReadingPaneLocation, "bottom");
    }

    /**
     * where the message reading pane is displayed in conv view
     *
     * <p>Valid values: [off, bottom, right]
     *
     * @param zmailPrefConvReadingPaneLocation new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA2
     */
    @ZAttr(id=1010)
    public void setPrefConvReadingPaneLocation(ZAttrProvisioning.PrefConvReadingPaneLocation zmailPrefConvReadingPaneLocation) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefConvReadingPaneLocation, zmailPrefConvReadingPaneLocation.toString());
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * where the message reading pane is displayed in conv view
     *
     * <p>Valid values: [off, bottom, right]
     *
     * @param zmailPrefConvReadingPaneLocation new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA2
     */
    @ZAttr(id=1010)
    public Map<String,Object> setPrefConvReadingPaneLocation(ZAttrProvisioning.PrefConvReadingPaneLocation zmailPrefConvReadingPaneLocation, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefConvReadingPaneLocation, zmailPrefConvReadingPaneLocation.toString());
        return attrs;
    }

    /**
     * where the message reading pane is displayed in conv view
     *
     * <p>Valid values: [off, bottom, right]
     *
     * @param zmailPrefConvReadingPaneLocation new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA2
     */
    @ZAttr(id=1010)
    public void setPrefConvReadingPaneLocationAsString(String zmailPrefConvReadingPaneLocation) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefConvReadingPaneLocation, zmailPrefConvReadingPaneLocation);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * where the message reading pane is displayed in conv view
     *
     * <p>Valid values: [off, bottom, right]
     *
     * @param zmailPrefConvReadingPaneLocation new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA2
     */
    @ZAttr(id=1010)
    public Map<String,Object> setPrefConvReadingPaneLocationAsString(String zmailPrefConvReadingPaneLocation, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefConvReadingPaneLocation, zmailPrefConvReadingPaneLocation);
        return attrs;
    }

    /**
     * where the message reading pane is displayed in conv view
     *
     * <p>Valid values: [off, bottom, right]
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA2
     */
    @ZAttr(id=1010)
    public void unsetPrefConvReadingPaneLocation() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefConvReadingPaneLocation, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * where the message reading pane is displayed in conv view
     *
     * <p>Valid values: [off, bottom, right]
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA2
     */
    @ZAttr(id=1010)
    public Map<String,Object> unsetPrefConvReadingPaneLocation(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefConvReadingPaneLocation, "");
        return attrs;
    }

    /**
     * When displaying an invite in a conversation, show the day calendar
     * immediately.
     *
     * @return zmailPrefConvShowCalendar, or false if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1394)
    public boolean isPrefConvShowCalendar() {
        return getBooleanAttr(Provisioning.A_zmailPrefConvShowCalendar, false);
    }

    /**
     * When displaying an invite in a conversation, show the day calendar
     * immediately.
     *
     * @param zmailPrefConvShowCalendar new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1394)
    public void setPrefConvShowCalendar(boolean zmailPrefConvShowCalendar) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefConvShowCalendar, zmailPrefConvShowCalendar ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * When displaying an invite in a conversation, show the day calendar
     * immediately.
     *
     * @param zmailPrefConvShowCalendar new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1394)
    public Map<String,Object> setPrefConvShowCalendar(boolean zmailPrefConvShowCalendar, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefConvShowCalendar, zmailPrefConvShowCalendar ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * When displaying an invite in a conversation, show the day calendar
     * immediately.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1394)
    public void unsetPrefConvShowCalendar() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefConvShowCalendar, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * When displaying an invite in a conversation, show the day calendar
     * immediately.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1394)
    public Map<String,Object> unsetPrefConvShowCalendar(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefConvShowCalendar, "");
        return attrs;
    }

    /**
     * order of messages displayed within a conversation
     *
     * <p>Valid values: [dateAsc, dateDesc]
     *
     * @return zmailPrefConversationOrder, or ZAttrProvisioning.PrefConversationOrder.dateDesc if unset and/or has invalid value
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=818)
    public ZAttrProvisioning.PrefConversationOrder getPrefConversationOrder() {
        try { String v = getAttr(Provisioning.A_zmailPrefConversationOrder); return v == null ? ZAttrProvisioning.PrefConversationOrder.dateDesc : ZAttrProvisioning.PrefConversationOrder.fromString(v); } catch(org.zmail.common.service.ServiceException e) { return ZAttrProvisioning.PrefConversationOrder.dateDesc; }
    }

    /**
     * order of messages displayed within a conversation
     *
     * <p>Valid values: [dateAsc, dateDesc]
     *
     * @return zmailPrefConversationOrder, or "dateDesc" if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=818)
    public String getPrefConversationOrderAsString() {
        return getAttr(Provisioning.A_zmailPrefConversationOrder, "dateDesc");
    }

    /**
     * order of messages displayed within a conversation
     *
     * <p>Valid values: [dateAsc, dateDesc]
     *
     * @param zmailPrefConversationOrder new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=818)
    public void setPrefConversationOrder(ZAttrProvisioning.PrefConversationOrder zmailPrefConversationOrder) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefConversationOrder, zmailPrefConversationOrder.toString());
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * order of messages displayed within a conversation
     *
     * <p>Valid values: [dateAsc, dateDesc]
     *
     * @param zmailPrefConversationOrder new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=818)
    public Map<String,Object> setPrefConversationOrder(ZAttrProvisioning.PrefConversationOrder zmailPrefConversationOrder, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefConversationOrder, zmailPrefConversationOrder.toString());
        return attrs;
    }

    /**
     * order of messages displayed within a conversation
     *
     * <p>Valid values: [dateAsc, dateDesc]
     *
     * @param zmailPrefConversationOrder new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=818)
    public void setPrefConversationOrderAsString(String zmailPrefConversationOrder) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefConversationOrder, zmailPrefConversationOrder);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * order of messages displayed within a conversation
     *
     * <p>Valid values: [dateAsc, dateDesc]
     *
     * @param zmailPrefConversationOrder new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=818)
    public Map<String,Object> setPrefConversationOrderAsString(String zmailPrefConversationOrder, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefConversationOrder, zmailPrefConversationOrder);
        return attrs;
    }

    /**
     * order of messages displayed within a conversation
     *
     * <p>Valid values: [dateAsc, dateDesc]
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=818)
    public void unsetPrefConversationOrder() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefConversationOrder, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * order of messages displayed within a conversation
     *
     * <p>Valid values: [dateAsc, dateDesc]
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=818)
    public Map<String,Object> unsetPrefConversationOrder(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefConversationOrder, "");
        return attrs;
    }

    /**
     * dedupeNone|secondCopyIfOnToOrCC|moveSentMessageToInbox|dedupeAll
     *
     * <p>Valid values: [secondCopyifOnToOrCC, dedupeNone, dedupeAll]
     *
     * @return zmailPrefDedupeMessagesSentToSelf, or ZAttrProvisioning.PrefDedupeMessagesSentToSelf.dedupeNone if unset and/or has invalid value
     */
    @ZAttr(id=144)
    public ZAttrProvisioning.PrefDedupeMessagesSentToSelf getPrefDedupeMessagesSentToSelf() {
        try { String v = getAttr(Provisioning.A_zmailPrefDedupeMessagesSentToSelf); return v == null ? ZAttrProvisioning.PrefDedupeMessagesSentToSelf.dedupeNone : ZAttrProvisioning.PrefDedupeMessagesSentToSelf.fromString(v); } catch(org.zmail.common.service.ServiceException e) { return ZAttrProvisioning.PrefDedupeMessagesSentToSelf.dedupeNone; }
    }

    /**
     * dedupeNone|secondCopyIfOnToOrCC|moveSentMessageToInbox|dedupeAll
     *
     * <p>Valid values: [secondCopyifOnToOrCC, dedupeNone, dedupeAll]
     *
     * @return zmailPrefDedupeMessagesSentToSelf, or "dedupeNone" if unset
     */
    @ZAttr(id=144)
    public String getPrefDedupeMessagesSentToSelfAsString() {
        return getAttr(Provisioning.A_zmailPrefDedupeMessagesSentToSelf, "dedupeNone");
    }

    /**
     * dedupeNone|secondCopyIfOnToOrCC|moveSentMessageToInbox|dedupeAll
     *
     * <p>Valid values: [secondCopyifOnToOrCC, dedupeNone, dedupeAll]
     *
     * @param zmailPrefDedupeMessagesSentToSelf new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=144)
    public void setPrefDedupeMessagesSentToSelf(ZAttrProvisioning.PrefDedupeMessagesSentToSelf zmailPrefDedupeMessagesSentToSelf) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefDedupeMessagesSentToSelf, zmailPrefDedupeMessagesSentToSelf.toString());
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * dedupeNone|secondCopyIfOnToOrCC|moveSentMessageToInbox|dedupeAll
     *
     * <p>Valid values: [secondCopyifOnToOrCC, dedupeNone, dedupeAll]
     *
     * @param zmailPrefDedupeMessagesSentToSelf new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=144)
    public Map<String,Object> setPrefDedupeMessagesSentToSelf(ZAttrProvisioning.PrefDedupeMessagesSentToSelf zmailPrefDedupeMessagesSentToSelf, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefDedupeMessagesSentToSelf, zmailPrefDedupeMessagesSentToSelf.toString());
        return attrs;
    }

    /**
     * dedupeNone|secondCopyIfOnToOrCC|moveSentMessageToInbox|dedupeAll
     *
     * <p>Valid values: [secondCopyifOnToOrCC, dedupeNone, dedupeAll]
     *
     * @param zmailPrefDedupeMessagesSentToSelf new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=144)
    public void setPrefDedupeMessagesSentToSelfAsString(String zmailPrefDedupeMessagesSentToSelf) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefDedupeMessagesSentToSelf, zmailPrefDedupeMessagesSentToSelf);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * dedupeNone|secondCopyIfOnToOrCC|moveSentMessageToInbox|dedupeAll
     *
     * <p>Valid values: [secondCopyifOnToOrCC, dedupeNone, dedupeAll]
     *
     * @param zmailPrefDedupeMessagesSentToSelf new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=144)
    public Map<String,Object> setPrefDedupeMessagesSentToSelfAsString(String zmailPrefDedupeMessagesSentToSelf, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefDedupeMessagesSentToSelf, zmailPrefDedupeMessagesSentToSelf);
        return attrs;
    }

    /**
     * dedupeNone|secondCopyIfOnToOrCC|moveSentMessageToInbox|dedupeAll
     *
     * <p>Valid values: [secondCopyifOnToOrCC, dedupeNone, dedupeAll]
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=144)
    public void unsetPrefDedupeMessagesSentToSelf() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefDedupeMessagesSentToSelf, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * dedupeNone|secondCopyIfOnToOrCC|moveSentMessageToInbox|dedupeAll
     *
     * <p>Valid values: [secondCopyifOnToOrCC, dedupeNone, dedupeAll]
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=144)
    public Map<String,Object> unsetPrefDedupeMessagesSentToSelf(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefDedupeMessagesSentToSelf, "");
        return attrs;
    }

    /**
     * default font size
     *
     * @return zmailPrefDefaultPrintFontSize, or "12pt" if unset
     *
     * @since ZCS 6.0.8
     */
    @ZAttr(id=1095)
    public String getPrefDefaultPrintFontSize() {
        return getAttr(Provisioning.A_zmailPrefDefaultPrintFontSize, "12pt");
    }

    /**
     * default font size
     *
     * @param zmailPrefDefaultPrintFontSize new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.8
     */
    @ZAttr(id=1095)
    public void setPrefDefaultPrintFontSize(String zmailPrefDefaultPrintFontSize) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefDefaultPrintFontSize, zmailPrefDefaultPrintFontSize);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * default font size
     *
     * @param zmailPrefDefaultPrintFontSize new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.8
     */
    @ZAttr(id=1095)
    public Map<String,Object> setPrefDefaultPrintFontSize(String zmailPrefDefaultPrintFontSize, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefDefaultPrintFontSize, zmailPrefDefaultPrintFontSize);
        return attrs;
    }

    /**
     * default font size
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.8
     */
    @ZAttr(id=1095)
    public void unsetPrefDefaultPrintFontSize() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefDefaultPrintFontSize, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * default font size
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.8
     */
    @ZAttr(id=1095)
    public Map<String,Object> unsetPrefDefaultPrintFontSize(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefDefaultPrintFontSize, "");
        return attrs;
    }

    /**
     * whether meeting invite emails are moved to Trash folder upon
     * accept/decline
     *
     * @return zmailPrefDeleteInviteOnReply, or true if unset
     */
    @ZAttr(id=470)
    public boolean isPrefDeleteInviteOnReply() {
        return getBooleanAttr(Provisioning.A_zmailPrefDeleteInviteOnReply, true);
    }

    /**
     * whether meeting invite emails are moved to Trash folder upon
     * accept/decline
     *
     * @param zmailPrefDeleteInviteOnReply new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=470)
    public void setPrefDeleteInviteOnReply(boolean zmailPrefDeleteInviteOnReply) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefDeleteInviteOnReply, zmailPrefDeleteInviteOnReply ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether meeting invite emails are moved to Trash folder upon
     * accept/decline
     *
     * @param zmailPrefDeleteInviteOnReply new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=470)
    public Map<String,Object> setPrefDeleteInviteOnReply(boolean zmailPrefDeleteInviteOnReply, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefDeleteInviteOnReply, zmailPrefDeleteInviteOnReply ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether meeting invite emails are moved to Trash folder upon
     * accept/decline
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=470)
    public void unsetPrefDeleteInviteOnReply() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefDeleteInviteOnReply, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether meeting invite emails are moved to Trash folder upon
     * accept/decline
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=470)
    public Map<String,Object> unsetPrefDeleteInviteOnReply(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefDeleteInviteOnReply, "");
        return attrs;
    }

    /**
     * zimlets user does not want to see in the UI
     *
     * @return zmailPrefDisabledZimlets, or empty array if unset
     *
     * @since ZCS 6.0.5
     */
    @ZAttr(id=1076)
    public String[] getPrefDisabledZimlets() {
        return getMultiAttr(Provisioning.A_zmailPrefDisabledZimlets);
    }

    /**
     * zimlets user does not want to see in the UI
     *
     * @param zmailPrefDisabledZimlets new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.5
     */
    @ZAttr(id=1076)
    public void setPrefDisabledZimlets(String[] zmailPrefDisabledZimlets) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefDisabledZimlets, zmailPrefDisabledZimlets);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * zimlets user does not want to see in the UI
     *
     * @param zmailPrefDisabledZimlets new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.5
     */
    @ZAttr(id=1076)
    public Map<String,Object> setPrefDisabledZimlets(String[] zmailPrefDisabledZimlets, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefDisabledZimlets, zmailPrefDisabledZimlets);
        return attrs;
    }

    /**
     * zimlets user does not want to see in the UI
     *
     * @param zmailPrefDisabledZimlets new to add to existing values
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.5
     */
    @ZAttr(id=1076)
    public void addPrefDisabledZimlets(String zmailPrefDisabledZimlets) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "+" + Provisioning.A_zmailPrefDisabledZimlets, zmailPrefDisabledZimlets);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * zimlets user does not want to see in the UI
     *
     * @param zmailPrefDisabledZimlets new to add to existing values
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.5
     */
    @ZAttr(id=1076)
    public Map<String,Object> addPrefDisabledZimlets(String zmailPrefDisabledZimlets, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "+" + Provisioning.A_zmailPrefDisabledZimlets, zmailPrefDisabledZimlets);
        return attrs;
    }

    /**
     * zimlets user does not want to see in the UI
     *
     * @param zmailPrefDisabledZimlets existing value to remove
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.5
     */
    @ZAttr(id=1076)
    public void removePrefDisabledZimlets(String zmailPrefDisabledZimlets) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "-" + Provisioning.A_zmailPrefDisabledZimlets, zmailPrefDisabledZimlets);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * zimlets user does not want to see in the UI
     *
     * @param zmailPrefDisabledZimlets existing value to remove
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.5
     */
    @ZAttr(id=1076)
    public Map<String,Object> removePrefDisabledZimlets(String zmailPrefDisabledZimlets, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "-" + Provisioning.A_zmailPrefDisabledZimlets, zmailPrefDisabledZimlets);
        return attrs;
    }

    /**
     * zimlets user does not want to see in the UI
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.5
     */
    @ZAttr(id=1076)
    public void unsetPrefDisabledZimlets() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefDisabledZimlets, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * zimlets user does not want to see in the UI
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.5
     */
    @ZAttr(id=1076)
    public Map<String,Object> unsetPrefDisabledZimlets(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefDisabledZimlets, "");
        return attrs;
    }

    /**
     * whether to display external images in HTML mail
     *
     * @return zmailPrefDisplayExternalImages, or false if unset
     */
    @ZAttr(id=511)
    public boolean isPrefDisplayExternalImages() {
        return getBooleanAttr(Provisioning.A_zmailPrefDisplayExternalImages, false);
    }

    /**
     * whether to display external images in HTML mail
     *
     * @param zmailPrefDisplayExternalImages new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=511)
    public void setPrefDisplayExternalImages(boolean zmailPrefDisplayExternalImages) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefDisplayExternalImages, zmailPrefDisplayExternalImages ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to display external images in HTML mail
     *
     * @param zmailPrefDisplayExternalImages new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=511)
    public Map<String,Object> setPrefDisplayExternalImages(boolean zmailPrefDisplayExternalImages, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefDisplayExternalImages, zmailPrefDisplayExternalImages ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether to display external images in HTML mail
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=511)
    public void unsetPrefDisplayExternalImages() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefDisplayExternalImages, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to display external images in HTML mail
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=511)
    public Map<String,Object> unsetPrefDisplayExternalImages(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefDisplayExternalImages, "");
        return attrs;
    }

    /**
     * Specifies the meaning of an external sender. &quot;ALL&quot; means
     * users whose domain doesn&#039;t match the recipient&#039;s or
     * zmailInternalSendersDomain. &quot;ALLNOTINAB&quot; means
     * &quot;ALL&quot; minus users who are in the recipient&#039;s address
     * book.
     *
     * <p>Valid values: [ALL, ALLNOTINAB]
     *
     * @return zmailPrefExternalSendersType, or ZAttrProvisioning.PrefExternalSendersType.ALL if unset and/or has invalid value
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1320)
    public ZAttrProvisioning.PrefExternalSendersType getPrefExternalSendersType() {
        try { String v = getAttr(Provisioning.A_zmailPrefExternalSendersType); return v == null ? ZAttrProvisioning.PrefExternalSendersType.ALL : ZAttrProvisioning.PrefExternalSendersType.fromString(v); } catch(org.zmail.common.service.ServiceException e) { return ZAttrProvisioning.PrefExternalSendersType.ALL; }
    }

    /**
     * Specifies the meaning of an external sender. &quot;ALL&quot; means
     * users whose domain doesn&#039;t match the recipient&#039;s or
     * zmailInternalSendersDomain. &quot;ALLNOTINAB&quot; means
     * &quot;ALL&quot; minus users who are in the recipient&#039;s address
     * book.
     *
     * <p>Valid values: [ALL, ALLNOTINAB]
     *
     * @return zmailPrefExternalSendersType, or "ALL" if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1320)
    public String getPrefExternalSendersTypeAsString() {
        return getAttr(Provisioning.A_zmailPrefExternalSendersType, "ALL");
    }

    /**
     * Specifies the meaning of an external sender. &quot;ALL&quot; means
     * users whose domain doesn&#039;t match the recipient&#039;s or
     * zmailInternalSendersDomain. &quot;ALLNOTINAB&quot; means
     * &quot;ALL&quot; minus users who are in the recipient&#039;s address
     * book.
     *
     * <p>Valid values: [ALL, ALLNOTINAB]
     *
     * @param zmailPrefExternalSendersType new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1320)
    public void setPrefExternalSendersType(ZAttrProvisioning.PrefExternalSendersType zmailPrefExternalSendersType) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefExternalSendersType, zmailPrefExternalSendersType.toString());
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Specifies the meaning of an external sender. &quot;ALL&quot; means
     * users whose domain doesn&#039;t match the recipient&#039;s or
     * zmailInternalSendersDomain. &quot;ALLNOTINAB&quot; means
     * &quot;ALL&quot; minus users who are in the recipient&#039;s address
     * book.
     *
     * <p>Valid values: [ALL, ALLNOTINAB]
     *
     * @param zmailPrefExternalSendersType new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1320)
    public Map<String,Object> setPrefExternalSendersType(ZAttrProvisioning.PrefExternalSendersType zmailPrefExternalSendersType, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefExternalSendersType, zmailPrefExternalSendersType.toString());
        return attrs;
    }

    /**
     * Specifies the meaning of an external sender. &quot;ALL&quot; means
     * users whose domain doesn&#039;t match the recipient&#039;s or
     * zmailInternalSendersDomain. &quot;ALLNOTINAB&quot; means
     * &quot;ALL&quot; minus users who are in the recipient&#039;s address
     * book.
     *
     * <p>Valid values: [ALL, ALLNOTINAB]
     *
     * @param zmailPrefExternalSendersType new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1320)
    public void setPrefExternalSendersTypeAsString(String zmailPrefExternalSendersType) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefExternalSendersType, zmailPrefExternalSendersType);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Specifies the meaning of an external sender. &quot;ALL&quot; means
     * users whose domain doesn&#039;t match the recipient&#039;s or
     * zmailInternalSendersDomain. &quot;ALLNOTINAB&quot; means
     * &quot;ALL&quot; minus users who are in the recipient&#039;s address
     * book.
     *
     * <p>Valid values: [ALL, ALLNOTINAB]
     *
     * @param zmailPrefExternalSendersType new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1320)
    public Map<String,Object> setPrefExternalSendersTypeAsString(String zmailPrefExternalSendersType, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefExternalSendersType, zmailPrefExternalSendersType);
        return attrs;
    }

    /**
     * Specifies the meaning of an external sender. &quot;ALL&quot; means
     * users whose domain doesn&#039;t match the recipient&#039;s or
     * zmailInternalSendersDomain. &quot;ALLNOTINAB&quot; means
     * &quot;ALL&quot; minus users who are in the recipient&#039;s address
     * book.
     *
     * <p>Valid values: [ALL, ALLNOTINAB]
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1320)
    public void unsetPrefExternalSendersType() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefExternalSendersType, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Specifies the meaning of an external sender. &quot;ALL&quot; means
     * users whose domain doesn&#039;t match the recipient&#039;s or
     * zmailInternalSendersDomain. &quot;ALLNOTINAB&quot; means
     * &quot;ALL&quot; minus users who are in the recipient&#039;s address
     * book.
     *
     * <p>Valid values: [ALL, ALLNOTINAB]
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1320)
    public Map<String,Object> unsetPrefExternalSendersType(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefExternalSendersType, "");
        return attrs;
    }

    /**
     * indicates which application to use for file sharing
     *
     * <p>Valid values: [briefcase]
     *
     * @return zmailPrefFileSharingApplication, or ZAttrProvisioning.PrefFileSharingApplication.briefcase if unset and/or has invalid value
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1197)
    public ZAttrProvisioning.PrefFileSharingApplication getPrefFileSharingApplication() {
        try { String v = getAttr(Provisioning.A_zmailPrefFileSharingApplication); return v == null ? ZAttrProvisioning.PrefFileSharingApplication.briefcase : ZAttrProvisioning.PrefFileSharingApplication.fromString(v); } catch(org.zmail.common.service.ServiceException e) { return ZAttrProvisioning.PrefFileSharingApplication.briefcase; }
    }

    /**
     * indicates which application to use for file sharing
     *
     * <p>Valid values: [briefcase]
     *
     * @return zmailPrefFileSharingApplication, or "briefcase" if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1197)
    public String getPrefFileSharingApplicationAsString() {
        return getAttr(Provisioning.A_zmailPrefFileSharingApplication, "briefcase");
    }

    /**
     * indicates which application to use for file sharing
     *
     * <p>Valid values: [briefcase]
     *
     * @param zmailPrefFileSharingApplication new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1197)
    public void setPrefFileSharingApplication(ZAttrProvisioning.PrefFileSharingApplication zmailPrefFileSharingApplication) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefFileSharingApplication, zmailPrefFileSharingApplication.toString());
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * indicates which application to use for file sharing
     *
     * <p>Valid values: [briefcase]
     *
     * @param zmailPrefFileSharingApplication new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1197)
    public Map<String,Object> setPrefFileSharingApplication(ZAttrProvisioning.PrefFileSharingApplication zmailPrefFileSharingApplication, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefFileSharingApplication, zmailPrefFileSharingApplication.toString());
        return attrs;
    }

    /**
     * indicates which application to use for file sharing
     *
     * <p>Valid values: [briefcase]
     *
     * @param zmailPrefFileSharingApplication new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1197)
    public void setPrefFileSharingApplicationAsString(String zmailPrefFileSharingApplication) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefFileSharingApplication, zmailPrefFileSharingApplication);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * indicates which application to use for file sharing
     *
     * <p>Valid values: [briefcase]
     *
     * @param zmailPrefFileSharingApplication new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1197)
    public Map<String,Object> setPrefFileSharingApplicationAsString(String zmailPrefFileSharingApplication, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefFileSharingApplication, zmailPrefFileSharingApplication);
        return attrs;
    }

    /**
     * indicates which application to use for file sharing
     *
     * <p>Valid values: [briefcase]
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1197)
    public void unsetPrefFileSharingApplication() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefFileSharingApplication, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * indicates which application to use for file sharing
     *
     * <p>Valid values: [briefcase]
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1197)
    public Map<String,Object> unsetPrefFileSharingApplication(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefFileSharingApplication, "");
        return attrs;
    }

    /**
     * whether folder color is enabled
     *
     * @return zmailPrefFolderColorEnabled, or true if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=771)
    public boolean isPrefFolderColorEnabled() {
        return getBooleanAttr(Provisioning.A_zmailPrefFolderColorEnabled, true);
    }

    /**
     * whether folder color is enabled
     *
     * @param zmailPrefFolderColorEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=771)
    public void setPrefFolderColorEnabled(boolean zmailPrefFolderColorEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefFolderColorEnabled, zmailPrefFolderColorEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether folder color is enabled
     *
     * @param zmailPrefFolderColorEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=771)
    public Map<String,Object> setPrefFolderColorEnabled(boolean zmailPrefFolderColorEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefFolderColorEnabled, zmailPrefFolderColorEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether folder color is enabled
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=771)
    public void unsetPrefFolderColorEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefFolderColorEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether folder color is enabled
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=771)
    public Map<String,Object> unsetPrefFolderColorEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefFolderColorEnabled, "");
        return attrs;
    }

    /**
     * whether or not folder tree is expanded
     *
     * @return zmailPrefFolderTreeOpen, or true if unset
     *
     * @since ZCS 5.0.5
     */
    @ZAttr(id=637)
    public boolean isPrefFolderTreeOpen() {
        return getBooleanAttr(Provisioning.A_zmailPrefFolderTreeOpen, true);
    }

    /**
     * whether or not folder tree is expanded
     *
     * @param zmailPrefFolderTreeOpen new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.5
     */
    @ZAttr(id=637)
    public void setPrefFolderTreeOpen(boolean zmailPrefFolderTreeOpen) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefFolderTreeOpen, zmailPrefFolderTreeOpen ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether or not folder tree is expanded
     *
     * @param zmailPrefFolderTreeOpen new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.5
     */
    @ZAttr(id=637)
    public Map<String,Object> setPrefFolderTreeOpen(boolean zmailPrefFolderTreeOpen, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefFolderTreeOpen, zmailPrefFolderTreeOpen ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether or not folder tree is expanded
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.5
     */
    @ZAttr(id=637)
    public void unsetPrefFolderTreeOpen() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefFolderTreeOpen, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether or not folder tree is expanded
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.5
     */
    @ZAttr(id=637)
    public Map<String,Object> unsetPrefFolderTreeOpen(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefFolderTreeOpen, "");
        return attrs;
    }

    /**
     * the font for the web client
     *
     * @return zmailPrefFont, or null if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1246)
    public String getPrefFont() {
        return getAttr(Provisioning.A_zmailPrefFont, null);
    }

    /**
     * the font for the web client
     *
     * @param zmailPrefFont new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1246)
    public void setPrefFont(String zmailPrefFont) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefFont, zmailPrefFont);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * the font for the web client
     *
     * @param zmailPrefFont new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1246)
    public Map<String,Object> setPrefFont(String zmailPrefFont, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefFont, zmailPrefFont);
        return attrs;
    }

    /**
     * the font for the web client
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1246)
    public void unsetPrefFont() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefFont, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * the font for the web client
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1246)
    public Map<String,Object> unsetPrefFont(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefFont, "");
        return attrs;
    }

    /**
     * what part of the original message to include during forwards
     * (deprecatedSince 5.0 in identity). The value includeBody has been
     * deprecated since 6.0.6, use includeBodyAndHeaders instead.
     *
     * <p>Valid values: [includeBodyWithPrefix, includeBodyOnly, includeBodyAndHeaders, includeBody, includeBodyAndHeadersWithPrefix, includeAsAttachment]
     *
     * @return zmailPrefForwardIncludeOriginalText, or ZAttrProvisioning.PrefForwardIncludeOriginalText.includeBody if unset and/or has invalid value
     */
    @ZAttr(id=134)
    public ZAttrProvisioning.PrefForwardIncludeOriginalText getPrefForwardIncludeOriginalText() {
        try { String v = getAttr(Provisioning.A_zmailPrefForwardIncludeOriginalText); return v == null ? ZAttrProvisioning.PrefForwardIncludeOriginalText.includeBody : ZAttrProvisioning.PrefForwardIncludeOriginalText.fromString(v); } catch(org.zmail.common.service.ServiceException e) { return ZAttrProvisioning.PrefForwardIncludeOriginalText.includeBody; }
    }

    /**
     * what part of the original message to include during forwards
     * (deprecatedSince 5.0 in identity). The value includeBody has been
     * deprecated since 6.0.6, use includeBodyAndHeaders instead.
     *
     * <p>Valid values: [includeBodyWithPrefix, includeBodyOnly, includeBodyAndHeaders, includeBody, includeBodyAndHeadersWithPrefix, includeAsAttachment]
     *
     * @return zmailPrefForwardIncludeOriginalText, or "includeBody" if unset
     */
    @ZAttr(id=134)
    public String getPrefForwardIncludeOriginalTextAsString() {
        return getAttr(Provisioning.A_zmailPrefForwardIncludeOriginalText, "includeBody");
    }

    /**
     * what part of the original message to include during forwards
     * (deprecatedSince 5.0 in identity). The value includeBody has been
     * deprecated since 6.0.6, use includeBodyAndHeaders instead.
     *
     * <p>Valid values: [includeBodyWithPrefix, includeBodyOnly, includeBodyAndHeaders, includeBody, includeBodyAndHeadersWithPrefix, includeAsAttachment]
     *
     * @param zmailPrefForwardIncludeOriginalText new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=134)
    public void setPrefForwardIncludeOriginalText(ZAttrProvisioning.PrefForwardIncludeOriginalText zmailPrefForwardIncludeOriginalText) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefForwardIncludeOriginalText, zmailPrefForwardIncludeOriginalText.toString());
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * what part of the original message to include during forwards
     * (deprecatedSince 5.0 in identity). The value includeBody has been
     * deprecated since 6.0.6, use includeBodyAndHeaders instead.
     *
     * <p>Valid values: [includeBodyWithPrefix, includeBodyOnly, includeBodyAndHeaders, includeBody, includeBodyAndHeadersWithPrefix, includeAsAttachment]
     *
     * @param zmailPrefForwardIncludeOriginalText new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=134)
    public Map<String,Object> setPrefForwardIncludeOriginalText(ZAttrProvisioning.PrefForwardIncludeOriginalText zmailPrefForwardIncludeOriginalText, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefForwardIncludeOriginalText, zmailPrefForwardIncludeOriginalText.toString());
        return attrs;
    }

    /**
     * what part of the original message to include during forwards
     * (deprecatedSince 5.0 in identity). The value includeBody has been
     * deprecated since 6.0.6, use includeBodyAndHeaders instead.
     *
     * <p>Valid values: [includeBodyWithPrefix, includeBodyOnly, includeBodyAndHeaders, includeBody, includeBodyAndHeadersWithPrefix, includeAsAttachment]
     *
     * @param zmailPrefForwardIncludeOriginalText new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=134)
    public void setPrefForwardIncludeOriginalTextAsString(String zmailPrefForwardIncludeOriginalText) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefForwardIncludeOriginalText, zmailPrefForwardIncludeOriginalText);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * what part of the original message to include during forwards
     * (deprecatedSince 5.0 in identity). The value includeBody has been
     * deprecated since 6.0.6, use includeBodyAndHeaders instead.
     *
     * <p>Valid values: [includeBodyWithPrefix, includeBodyOnly, includeBodyAndHeaders, includeBody, includeBodyAndHeadersWithPrefix, includeAsAttachment]
     *
     * @param zmailPrefForwardIncludeOriginalText new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=134)
    public Map<String,Object> setPrefForwardIncludeOriginalTextAsString(String zmailPrefForwardIncludeOriginalText, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefForwardIncludeOriginalText, zmailPrefForwardIncludeOriginalText);
        return attrs;
    }

    /**
     * what part of the original message to include during forwards
     * (deprecatedSince 5.0 in identity). The value includeBody has been
     * deprecated since 6.0.6, use includeBodyAndHeaders instead.
     *
     * <p>Valid values: [includeBodyWithPrefix, includeBodyOnly, includeBodyAndHeaders, includeBody, includeBodyAndHeadersWithPrefix, includeAsAttachment]
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=134)
    public void unsetPrefForwardIncludeOriginalText() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefForwardIncludeOriginalText, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * what part of the original message to include during forwards
     * (deprecatedSince 5.0 in identity). The value includeBody has been
     * deprecated since 6.0.6, use includeBodyAndHeaders instead.
     *
     * <p>Valid values: [includeBodyWithPrefix, includeBodyOnly, includeBodyAndHeaders, includeBody, includeBodyAndHeadersWithPrefix, includeAsAttachment]
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=134)
    public Map<String,Object> unsetPrefForwardIncludeOriginalText(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefForwardIncludeOriginalText, "");
        return attrs;
    }

    /**
     * what format we reply/forward messages in (deprecatedSince 5.0 in
     * identity)
     *
     * <p>Valid values: [same, html, text]
     *
     * @return zmailPrefForwardReplyFormat, or ZAttrProvisioning.PrefForwardReplyFormat.text if unset and/or has invalid value
     */
    @ZAttr(id=413)
    public ZAttrProvisioning.PrefForwardReplyFormat getPrefForwardReplyFormat() {
        try { String v = getAttr(Provisioning.A_zmailPrefForwardReplyFormat); return v == null ? ZAttrProvisioning.PrefForwardReplyFormat.text : ZAttrProvisioning.PrefForwardReplyFormat.fromString(v); } catch(org.zmail.common.service.ServiceException e) { return ZAttrProvisioning.PrefForwardReplyFormat.text; }
    }

    /**
     * what format we reply/forward messages in (deprecatedSince 5.0 in
     * identity)
     *
     * <p>Valid values: [same, html, text]
     *
     * @return zmailPrefForwardReplyFormat, or "text" if unset
     */
    @ZAttr(id=413)
    public String getPrefForwardReplyFormatAsString() {
        return getAttr(Provisioning.A_zmailPrefForwardReplyFormat, "text");
    }

    /**
     * what format we reply/forward messages in (deprecatedSince 5.0 in
     * identity)
     *
     * <p>Valid values: [same, html, text]
     *
     * @param zmailPrefForwardReplyFormat new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=413)
    public void setPrefForwardReplyFormat(ZAttrProvisioning.PrefForwardReplyFormat zmailPrefForwardReplyFormat) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefForwardReplyFormat, zmailPrefForwardReplyFormat.toString());
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * what format we reply/forward messages in (deprecatedSince 5.0 in
     * identity)
     *
     * <p>Valid values: [same, html, text]
     *
     * @param zmailPrefForwardReplyFormat new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=413)
    public Map<String,Object> setPrefForwardReplyFormat(ZAttrProvisioning.PrefForwardReplyFormat zmailPrefForwardReplyFormat, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefForwardReplyFormat, zmailPrefForwardReplyFormat.toString());
        return attrs;
    }

    /**
     * what format we reply/forward messages in (deprecatedSince 5.0 in
     * identity)
     *
     * <p>Valid values: [same, html, text]
     *
     * @param zmailPrefForwardReplyFormat new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=413)
    public void setPrefForwardReplyFormatAsString(String zmailPrefForwardReplyFormat) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefForwardReplyFormat, zmailPrefForwardReplyFormat);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * what format we reply/forward messages in (deprecatedSince 5.0 in
     * identity)
     *
     * <p>Valid values: [same, html, text]
     *
     * @param zmailPrefForwardReplyFormat new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=413)
    public Map<String,Object> setPrefForwardReplyFormatAsString(String zmailPrefForwardReplyFormat, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefForwardReplyFormat, zmailPrefForwardReplyFormat);
        return attrs;
    }

    /**
     * what format we reply/forward messages in (deprecatedSince 5.0 in
     * identity)
     *
     * <p>Valid values: [same, html, text]
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=413)
    public void unsetPrefForwardReplyFormat() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefForwardReplyFormat, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * what format we reply/forward messages in (deprecatedSince 5.0 in
     * identity)
     *
     * <p>Valid values: [same, html, text]
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=413)
    public Map<String,Object> unsetPrefForwardReplyFormat(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefForwardReplyFormat, "");
        return attrs;
    }

    /**
     * whether or not to use same format (text or html) of message we are
     * replying to
     *
     * @return zmailPrefForwardReplyInOriginalFormat, or true if unset
     */
    @ZAttr(id=218)
    public boolean isPrefForwardReplyInOriginalFormat() {
        return getBooleanAttr(Provisioning.A_zmailPrefForwardReplyInOriginalFormat, true);
    }

    /**
     * whether or not to use same format (text or html) of message we are
     * replying to
     *
     * @param zmailPrefForwardReplyInOriginalFormat new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=218)
    public void setPrefForwardReplyInOriginalFormat(boolean zmailPrefForwardReplyInOriginalFormat) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefForwardReplyInOriginalFormat, zmailPrefForwardReplyInOriginalFormat ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether or not to use same format (text or html) of message we are
     * replying to
     *
     * @param zmailPrefForwardReplyInOriginalFormat new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=218)
    public Map<String,Object> setPrefForwardReplyInOriginalFormat(boolean zmailPrefForwardReplyInOriginalFormat, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefForwardReplyInOriginalFormat, zmailPrefForwardReplyInOriginalFormat ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether or not to use same format (text or html) of message we are
     * replying to
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=218)
    public void unsetPrefForwardReplyInOriginalFormat() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefForwardReplyInOriginalFormat, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether or not to use same format (text or html) of message we are
     * replying to
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=218)
    public Map<String,Object> unsetPrefForwardReplyInOriginalFormat(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefForwardReplyInOriginalFormat, "");
        return attrs;
    }

    /**
     * prefix character to use during forward/reply (deprecatedSince 5.0 in
     * identity)
     *
     * @return zmailPrefForwardReplyPrefixChar, or ">" if unset
     */
    @ZAttr(id=130)
    public String getPrefForwardReplyPrefixChar() {
        return getAttr(Provisioning.A_zmailPrefForwardReplyPrefixChar, ">");
    }

    /**
     * prefix character to use during forward/reply (deprecatedSince 5.0 in
     * identity)
     *
     * @param zmailPrefForwardReplyPrefixChar new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=130)
    public void setPrefForwardReplyPrefixChar(String zmailPrefForwardReplyPrefixChar) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefForwardReplyPrefixChar, zmailPrefForwardReplyPrefixChar);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * prefix character to use during forward/reply (deprecatedSince 5.0 in
     * identity)
     *
     * @param zmailPrefForwardReplyPrefixChar new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=130)
    public Map<String,Object> setPrefForwardReplyPrefixChar(String zmailPrefForwardReplyPrefixChar, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefForwardReplyPrefixChar, zmailPrefForwardReplyPrefixChar);
        return attrs;
    }

    /**
     * prefix character to use during forward/reply (deprecatedSince 5.0 in
     * identity)
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=130)
    public void unsetPrefForwardReplyPrefixChar() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefForwardReplyPrefixChar, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * prefix character to use during forward/reply (deprecatedSince 5.0 in
     * identity)
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=130)
    public Map<String,Object> unsetPrefForwardReplyPrefixChar(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefForwardReplyPrefixChar, "");
        return attrs;
    }

    /**
     * whether end-user wants auto-complete from GAL. Feature must also be
     * enabled.
     *
     * @return zmailPrefGalAutoCompleteEnabled, or true if unset
     */
    @ZAttr(id=372)
    public boolean isPrefGalAutoCompleteEnabled() {
        return getBooleanAttr(Provisioning.A_zmailPrefGalAutoCompleteEnabled, true);
    }

    /**
     * whether end-user wants auto-complete from GAL. Feature must also be
     * enabled.
     *
     * @param zmailPrefGalAutoCompleteEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=372)
    public void setPrefGalAutoCompleteEnabled(boolean zmailPrefGalAutoCompleteEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefGalAutoCompleteEnabled, zmailPrefGalAutoCompleteEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether end-user wants auto-complete from GAL. Feature must also be
     * enabled.
     *
     * @param zmailPrefGalAutoCompleteEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=372)
    public Map<String,Object> setPrefGalAutoCompleteEnabled(boolean zmailPrefGalAutoCompleteEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefGalAutoCompleteEnabled, zmailPrefGalAutoCompleteEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether end-user wants auto-complete from GAL. Feature must also be
     * enabled.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=372)
    public void unsetPrefGalAutoCompleteEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefGalAutoCompleteEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether end-user wants auto-complete from GAL. Feature must also be
     * enabled.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=372)
    public Map<String,Object> unsetPrefGalAutoCompleteEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefGalAutoCompleteEnabled, "");
        return attrs;
    }

    /**
     * whether end-user wants search from GAL. Feature must also be enabled
     *
     * @return zmailPrefGalSearchEnabled, or true if unset
     *
     * @since ZCS 5.0.5
     */
    @ZAttr(id=635)
    public boolean isPrefGalSearchEnabled() {
        return getBooleanAttr(Provisioning.A_zmailPrefGalSearchEnabled, true);
    }

    /**
     * whether end-user wants search from GAL. Feature must also be enabled
     *
     * @param zmailPrefGalSearchEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.5
     */
    @ZAttr(id=635)
    public void setPrefGalSearchEnabled(boolean zmailPrefGalSearchEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefGalSearchEnabled, zmailPrefGalSearchEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether end-user wants search from GAL. Feature must also be enabled
     *
     * @param zmailPrefGalSearchEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.5
     */
    @ZAttr(id=635)
    public Map<String,Object> setPrefGalSearchEnabled(boolean zmailPrefGalSearchEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefGalSearchEnabled, zmailPrefGalSearchEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether end-user wants search from GAL. Feature must also be enabled
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.5
     */
    @ZAttr(id=635)
    public void unsetPrefGalSearchEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefGalSearchEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether end-user wants search from GAL. Feature must also be enabled
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.5
     */
    @ZAttr(id=635)
    public Map<String,Object> unsetPrefGalSearchEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefGalSearchEnabled, "");
        return attrs;
    }

    /**
     * action to perform for the get mail button in UI
     *
     * <p>Valid values: [update, default]
     *
     * @return zmailPrefGetMailAction, or ZAttrProvisioning.PrefGetMailAction.default_ if unset and/or has invalid value
     *
     * @since ZCS 6.0.2
     */
    @ZAttr(id=1067)
    public ZAttrProvisioning.PrefGetMailAction getPrefGetMailAction() {
        try { String v = getAttr(Provisioning.A_zmailPrefGetMailAction); return v == null ? ZAttrProvisioning.PrefGetMailAction.default_ : ZAttrProvisioning.PrefGetMailAction.fromString(v); } catch(org.zmail.common.service.ServiceException e) { return ZAttrProvisioning.PrefGetMailAction.default_; }
    }

    /**
     * action to perform for the get mail button in UI
     *
     * <p>Valid values: [update, default]
     *
     * @return zmailPrefGetMailAction, or "default" if unset
     *
     * @since ZCS 6.0.2
     */
    @ZAttr(id=1067)
    public String getPrefGetMailActionAsString() {
        return getAttr(Provisioning.A_zmailPrefGetMailAction, "default");
    }

    /**
     * action to perform for the get mail button in UI
     *
     * <p>Valid values: [update, default]
     *
     * @param zmailPrefGetMailAction new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.2
     */
    @ZAttr(id=1067)
    public void setPrefGetMailAction(ZAttrProvisioning.PrefGetMailAction zmailPrefGetMailAction) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefGetMailAction, zmailPrefGetMailAction.toString());
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * action to perform for the get mail button in UI
     *
     * <p>Valid values: [update, default]
     *
     * @param zmailPrefGetMailAction new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.2
     */
    @ZAttr(id=1067)
    public Map<String,Object> setPrefGetMailAction(ZAttrProvisioning.PrefGetMailAction zmailPrefGetMailAction, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefGetMailAction, zmailPrefGetMailAction.toString());
        return attrs;
    }

    /**
     * action to perform for the get mail button in UI
     *
     * <p>Valid values: [update, default]
     *
     * @param zmailPrefGetMailAction new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.2
     */
    @ZAttr(id=1067)
    public void setPrefGetMailActionAsString(String zmailPrefGetMailAction) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefGetMailAction, zmailPrefGetMailAction);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * action to perform for the get mail button in UI
     *
     * <p>Valid values: [update, default]
     *
     * @param zmailPrefGetMailAction new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.2
     */
    @ZAttr(id=1067)
    public Map<String,Object> setPrefGetMailActionAsString(String zmailPrefGetMailAction, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefGetMailAction, zmailPrefGetMailAction);
        return attrs;
    }

    /**
     * action to perform for the get mail button in UI
     *
     * <p>Valid values: [update, default]
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.2
     */
    @ZAttr(id=1067)
    public void unsetPrefGetMailAction() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefGetMailAction, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * action to perform for the get mail button in UI
     *
     * <p>Valid values: [update, default]
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.2
     */
    @ZAttr(id=1067)
    public Map<String,Object> unsetPrefGetMailAction(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefGetMailAction, "");
        return attrs;
    }

    /**
     * how to group mail by default
     *
     * <p>Valid values: [message, conversation]
     *
     * @return zmailPrefGroupMailBy, or ZAttrProvisioning.PrefGroupMailBy.conversation if unset and/or has invalid value
     */
    @ZAttr(id=54)
    public ZAttrProvisioning.PrefGroupMailBy getPrefGroupMailBy() {
        try { String v = getAttr(Provisioning.A_zmailPrefGroupMailBy); return v == null ? ZAttrProvisioning.PrefGroupMailBy.conversation : ZAttrProvisioning.PrefGroupMailBy.fromString(v); } catch(org.zmail.common.service.ServiceException e) { return ZAttrProvisioning.PrefGroupMailBy.conversation; }
    }

    /**
     * how to group mail by default
     *
     * <p>Valid values: [message, conversation]
     *
     * @return zmailPrefGroupMailBy, or "conversation" if unset
     */
    @ZAttr(id=54)
    public String getPrefGroupMailByAsString() {
        return getAttr(Provisioning.A_zmailPrefGroupMailBy, "conversation");
    }

    /**
     * how to group mail by default
     *
     * <p>Valid values: [message, conversation]
     *
     * @param zmailPrefGroupMailBy new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=54)
    public void setPrefGroupMailBy(ZAttrProvisioning.PrefGroupMailBy zmailPrefGroupMailBy) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefGroupMailBy, zmailPrefGroupMailBy.toString());
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * how to group mail by default
     *
     * <p>Valid values: [message, conversation]
     *
     * @param zmailPrefGroupMailBy new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=54)
    public Map<String,Object> setPrefGroupMailBy(ZAttrProvisioning.PrefGroupMailBy zmailPrefGroupMailBy, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefGroupMailBy, zmailPrefGroupMailBy.toString());
        return attrs;
    }

    /**
     * how to group mail by default
     *
     * <p>Valid values: [message, conversation]
     *
     * @param zmailPrefGroupMailBy new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=54)
    public void setPrefGroupMailByAsString(String zmailPrefGroupMailBy) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefGroupMailBy, zmailPrefGroupMailBy);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * how to group mail by default
     *
     * <p>Valid values: [message, conversation]
     *
     * @param zmailPrefGroupMailBy new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=54)
    public Map<String,Object> setPrefGroupMailByAsString(String zmailPrefGroupMailBy, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefGroupMailBy, zmailPrefGroupMailBy);
        return attrs;
    }

    /**
     * how to group mail by default
     *
     * <p>Valid values: [message, conversation]
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=54)
    public void unsetPrefGroupMailBy() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefGroupMailBy, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * how to group mail by default
     *
     * <p>Valid values: [message, conversation]
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=54)
    public Map<String,Object> unsetPrefGroupMailBy(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefGroupMailBy, "");
        return attrs;
    }

    /**
     * default font color
     *
     * @return zmailPrefHtmlEditorDefaultFontColor, or "#000000" if unset
     */
    @ZAttr(id=260)
    public String getPrefHtmlEditorDefaultFontColor() {
        return getAttr(Provisioning.A_zmailPrefHtmlEditorDefaultFontColor, "#000000");
    }

    /**
     * default font color
     *
     * @param zmailPrefHtmlEditorDefaultFontColor new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=260)
    public void setPrefHtmlEditorDefaultFontColor(String zmailPrefHtmlEditorDefaultFontColor) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefHtmlEditorDefaultFontColor, zmailPrefHtmlEditorDefaultFontColor);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * default font color
     *
     * @param zmailPrefHtmlEditorDefaultFontColor new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=260)
    public Map<String,Object> setPrefHtmlEditorDefaultFontColor(String zmailPrefHtmlEditorDefaultFontColor, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefHtmlEditorDefaultFontColor, zmailPrefHtmlEditorDefaultFontColor);
        return attrs;
    }

    /**
     * default font color
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=260)
    public void unsetPrefHtmlEditorDefaultFontColor() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefHtmlEditorDefaultFontColor, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * default font color
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=260)
    public Map<String,Object> unsetPrefHtmlEditorDefaultFontColor(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefHtmlEditorDefaultFontColor, "");
        return attrs;
    }

    /**
     * default font family
     *
     * @return zmailPrefHtmlEditorDefaultFontFamily, or "times new roman, new york, times, serif" if unset
     */
    @ZAttr(id=258)
    public String getPrefHtmlEditorDefaultFontFamily() {
        return getAttr(Provisioning.A_zmailPrefHtmlEditorDefaultFontFamily, "times new roman, new york, times, serif");
    }

    /**
     * default font family
     *
     * @param zmailPrefHtmlEditorDefaultFontFamily new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=258)
    public void setPrefHtmlEditorDefaultFontFamily(String zmailPrefHtmlEditorDefaultFontFamily) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefHtmlEditorDefaultFontFamily, zmailPrefHtmlEditorDefaultFontFamily);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * default font family
     *
     * @param zmailPrefHtmlEditorDefaultFontFamily new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=258)
    public Map<String,Object> setPrefHtmlEditorDefaultFontFamily(String zmailPrefHtmlEditorDefaultFontFamily, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefHtmlEditorDefaultFontFamily, zmailPrefHtmlEditorDefaultFontFamily);
        return attrs;
    }

    /**
     * default font family
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=258)
    public void unsetPrefHtmlEditorDefaultFontFamily() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefHtmlEditorDefaultFontFamily, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * default font family
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=258)
    public Map<String,Object> unsetPrefHtmlEditorDefaultFontFamily(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefHtmlEditorDefaultFontFamily, "");
        return attrs;
    }

    /**
     * default font size
     *
     * @return zmailPrefHtmlEditorDefaultFontSize, or "12pt" if unset
     */
    @ZAttr(id=259)
    public String getPrefHtmlEditorDefaultFontSize() {
        return getAttr(Provisioning.A_zmailPrefHtmlEditorDefaultFontSize, "12pt");
    }

    /**
     * default font size
     *
     * @param zmailPrefHtmlEditorDefaultFontSize new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=259)
    public void setPrefHtmlEditorDefaultFontSize(String zmailPrefHtmlEditorDefaultFontSize) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefHtmlEditorDefaultFontSize, zmailPrefHtmlEditorDefaultFontSize);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * default font size
     *
     * @param zmailPrefHtmlEditorDefaultFontSize new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=259)
    public Map<String,Object> setPrefHtmlEditorDefaultFontSize(String zmailPrefHtmlEditorDefaultFontSize, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefHtmlEditorDefaultFontSize, zmailPrefHtmlEditorDefaultFontSize);
        return attrs;
    }

    /**
     * default font size
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=259)
    public void unsetPrefHtmlEditorDefaultFontSize() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefHtmlEditorDefaultFontSize, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * default font size
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=259)
    public Map<String,Object> unsetPrefHtmlEditorDefaultFontSize(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefHtmlEditorDefaultFontSize, "");
        return attrs;
    }

    /**
     * whether to login to the IM client automatically
     *
     * @return zmailPrefIMAutoLogin, or false if unset
     */
    @ZAttr(id=488)
    public boolean isPrefIMAutoLogin() {
        return getBooleanAttr(Provisioning.A_zmailPrefIMAutoLogin, false);
    }

    /**
     * whether to login to the IM client automatically
     *
     * @param zmailPrefIMAutoLogin new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=488)
    public void setPrefIMAutoLogin(boolean zmailPrefIMAutoLogin) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMAutoLogin, zmailPrefIMAutoLogin ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to login to the IM client automatically
     *
     * @param zmailPrefIMAutoLogin new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=488)
    public Map<String,Object> setPrefIMAutoLogin(boolean zmailPrefIMAutoLogin, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMAutoLogin, zmailPrefIMAutoLogin ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether to login to the IM client automatically
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=488)
    public void unsetPrefIMAutoLogin() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMAutoLogin, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to login to the IM client automatically
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=488)
    public Map<String,Object> unsetPrefIMAutoLogin(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMAutoLogin, "");
        return attrs;
    }

    /**
     * IM buddy list sort order
     *
     * @return zmailPrefIMBuddyListSort, or null if unset
     *
     * @since ZCS 5.0.10
     */
    @ZAttr(id=705)
    public String getPrefIMBuddyListSort() {
        return getAttr(Provisioning.A_zmailPrefIMBuddyListSort, null);
    }

    /**
     * IM buddy list sort order
     *
     * @param zmailPrefIMBuddyListSort new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.10
     */
    @ZAttr(id=705)
    public void setPrefIMBuddyListSort(String zmailPrefIMBuddyListSort) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMBuddyListSort, zmailPrefIMBuddyListSort);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * IM buddy list sort order
     *
     * @param zmailPrefIMBuddyListSort new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.10
     */
    @ZAttr(id=705)
    public Map<String,Object> setPrefIMBuddyListSort(String zmailPrefIMBuddyListSort, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMBuddyListSort, zmailPrefIMBuddyListSort);
        return attrs;
    }

    /**
     * IM buddy list sort order
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.10
     */
    @ZAttr(id=705)
    public void unsetPrefIMBuddyListSort() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMBuddyListSort, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * IM buddy list sort order
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.10
     */
    @ZAttr(id=705)
    public Map<String,Object> unsetPrefIMBuddyListSort(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMBuddyListSort, "");
        return attrs;
    }

    /**
     * Flash IM icon on new messages
     *
     * @return zmailPrefIMFlashIcon, or true if unset
     */
    @ZAttr(id=462)
    public boolean isPrefIMFlashIcon() {
        return getBooleanAttr(Provisioning.A_zmailPrefIMFlashIcon, true);
    }

    /**
     * Flash IM icon on new messages
     *
     * @param zmailPrefIMFlashIcon new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=462)
    public void setPrefIMFlashIcon(boolean zmailPrefIMFlashIcon) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMFlashIcon, zmailPrefIMFlashIcon ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Flash IM icon on new messages
     *
     * @param zmailPrefIMFlashIcon new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=462)
    public Map<String,Object> setPrefIMFlashIcon(boolean zmailPrefIMFlashIcon, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMFlashIcon, zmailPrefIMFlashIcon ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * Flash IM icon on new messages
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=462)
    public void unsetPrefIMFlashIcon() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMFlashIcon, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Flash IM icon on new messages
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=462)
    public Map<String,Object> unsetPrefIMFlashIcon(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMFlashIcon, "");
        return attrs;
    }

    /**
     * Flash title bar when a new IM arrives
     *
     * @return zmailPrefIMFlashTitle, or true if unset
     *
     * @since ZCS 5.0.7
     */
    @ZAttr(id=679)
    public boolean isPrefIMFlashTitle() {
        return getBooleanAttr(Provisioning.A_zmailPrefIMFlashTitle, true);
    }

    /**
     * Flash title bar when a new IM arrives
     *
     * @param zmailPrefIMFlashTitle new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.7
     */
    @ZAttr(id=679)
    public void setPrefIMFlashTitle(boolean zmailPrefIMFlashTitle) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMFlashTitle, zmailPrefIMFlashTitle ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Flash title bar when a new IM arrives
     *
     * @param zmailPrefIMFlashTitle new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.7
     */
    @ZAttr(id=679)
    public Map<String,Object> setPrefIMFlashTitle(boolean zmailPrefIMFlashTitle, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMFlashTitle, zmailPrefIMFlashTitle ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * Flash title bar when a new IM arrives
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.7
     */
    @ZAttr(id=679)
    public void unsetPrefIMFlashTitle() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMFlashTitle, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Flash title bar when a new IM arrives
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.7
     */
    @ZAttr(id=679)
    public Map<String,Object> unsetPrefIMFlashTitle(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMFlashTitle, "");
        return attrs;
    }

    /**
     * whether to hide IM blocked buddies
     *
     * @return zmailPrefIMHideBlockedBuddies, or false if unset
     *
     * @since ZCS 5.0.10
     */
    @ZAttr(id=707)
    public boolean isPrefIMHideBlockedBuddies() {
        return getBooleanAttr(Provisioning.A_zmailPrefIMHideBlockedBuddies, false);
    }

    /**
     * whether to hide IM blocked buddies
     *
     * @param zmailPrefIMHideBlockedBuddies new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.10
     */
    @ZAttr(id=707)
    public void setPrefIMHideBlockedBuddies(boolean zmailPrefIMHideBlockedBuddies) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMHideBlockedBuddies, zmailPrefIMHideBlockedBuddies ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to hide IM blocked buddies
     *
     * @param zmailPrefIMHideBlockedBuddies new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.10
     */
    @ZAttr(id=707)
    public Map<String,Object> setPrefIMHideBlockedBuddies(boolean zmailPrefIMHideBlockedBuddies, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMHideBlockedBuddies, zmailPrefIMHideBlockedBuddies ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether to hide IM blocked buddies
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.10
     */
    @ZAttr(id=707)
    public void unsetPrefIMHideBlockedBuddies() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMHideBlockedBuddies, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to hide IM blocked buddies
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.10
     */
    @ZAttr(id=707)
    public Map<String,Object> unsetPrefIMHideBlockedBuddies(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMHideBlockedBuddies, "");
        return attrs;
    }

    /**
     * whether to hide IM offline buddies
     *
     * @return zmailPrefIMHideOfflineBuddies, or false if unset
     *
     * @since ZCS 5.0.10
     */
    @ZAttr(id=706)
    public boolean isPrefIMHideOfflineBuddies() {
        return getBooleanAttr(Provisioning.A_zmailPrefIMHideOfflineBuddies, false);
    }

    /**
     * whether to hide IM offline buddies
     *
     * @param zmailPrefIMHideOfflineBuddies new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.10
     */
    @ZAttr(id=706)
    public void setPrefIMHideOfflineBuddies(boolean zmailPrefIMHideOfflineBuddies) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMHideOfflineBuddies, zmailPrefIMHideOfflineBuddies ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to hide IM offline buddies
     *
     * @param zmailPrefIMHideOfflineBuddies new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.10
     */
    @ZAttr(id=706)
    public Map<String,Object> setPrefIMHideOfflineBuddies(boolean zmailPrefIMHideOfflineBuddies, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMHideOfflineBuddies, zmailPrefIMHideOfflineBuddies ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether to hide IM offline buddies
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.10
     */
    @ZAttr(id=706)
    public void unsetPrefIMHideOfflineBuddies() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMHideOfflineBuddies, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to hide IM offline buddies
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.10
     */
    @ZAttr(id=706)
    public Map<String,Object> unsetPrefIMHideOfflineBuddies(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMHideOfflineBuddies, "");
        return attrs;
    }

    /**
     * IM idle status
     *
     * <p>Valid values: [away, xa, invisible, offline]
     *
     * @return zmailPrefIMIdleStatus, or ZAttrProvisioning.PrefIMIdleStatus.away if unset and/or has invalid value
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=560)
    public ZAttrProvisioning.PrefIMIdleStatus getPrefIMIdleStatus() {
        try { String v = getAttr(Provisioning.A_zmailPrefIMIdleStatus); return v == null ? ZAttrProvisioning.PrefIMIdleStatus.away : ZAttrProvisioning.PrefIMIdleStatus.fromString(v); } catch(org.zmail.common.service.ServiceException e) { return ZAttrProvisioning.PrefIMIdleStatus.away; }
    }

    /**
     * IM idle status
     *
     * <p>Valid values: [away, xa, invisible, offline]
     *
     * @return zmailPrefIMIdleStatus, or "away" if unset
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=560)
    public String getPrefIMIdleStatusAsString() {
        return getAttr(Provisioning.A_zmailPrefIMIdleStatus, "away");
    }

    /**
     * IM idle status
     *
     * <p>Valid values: [away, xa, invisible, offline]
     *
     * @param zmailPrefIMIdleStatus new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=560)
    public void setPrefIMIdleStatus(ZAttrProvisioning.PrefIMIdleStatus zmailPrefIMIdleStatus) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMIdleStatus, zmailPrefIMIdleStatus.toString());
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * IM idle status
     *
     * <p>Valid values: [away, xa, invisible, offline]
     *
     * @param zmailPrefIMIdleStatus new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=560)
    public Map<String,Object> setPrefIMIdleStatus(ZAttrProvisioning.PrefIMIdleStatus zmailPrefIMIdleStatus, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMIdleStatus, zmailPrefIMIdleStatus.toString());
        return attrs;
    }

    /**
     * IM idle status
     *
     * <p>Valid values: [away, xa, invisible, offline]
     *
     * @param zmailPrefIMIdleStatus new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=560)
    public void setPrefIMIdleStatusAsString(String zmailPrefIMIdleStatus) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMIdleStatus, zmailPrefIMIdleStatus);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * IM idle status
     *
     * <p>Valid values: [away, xa, invisible, offline]
     *
     * @param zmailPrefIMIdleStatus new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=560)
    public Map<String,Object> setPrefIMIdleStatusAsString(String zmailPrefIMIdleStatus, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMIdleStatus, zmailPrefIMIdleStatus);
        return attrs;
    }

    /**
     * IM idle status
     *
     * <p>Valid values: [away, xa, invisible, offline]
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=560)
    public void unsetPrefIMIdleStatus() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMIdleStatus, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * IM idle status
     *
     * <p>Valid values: [away, xa, invisible, offline]
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=560)
    public Map<String,Object> unsetPrefIMIdleStatus(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMIdleStatus, "");
        return attrs;
    }

    /**
     * IM session idle timeout in minutes
     *
     * @return zmailPrefIMIdleTimeout, or 10 if unset
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=559)
    public int getPrefIMIdleTimeout() {
        return getIntAttr(Provisioning.A_zmailPrefIMIdleTimeout, 10);
    }

    /**
     * IM session idle timeout in minutes
     *
     * @param zmailPrefIMIdleTimeout new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=559)
    public void setPrefIMIdleTimeout(int zmailPrefIMIdleTimeout) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMIdleTimeout, Integer.toString(zmailPrefIMIdleTimeout));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * IM session idle timeout in minutes
     *
     * @param zmailPrefIMIdleTimeout new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=559)
    public Map<String,Object> setPrefIMIdleTimeout(int zmailPrefIMIdleTimeout, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMIdleTimeout, Integer.toString(zmailPrefIMIdleTimeout));
        return attrs;
    }

    /**
     * IM session idle timeout in minutes
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=559)
    public void unsetPrefIMIdleTimeout() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMIdleTimeout, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * IM session idle timeout in minutes
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=559)
    public Map<String,Object> unsetPrefIMIdleTimeout(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMIdleTimeout, "");
        return attrs;
    }

    /**
     * Enable instant notifications
     *
     * @return zmailPrefIMInstantNotify, or true if unset
     */
    @ZAttr(id=517)
    public boolean isPrefIMInstantNotify() {
        return getBooleanAttr(Provisioning.A_zmailPrefIMInstantNotify, true);
    }

    /**
     * Enable instant notifications
     *
     * @param zmailPrefIMInstantNotify new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=517)
    public void setPrefIMInstantNotify(boolean zmailPrefIMInstantNotify) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMInstantNotify, zmailPrefIMInstantNotify ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Enable instant notifications
     *
     * @param zmailPrefIMInstantNotify new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=517)
    public Map<String,Object> setPrefIMInstantNotify(boolean zmailPrefIMInstantNotify, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMInstantNotify, zmailPrefIMInstantNotify ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * Enable instant notifications
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=517)
    public void unsetPrefIMInstantNotify() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMInstantNotify, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Enable instant notifications
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=517)
    public Map<String,Object> unsetPrefIMInstantNotify(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMInstantNotify, "");
        return attrs;
    }

    /**
     * whether to log IM chats to the Chats folder
     *
     * @return zmailPrefIMLogChats, or true if unset
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=556)
    public boolean isPrefIMLogChats() {
        return getBooleanAttr(Provisioning.A_zmailPrefIMLogChats, true);
    }

    /**
     * whether to log IM chats to the Chats folder
     *
     * @param zmailPrefIMLogChats new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=556)
    public void setPrefIMLogChats(boolean zmailPrefIMLogChats) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMLogChats, zmailPrefIMLogChats ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to log IM chats to the Chats folder
     *
     * @param zmailPrefIMLogChats new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=556)
    public Map<String,Object> setPrefIMLogChats(boolean zmailPrefIMLogChats, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMLogChats, zmailPrefIMLogChats ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether to log IM chats to the Chats folder
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=556)
    public void unsetPrefIMLogChats() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMLogChats, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to log IM chats to the Chats folder
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=556)
    public Map<String,Object> unsetPrefIMLogChats(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMLogChats, "");
        return attrs;
    }

    /**
     * whether IM log chats is enabled
     *
     * @return zmailPrefIMLogChatsEnabled, or true if unset
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=552)
    public boolean isPrefIMLogChatsEnabled() {
        return getBooleanAttr(Provisioning.A_zmailPrefIMLogChatsEnabled, true);
    }

    /**
     * whether IM log chats is enabled
     *
     * @param zmailPrefIMLogChatsEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=552)
    public void setPrefIMLogChatsEnabled(boolean zmailPrefIMLogChatsEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMLogChatsEnabled, zmailPrefIMLogChatsEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether IM log chats is enabled
     *
     * @param zmailPrefIMLogChatsEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=552)
    public Map<String,Object> setPrefIMLogChatsEnabled(boolean zmailPrefIMLogChatsEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMLogChatsEnabled, zmailPrefIMLogChatsEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether IM log chats is enabled
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=552)
    public void unsetPrefIMLogChatsEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMLogChatsEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether IM log chats is enabled
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=552)
    public Map<String,Object> unsetPrefIMLogChatsEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMLogChatsEnabled, "");
        return attrs;
    }

    /**
     * Notify for presence modifications
     *
     * @return zmailPrefIMNotifyPresence, or true if unset
     */
    @ZAttr(id=463)
    public boolean isPrefIMNotifyPresence() {
        return getBooleanAttr(Provisioning.A_zmailPrefIMNotifyPresence, true);
    }

    /**
     * Notify for presence modifications
     *
     * @param zmailPrefIMNotifyPresence new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=463)
    public void setPrefIMNotifyPresence(boolean zmailPrefIMNotifyPresence) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMNotifyPresence, zmailPrefIMNotifyPresence ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Notify for presence modifications
     *
     * @param zmailPrefIMNotifyPresence new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=463)
    public Map<String,Object> setPrefIMNotifyPresence(boolean zmailPrefIMNotifyPresence, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMNotifyPresence, zmailPrefIMNotifyPresence ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * Notify for presence modifications
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=463)
    public void unsetPrefIMNotifyPresence() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMNotifyPresence, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Notify for presence modifications
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=463)
    public Map<String,Object> unsetPrefIMNotifyPresence(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMNotifyPresence, "");
        return attrs;
    }

    /**
     * Notify for status change
     *
     * @return zmailPrefIMNotifyStatus, or true if unset
     */
    @ZAttr(id=464)
    public boolean isPrefIMNotifyStatus() {
        return getBooleanAttr(Provisioning.A_zmailPrefIMNotifyStatus, true);
    }

    /**
     * Notify for status change
     *
     * @param zmailPrefIMNotifyStatus new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=464)
    public void setPrefIMNotifyStatus(boolean zmailPrefIMNotifyStatus) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMNotifyStatus, zmailPrefIMNotifyStatus ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Notify for status change
     *
     * @param zmailPrefIMNotifyStatus new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=464)
    public Map<String,Object> setPrefIMNotifyStatus(boolean zmailPrefIMNotifyStatus, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMNotifyStatus, zmailPrefIMNotifyStatus ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * Notify for status change
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=464)
    public void unsetPrefIMNotifyStatus() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMNotifyStatus, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Notify for status change
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=464)
    public Map<String,Object> unsetPrefIMNotifyStatus(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMNotifyStatus, "");
        return attrs;
    }

    /**
     * whether to report IM idle status
     *
     * @return zmailPrefIMReportIdle, or true if unset
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=558)
    public boolean isPrefIMReportIdle() {
        return getBooleanAttr(Provisioning.A_zmailPrefIMReportIdle, true);
    }

    /**
     * whether to report IM idle status
     *
     * @param zmailPrefIMReportIdle new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=558)
    public void setPrefIMReportIdle(boolean zmailPrefIMReportIdle) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMReportIdle, zmailPrefIMReportIdle ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to report IM idle status
     *
     * @param zmailPrefIMReportIdle new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=558)
    public Map<String,Object> setPrefIMReportIdle(boolean zmailPrefIMReportIdle, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMReportIdle, zmailPrefIMReportIdle ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether to report IM idle status
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=558)
    public void unsetPrefIMReportIdle() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMReportIdle, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to report IM idle status
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=558)
    public Map<String,Object> unsetPrefIMReportIdle(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMReportIdle, "");
        return attrs;
    }

    /**
     * whether sounds is enabled in IM
     *
     * @return zmailPrefIMSoundsEnabled, or true if unset
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=570)
    public boolean isPrefIMSoundsEnabled() {
        return getBooleanAttr(Provisioning.A_zmailPrefIMSoundsEnabled, true);
    }

    /**
     * whether sounds is enabled in IM
     *
     * @param zmailPrefIMSoundsEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=570)
    public void setPrefIMSoundsEnabled(boolean zmailPrefIMSoundsEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMSoundsEnabled, zmailPrefIMSoundsEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether sounds is enabled in IM
     *
     * @param zmailPrefIMSoundsEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=570)
    public Map<String,Object> setPrefIMSoundsEnabled(boolean zmailPrefIMSoundsEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMSoundsEnabled, zmailPrefIMSoundsEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether sounds is enabled in IM
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=570)
    public void unsetPrefIMSoundsEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMSoundsEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether sounds is enabled in IM
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=570)
    public Map<String,Object> unsetPrefIMSoundsEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMSoundsEnabled, "");
        return attrs;
    }

    /**
     * whether to enable toaster notification for IM
     *
     * @return zmailPrefIMToasterEnabled, or false if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=814)
    public boolean isPrefIMToasterEnabled() {
        return getBooleanAttr(Provisioning.A_zmailPrefIMToasterEnabled, false);
    }

    /**
     * whether to enable toaster notification for IM
     *
     * @param zmailPrefIMToasterEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=814)
    public void setPrefIMToasterEnabled(boolean zmailPrefIMToasterEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMToasterEnabled, zmailPrefIMToasterEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to enable toaster notification for IM
     *
     * @param zmailPrefIMToasterEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=814)
    public Map<String,Object> setPrefIMToasterEnabled(boolean zmailPrefIMToasterEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMToasterEnabled, zmailPrefIMToasterEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether to enable toaster notification for IM
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=814)
    public void unsetPrefIMToasterEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMToasterEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to enable toaster notification for IM
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=814)
    public Map<String,Object> unsetPrefIMToasterEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIMToasterEnabled, "");
        return attrs;
    }

    /**
     * whether or not the IMAP server exports search folders
     *
     * @return zmailPrefImapSearchFoldersEnabled, or true if unset
     */
    @ZAttr(id=241)
    public boolean isPrefImapSearchFoldersEnabled() {
        return getBooleanAttr(Provisioning.A_zmailPrefImapSearchFoldersEnabled, true);
    }

    /**
     * whether or not the IMAP server exports search folders
     *
     * @param zmailPrefImapSearchFoldersEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=241)
    public void setPrefImapSearchFoldersEnabled(boolean zmailPrefImapSearchFoldersEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefImapSearchFoldersEnabled, zmailPrefImapSearchFoldersEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether or not the IMAP server exports search folders
     *
     * @param zmailPrefImapSearchFoldersEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=241)
    public Map<String,Object> setPrefImapSearchFoldersEnabled(boolean zmailPrefImapSearchFoldersEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefImapSearchFoldersEnabled, zmailPrefImapSearchFoldersEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether or not the IMAP server exports search folders
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=241)
    public void unsetPrefImapSearchFoldersEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefImapSearchFoldersEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether or not the IMAP server exports search folders
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=241)
    public Map<String,Object> unsetPrefImapSearchFoldersEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefImapSearchFoldersEnabled, "");
        return attrs;
    }

    /**
     * Retention period of read messages in the Inbox folder. 0 means that
     * all messages will be retained. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * <p>Use getPrefInboxReadLifetimeAsString to access value as a string.
     *
     * @see #getPrefInboxReadLifetimeAsString()
     *
     * @return zmailPrefInboxReadLifetime in millseconds, or 0 (0)  if unset
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=538)
    public long getPrefInboxReadLifetime() {
        return getTimeInterval(Provisioning.A_zmailPrefInboxReadLifetime, 0L);
    }

    /**
     * Retention period of read messages in the Inbox folder. 0 means that
     * all messages will be retained. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @return zmailPrefInboxReadLifetime, or "0" if unset
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=538)
    public String getPrefInboxReadLifetimeAsString() {
        return getAttr(Provisioning.A_zmailPrefInboxReadLifetime, "0");
    }

    /**
     * Retention period of read messages in the Inbox folder. 0 means that
     * all messages will be retained. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param zmailPrefInboxReadLifetime new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=538)
    public void setPrefInboxReadLifetime(String zmailPrefInboxReadLifetime) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefInboxReadLifetime, zmailPrefInboxReadLifetime);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Retention period of read messages in the Inbox folder. 0 means that
     * all messages will be retained. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param zmailPrefInboxReadLifetime new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=538)
    public Map<String,Object> setPrefInboxReadLifetime(String zmailPrefInboxReadLifetime, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefInboxReadLifetime, zmailPrefInboxReadLifetime);
        return attrs;
    }

    /**
     * Retention period of read messages in the Inbox folder. 0 means that
     * all messages will be retained. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=538)
    public void unsetPrefInboxReadLifetime() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefInboxReadLifetime, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Retention period of read messages in the Inbox folder. 0 means that
     * all messages will be retained. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=538)
    public Map<String,Object> unsetPrefInboxReadLifetime(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefInboxReadLifetime, "");
        return attrs;
    }

    /**
     * Retention period of unread messages in the Inbox folder. 0 means that
     * all messages will be retained. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * <p>Use getPrefInboxUnreadLifetimeAsString to access value as a string.
     *
     * @see #getPrefInboxUnreadLifetimeAsString()
     *
     * @return zmailPrefInboxUnreadLifetime in millseconds, or 0 (0)  if unset
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=537)
    public long getPrefInboxUnreadLifetime() {
        return getTimeInterval(Provisioning.A_zmailPrefInboxUnreadLifetime, 0L);
    }

    /**
     * Retention period of unread messages in the Inbox folder. 0 means that
     * all messages will be retained. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @return zmailPrefInboxUnreadLifetime, or "0" if unset
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=537)
    public String getPrefInboxUnreadLifetimeAsString() {
        return getAttr(Provisioning.A_zmailPrefInboxUnreadLifetime, "0");
    }

    /**
     * Retention period of unread messages in the Inbox folder. 0 means that
     * all messages will be retained. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param zmailPrefInboxUnreadLifetime new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=537)
    public void setPrefInboxUnreadLifetime(String zmailPrefInboxUnreadLifetime) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefInboxUnreadLifetime, zmailPrefInboxUnreadLifetime);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Retention period of unread messages in the Inbox folder. 0 means that
     * all messages will be retained. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param zmailPrefInboxUnreadLifetime new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=537)
    public Map<String,Object> setPrefInboxUnreadLifetime(String zmailPrefInboxUnreadLifetime, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefInboxUnreadLifetime, zmailPrefInboxUnreadLifetime);
        return attrs;
    }

    /**
     * Retention period of unread messages in the Inbox folder. 0 means that
     * all messages will be retained. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=537)
    public void unsetPrefInboxUnreadLifetime() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefInboxUnreadLifetime, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Retention period of unread messages in the Inbox folder. 0 means that
     * all messages will be retained. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=537)
    public Map<String,Object> unsetPrefInboxUnreadLifetime(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefInboxUnreadLifetime, "");
        return attrs;
    }

    /**
     * whether to include shared items in search
     *
     * @return zmailPrefIncludeSharedItemsInSearch, or false if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1338)
    public boolean isPrefIncludeSharedItemsInSearch() {
        return getBooleanAttr(Provisioning.A_zmailPrefIncludeSharedItemsInSearch, false);
    }

    /**
     * whether to include shared items in search
     *
     * @param zmailPrefIncludeSharedItemsInSearch new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1338)
    public void setPrefIncludeSharedItemsInSearch(boolean zmailPrefIncludeSharedItemsInSearch) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIncludeSharedItemsInSearch, zmailPrefIncludeSharedItemsInSearch ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to include shared items in search
     *
     * @param zmailPrefIncludeSharedItemsInSearch new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1338)
    public Map<String,Object> setPrefIncludeSharedItemsInSearch(boolean zmailPrefIncludeSharedItemsInSearch, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIncludeSharedItemsInSearch, zmailPrefIncludeSharedItemsInSearch ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether to include shared items in search
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1338)
    public void unsetPrefIncludeSharedItemsInSearch() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIncludeSharedItemsInSearch, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to include shared items in search
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1338)
    public Map<String,Object> unsetPrefIncludeSharedItemsInSearch(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIncludeSharedItemsInSearch, "");
        return attrs;
    }

    /**
     * whether or not to include spam in search by default
     *
     * @return zmailPrefIncludeSpamInSearch, or false if unset
     */
    @ZAttr(id=55)
    public boolean isPrefIncludeSpamInSearch() {
        return getBooleanAttr(Provisioning.A_zmailPrefIncludeSpamInSearch, false);
    }

    /**
     * whether or not to include spam in search by default
     *
     * @param zmailPrefIncludeSpamInSearch new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=55)
    public void setPrefIncludeSpamInSearch(boolean zmailPrefIncludeSpamInSearch) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIncludeSpamInSearch, zmailPrefIncludeSpamInSearch ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether or not to include spam in search by default
     *
     * @param zmailPrefIncludeSpamInSearch new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=55)
    public Map<String,Object> setPrefIncludeSpamInSearch(boolean zmailPrefIncludeSpamInSearch, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIncludeSpamInSearch, zmailPrefIncludeSpamInSearch ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether or not to include spam in search by default
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=55)
    public void unsetPrefIncludeSpamInSearch() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIncludeSpamInSearch, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether or not to include spam in search by default
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=55)
    public Map<String,Object> unsetPrefIncludeSpamInSearch(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIncludeSpamInSearch, "");
        return attrs;
    }

    /**
     * whether or not to include trash in search by default
     *
     * @return zmailPrefIncludeTrashInSearch, or false if unset
     */
    @ZAttr(id=56)
    public boolean isPrefIncludeTrashInSearch() {
        return getBooleanAttr(Provisioning.A_zmailPrefIncludeTrashInSearch, false);
    }

    /**
     * whether or not to include trash in search by default
     *
     * @param zmailPrefIncludeTrashInSearch new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=56)
    public void setPrefIncludeTrashInSearch(boolean zmailPrefIncludeTrashInSearch) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIncludeTrashInSearch, zmailPrefIncludeTrashInSearch ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether or not to include trash in search by default
     *
     * @param zmailPrefIncludeTrashInSearch new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=56)
    public Map<String,Object> setPrefIncludeTrashInSearch(boolean zmailPrefIncludeTrashInSearch, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIncludeTrashInSearch, zmailPrefIncludeTrashInSearch ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether or not to include trash in search by default
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=56)
    public void unsetPrefIncludeTrashInSearch() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIncludeTrashInSearch, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether or not to include trash in search by default
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=56)
    public Map<String,Object> unsetPrefIncludeTrashInSearch(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefIncludeTrashInSearch, "");
        return attrs;
    }

    /**
     * number of messages/conversations per virtual page
     *
     * @return zmailPrefItemsPerVirtualPage, or 50 if unset
     *
     * @since ZCS 6.0.6
     */
    @ZAttr(id=1079)
    public int getPrefItemsPerVirtualPage() {
        return getIntAttr(Provisioning.A_zmailPrefItemsPerVirtualPage, 50);
    }

    /**
     * number of messages/conversations per virtual page
     *
     * @param zmailPrefItemsPerVirtualPage new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.6
     */
    @ZAttr(id=1079)
    public void setPrefItemsPerVirtualPage(int zmailPrefItemsPerVirtualPage) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefItemsPerVirtualPage, Integer.toString(zmailPrefItemsPerVirtualPage));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * number of messages/conversations per virtual page
     *
     * @param zmailPrefItemsPerVirtualPage new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.6
     */
    @ZAttr(id=1079)
    public Map<String,Object> setPrefItemsPerVirtualPage(int zmailPrefItemsPerVirtualPage, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefItemsPerVirtualPage, Integer.toString(zmailPrefItemsPerVirtualPage));
        return attrs;
    }

    /**
     * number of messages/conversations per virtual page
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.6
     */
    @ZAttr(id=1079)
    public void unsetPrefItemsPerVirtualPage() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefItemsPerVirtualPage, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * number of messages/conversations per virtual page
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.6
     */
    @ZAttr(id=1079)
    public Map<String,Object> unsetPrefItemsPerVirtualPage(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefItemsPerVirtualPage, "");
        return attrs;
    }

    /**
     * Retention period of messages in the Junk folder. 0 means that all
     * messages will be retained. This user-modifiable attribute works in
     * conjunction with zmailMailSpamLifetime, which is admin-modifiable.
     * The shorter duration is used. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * <p>Use getPrefJunkLifetimeAsString to access value as a string.
     *
     * @see #getPrefJunkLifetimeAsString()
     *
     * @return zmailPrefJunkLifetime in millseconds, or 0 (0)  if unset
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=540)
    public long getPrefJunkLifetime() {
        return getTimeInterval(Provisioning.A_zmailPrefJunkLifetime, 0L);
    }

    /**
     * Retention period of messages in the Junk folder. 0 means that all
     * messages will be retained. This user-modifiable attribute works in
     * conjunction with zmailMailSpamLifetime, which is admin-modifiable.
     * The shorter duration is used. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @return zmailPrefJunkLifetime, or "0" if unset
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=540)
    public String getPrefJunkLifetimeAsString() {
        return getAttr(Provisioning.A_zmailPrefJunkLifetime, "0");
    }

    /**
     * Retention period of messages in the Junk folder. 0 means that all
     * messages will be retained. This user-modifiable attribute works in
     * conjunction with zmailMailSpamLifetime, which is admin-modifiable.
     * The shorter duration is used. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param zmailPrefJunkLifetime new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=540)
    public void setPrefJunkLifetime(String zmailPrefJunkLifetime) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefJunkLifetime, zmailPrefJunkLifetime);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Retention period of messages in the Junk folder. 0 means that all
     * messages will be retained. This user-modifiable attribute works in
     * conjunction with zmailMailSpamLifetime, which is admin-modifiable.
     * The shorter duration is used. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param zmailPrefJunkLifetime new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=540)
    public Map<String,Object> setPrefJunkLifetime(String zmailPrefJunkLifetime, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefJunkLifetime, zmailPrefJunkLifetime);
        return attrs;
    }

    /**
     * Retention period of messages in the Junk folder. 0 means that all
     * messages will be retained. This user-modifiable attribute works in
     * conjunction with zmailMailSpamLifetime, which is admin-modifiable.
     * The shorter duration is used. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=540)
    public void unsetPrefJunkLifetime() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefJunkLifetime, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Retention period of messages in the Junk folder. 0 means that all
     * messages will be retained. This user-modifiable attribute works in
     * conjunction with zmailMailSpamLifetime, which is admin-modifiable.
     * The shorter duration is used. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=540)
    public Map<String,Object> unsetPrefJunkLifetime(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefJunkLifetime, "");
        return attrs;
    }

    /**
     * list view columns in web client
     *
     * @return zmailPrefListViewColumns, or null if unset
     *
     * @since ZCS 5.0.9
     */
    @ZAttr(id=694)
    public String getPrefListViewColumns() {
        return getAttr(Provisioning.A_zmailPrefListViewColumns, null);
    }

    /**
     * list view columns in web client
     *
     * @param zmailPrefListViewColumns new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.9
     */
    @ZAttr(id=694)
    public void setPrefListViewColumns(String zmailPrefListViewColumns) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefListViewColumns, zmailPrefListViewColumns);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * list view columns in web client
     *
     * @param zmailPrefListViewColumns new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.9
     */
    @ZAttr(id=694)
    public Map<String,Object> setPrefListViewColumns(String zmailPrefListViewColumns, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefListViewColumns, zmailPrefListViewColumns);
        return attrs;
    }

    /**
     * list view columns in web client
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.9
     */
    @ZAttr(id=694)
    public void unsetPrefListViewColumns() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefListViewColumns, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * list view columns in web client
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.9
     */
    @ZAttr(id=694)
    public Map<String,Object> unsetPrefListViewColumns(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefListViewColumns, "");
        return attrs;
    }

    /**
     * user locale preference, e.g. en_US Whenever the server looks for the
     * user locale, it will first look for zmailPrefLocale, if it is not set
     * then it will fallback to the current mechanism of looking for
     * zmailLocale in the various places for a user. zmailLocale is the non
     * end-user attribute that specifies which locale an object defaults to,
     * it is not an end-user setting.
     *
     * @return zmailPrefLocale, or null if unset
     */
    @ZAttr(id=442)
    public String getPrefLocale() {
        return getAttr(Provisioning.A_zmailPrefLocale, null);
    }

    /**
     * user locale preference, e.g. en_US Whenever the server looks for the
     * user locale, it will first look for zmailPrefLocale, if it is not set
     * then it will fallback to the current mechanism of looking for
     * zmailLocale in the various places for a user. zmailLocale is the non
     * end-user attribute that specifies which locale an object defaults to,
     * it is not an end-user setting.
     *
     * @param zmailPrefLocale new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=442)
    public void setPrefLocale(String zmailPrefLocale) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefLocale, zmailPrefLocale);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * user locale preference, e.g. en_US Whenever the server looks for the
     * user locale, it will first look for zmailPrefLocale, if it is not set
     * then it will fallback to the current mechanism of looking for
     * zmailLocale in the various places for a user. zmailLocale is the non
     * end-user attribute that specifies which locale an object defaults to,
     * it is not an end-user setting.
     *
     * @param zmailPrefLocale new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=442)
    public Map<String,Object> setPrefLocale(String zmailPrefLocale, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefLocale, zmailPrefLocale);
        return attrs;
    }

    /**
     * user locale preference, e.g. en_US Whenever the server looks for the
     * user locale, it will first look for zmailPrefLocale, if it is not set
     * then it will fallback to the current mechanism of looking for
     * zmailLocale in the various places for a user. zmailLocale is the non
     * end-user attribute that specifies which locale an object defaults to,
     * it is not an end-user setting.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=442)
    public void unsetPrefLocale() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefLocale, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * user locale preference, e.g. en_US Whenever the server looks for the
     * user locale, it will first look for zmailPrefLocale, if it is not set
     * then it will fallback to the current mechanism of looking for
     * zmailLocale in the various places for a user. zmailLocale is the non
     * end-user attribute that specifies which locale an object defaults to,
     * it is not an end-user setting.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=442)
    public Map<String,Object> unsetPrefLocale(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefLocale, "");
        return attrs;
    }

    /**
     * Default Charset for mail composing and parsing text
     *
     * @return zmailPrefMailDefaultCharset, or null if unset
     */
    @ZAttr(id=469)
    public String getPrefMailDefaultCharset() {
        return getAttr(Provisioning.A_zmailPrefMailDefaultCharset, null);
    }

    /**
     * Default Charset for mail composing and parsing text
     *
     * @param zmailPrefMailDefaultCharset new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=469)
    public void setPrefMailDefaultCharset(String zmailPrefMailDefaultCharset) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailDefaultCharset, zmailPrefMailDefaultCharset);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Default Charset for mail composing and parsing text
     *
     * @param zmailPrefMailDefaultCharset new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=469)
    public Map<String,Object> setPrefMailDefaultCharset(String zmailPrefMailDefaultCharset, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailDefaultCharset, zmailPrefMailDefaultCharset);
        return attrs;
    }

    /**
     * Default Charset for mail composing and parsing text
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=469)
    public void unsetPrefMailDefaultCharset() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailDefaultCharset, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Default Charset for mail composing and parsing text
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=469)
    public Map<String,Object> unsetPrefMailDefaultCharset(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailDefaultCharset, "");
        return attrs;
    }

    /**
     * Flash icon when a new email arrives
     *
     * @return zmailPrefMailFlashIcon, or false if unset
     *
     * @since ZCS 5.0.7
     */
    @ZAttr(id=681)
    public boolean isPrefMailFlashIcon() {
        return getBooleanAttr(Provisioning.A_zmailPrefMailFlashIcon, false);
    }

    /**
     * Flash icon when a new email arrives
     *
     * @param zmailPrefMailFlashIcon new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.7
     */
    @ZAttr(id=681)
    public void setPrefMailFlashIcon(boolean zmailPrefMailFlashIcon) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailFlashIcon, zmailPrefMailFlashIcon ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Flash icon when a new email arrives
     *
     * @param zmailPrefMailFlashIcon new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.7
     */
    @ZAttr(id=681)
    public Map<String,Object> setPrefMailFlashIcon(boolean zmailPrefMailFlashIcon, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailFlashIcon, zmailPrefMailFlashIcon ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * Flash icon when a new email arrives
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.7
     */
    @ZAttr(id=681)
    public void unsetPrefMailFlashIcon() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailFlashIcon, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Flash icon when a new email arrives
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.7
     */
    @ZAttr(id=681)
    public Map<String,Object> unsetPrefMailFlashIcon(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailFlashIcon, "");
        return attrs;
    }

    /**
     * Flash title bar when a new email arrives
     *
     * @return zmailPrefMailFlashTitle, or false if unset
     *
     * @since ZCS 5.0.7
     */
    @ZAttr(id=680)
    public boolean isPrefMailFlashTitle() {
        return getBooleanAttr(Provisioning.A_zmailPrefMailFlashTitle, false);
    }

    /**
     * Flash title bar when a new email arrives
     *
     * @param zmailPrefMailFlashTitle new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.7
     */
    @ZAttr(id=680)
    public void setPrefMailFlashTitle(boolean zmailPrefMailFlashTitle) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailFlashTitle, zmailPrefMailFlashTitle ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Flash title bar when a new email arrives
     *
     * @param zmailPrefMailFlashTitle new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.7
     */
    @ZAttr(id=680)
    public Map<String,Object> setPrefMailFlashTitle(boolean zmailPrefMailFlashTitle, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailFlashTitle, zmailPrefMailFlashTitle ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * Flash title bar when a new email arrives
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.7
     */
    @ZAttr(id=680)
    public void unsetPrefMailFlashTitle() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailFlashTitle, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Flash title bar when a new email arrives
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.7
     */
    @ZAttr(id=680)
    public Map<String,Object> unsetPrefMailFlashTitle(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailFlashTitle, "");
        return attrs;
    }

    /**
     * a list of comma separated folder ids of all folders used to count for
     * showing a new message indicator icon for the account, useful in UIs
     * managing multiple accounts: desktop and family mailboxes.
     *
     * @return zmailPrefMailFoldersCheckedForNewMsgIndicator, or null if unset
     *
     * @since ZCS 6.0.5
     */
    @ZAttr(id=1072)
    public String getPrefMailFoldersCheckedForNewMsgIndicator() {
        return getAttr(Provisioning.A_zmailPrefMailFoldersCheckedForNewMsgIndicator, null);
    }

    /**
     * a list of comma separated folder ids of all folders used to count for
     * showing a new message indicator icon for the account, useful in UIs
     * managing multiple accounts: desktop and family mailboxes.
     *
     * @param zmailPrefMailFoldersCheckedForNewMsgIndicator new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.5
     */
    @ZAttr(id=1072)
    public void setPrefMailFoldersCheckedForNewMsgIndicator(String zmailPrefMailFoldersCheckedForNewMsgIndicator) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailFoldersCheckedForNewMsgIndicator, zmailPrefMailFoldersCheckedForNewMsgIndicator);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * a list of comma separated folder ids of all folders used to count for
     * showing a new message indicator icon for the account, useful in UIs
     * managing multiple accounts: desktop and family mailboxes.
     *
     * @param zmailPrefMailFoldersCheckedForNewMsgIndicator new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.5
     */
    @ZAttr(id=1072)
    public Map<String,Object> setPrefMailFoldersCheckedForNewMsgIndicator(String zmailPrefMailFoldersCheckedForNewMsgIndicator, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailFoldersCheckedForNewMsgIndicator, zmailPrefMailFoldersCheckedForNewMsgIndicator);
        return attrs;
    }

    /**
     * a list of comma separated folder ids of all folders used to count for
     * showing a new message indicator icon for the account, useful in UIs
     * managing multiple accounts: desktop and family mailboxes.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.5
     */
    @ZAttr(id=1072)
    public void unsetPrefMailFoldersCheckedForNewMsgIndicator() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailFoldersCheckedForNewMsgIndicator, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * a list of comma separated folder ids of all folders used to count for
     * showing a new message indicator icon for the account, useful in UIs
     * managing multiple accounts: desktop and family mailboxes.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.5
     */
    @ZAttr(id=1072)
    public Map<String,Object> unsetPrefMailFoldersCheckedForNewMsgIndicator(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailFoldersCheckedForNewMsgIndicator, "");
        return attrs;
    }

    /**
     * initial search done by dhtml client
     *
     * @return zmailPrefMailInitialSearch, or "in:inbox" if unset
     */
    @ZAttr(id=102)
    public String getPrefMailInitialSearch() {
        return getAttr(Provisioning.A_zmailPrefMailInitialSearch, "in:inbox");
    }

    /**
     * initial search done by dhtml client
     *
     * @param zmailPrefMailInitialSearch new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=102)
    public void setPrefMailInitialSearch(String zmailPrefMailInitialSearch) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailInitialSearch, zmailPrefMailInitialSearch);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * initial search done by dhtml client
     *
     * @param zmailPrefMailInitialSearch new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=102)
    public Map<String,Object> setPrefMailInitialSearch(String zmailPrefMailInitialSearch, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailInitialSearch, zmailPrefMailInitialSearch);
        return attrs;
    }

    /**
     * initial search done by dhtml client
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=102)
    public void unsetPrefMailInitialSearch() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailInitialSearch, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * initial search done by dhtml client
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=102)
    public Map<String,Object> unsetPrefMailInitialSearch(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailInitialSearch, "");
        return attrs;
    }

    /**
     * number of messages/conversations per page
     *
     * @return zmailPrefMailItemsPerPage, or 25 if unset
     */
    @ZAttr(id=57)
    public int getPrefMailItemsPerPage() {
        return getIntAttr(Provisioning.A_zmailPrefMailItemsPerPage, 25);
    }

    /**
     * number of messages/conversations per page
     *
     * @param zmailPrefMailItemsPerPage new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=57)
    public void setPrefMailItemsPerPage(int zmailPrefMailItemsPerPage) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailItemsPerPage, Integer.toString(zmailPrefMailItemsPerPage));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * number of messages/conversations per page
     *
     * @param zmailPrefMailItemsPerPage new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=57)
    public Map<String,Object> setPrefMailItemsPerPage(int zmailPrefMailItemsPerPage, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailItemsPerPage, Integer.toString(zmailPrefMailItemsPerPage));
        return attrs;
    }

    /**
     * number of messages/conversations per page
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=57)
    public void unsetPrefMailItemsPerPage() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailItemsPerPage, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * number of messages/conversations per page
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=57)
    public Map<String,Object> unsetPrefMailItemsPerPage(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailItemsPerPage, "");
        return attrs;
    }

    /**
     * interval at which the web client polls the server for new messages.
     * Must be in valid duration format: {digits}{time-unit}. digits: 0-9,
     * time-unit: [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days,
     * ms - milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * <p>Use getPrefMailPollingIntervalAsString to access value as a string.
     *
     * @see #getPrefMailPollingIntervalAsString()
     *
     * @return zmailPrefMailPollingInterval in millseconds, or 300000 (5m)  if unset
     */
    @ZAttr(id=111)
    public long getPrefMailPollingInterval() {
        return getTimeInterval(Provisioning.A_zmailPrefMailPollingInterval, 300000L);
    }

    /**
     * interval at which the web client polls the server for new messages.
     * Must be in valid duration format: {digits}{time-unit}. digits: 0-9,
     * time-unit: [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days,
     * ms - milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @return zmailPrefMailPollingInterval, or "5m" if unset
     */
    @ZAttr(id=111)
    public String getPrefMailPollingIntervalAsString() {
        return getAttr(Provisioning.A_zmailPrefMailPollingInterval, "5m");
    }

    /**
     * interval at which the web client polls the server for new messages.
     * Must be in valid duration format: {digits}{time-unit}. digits: 0-9,
     * time-unit: [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days,
     * ms - milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @param zmailPrefMailPollingInterval new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=111)
    public void setPrefMailPollingInterval(String zmailPrefMailPollingInterval) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailPollingInterval, zmailPrefMailPollingInterval);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * interval at which the web client polls the server for new messages.
     * Must be in valid duration format: {digits}{time-unit}. digits: 0-9,
     * time-unit: [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days,
     * ms - milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @param zmailPrefMailPollingInterval new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=111)
    public Map<String,Object> setPrefMailPollingInterval(String zmailPrefMailPollingInterval, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailPollingInterval, zmailPrefMailPollingInterval);
        return attrs;
    }

    /**
     * interval at which the web client polls the server for new messages.
     * Must be in valid duration format: {digits}{time-unit}. digits: 0-9,
     * time-unit: [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days,
     * ms - milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=111)
    public void unsetPrefMailPollingInterval() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailPollingInterval, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * interval at which the web client polls the server for new messages.
     * Must be in valid duration format: {digits}{time-unit}. digits: 0-9,
     * time-unit: [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days,
     * ms - milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=111)
    public Map<String,Object> unsetPrefMailPollingInterval(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailPollingInterval, "");
        return attrs;
    }

    /**
     * whether web UI should always request read receipts for outgoing
     * messages
     *
     * @return zmailPrefMailRequestReadReceipts, or false if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1217)
    public boolean isPrefMailRequestReadReceipts() {
        return getBooleanAttr(Provisioning.A_zmailPrefMailRequestReadReceipts, false);
    }

    /**
     * whether web UI should always request read receipts for outgoing
     * messages
     *
     * @param zmailPrefMailRequestReadReceipts new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1217)
    public void setPrefMailRequestReadReceipts(boolean zmailPrefMailRequestReadReceipts) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailRequestReadReceipts, zmailPrefMailRequestReadReceipts ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether web UI should always request read receipts for outgoing
     * messages
     *
     * @param zmailPrefMailRequestReadReceipts new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1217)
    public Map<String,Object> setPrefMailRequestReadReceipts(boolean zmailPrefMailRequestReadReceipts, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailRequestReadReceipts, zmailPrefMailRequestReadReceipts ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether web UI should always request read receipts for outgoing
     * messages
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1217)
    public void unsetPrefMailRequestReadReceipts() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailRequestReadReceipts, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether web UI should always request read receipts for outgoing
     * messages
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1217)
    public Map<String,Object> unsetPrefMailRequestReadReceipts(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailRequestReadReceipts, "");
        return attrs;
    }

    /**
     * After deleting a message in list, which message should be selected
     *
     * <p>Valid values: [previous, adaptive, next]
     *
     * @return zmailPrefMailSelectAfterDelete, or ZAttrProvisioning.PrefMailSelectAfterDelete.next if unset and/or has invalid value
     *
     * @since ZCS 6.0.0_GA
     */
    @ZAttr(id=1046)
    public ZAttrProvisioning.PrefMailSelectAfterDelete getPrefMailSelectAfterDelete() {
        try { String v = getAttr(Provisioning.A_zmailPrefMailSelectAfterDelete); return v == null ? ZAttrProvisioning.PrefMailSelectAfterDelete.next : ZAttrProvisioning.PrefMailSelectAfterDelete.fromString(v); } catch(org.zmail.common.service.ServiceException e) { return ZAttrProvisioning.PrefMailSelectAfterDelete.next; }
    }

    /**
     * After deleting a message in list, which message should be selected
     *
     * <p>Valid values: [previous, adaptive, next]
     *
     * @return zmailPrefMailSelectAfterDelete, or "next" if unset
     *
     * @since ZCS 6.0.0_GA
     */
    @ZAttr(id=1046)
    public String getPrefMailSelectAfterDeleteAsString() {
        return getAttr(Provisioning.A_zmailPrefMailSelectAfterDelete, "next");
    }

    /**
     * After deleting a message in list, which message should be selected
     *
     * <p>Valid values: [previous, adaptive, next]
     *
     * @param zmailPrefMailSelectAfterDelete new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_GA
     */
    @ZAttr(id=1046)
    public void setPrefMailSelectAfterDelete(ZAttrProvisioning.PrefMailSelectAfterDelete zmailPrefMailSelectAfterDelete) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailSelectAfterDelete, zmailPrefMailSelectAfterDelete.toString());
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * After deleting a message in list, which message should be selected
     *
     * <p>Valid values: [previous, adaptive, next]
     *
     * @param zmailPrefMailSelectAfterDelete new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_GA
     */
    @ZAttr(id=1046)
    public Map<String,Object> setPrefMailSelectAfterDelete(ZAttrProvisioning.PrefMailSelectAfterDelete zmailPrefMailSelectAfterDelete, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailSelectAfterDelete, zmailPrefMailSelectAfterDelete.toString());
        return attrs;
    }

    /**
     * After deleting a message in list, which message should be selected
     *
     * <p>Valid values: [previous, adaptive, next]
     *
     * @param zmailPrefMailSelectAfterDelete new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_GA
     */
    @ZAttr(id=1046)
    public void setPrefMailSelectAfterDeleteAsString(String zmailPrefMailSelectAfterDelete) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailSelectAfterDelete, zmailPrefMailSelectAfterDelete);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * After deleting a message in list, which message should be selected
     *
     * <p>Valid values: [previous, adaptive, next]
     *
     * @param zmailPrefMailSelectAfterDelete new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_GA
     */
    @ZAttr(id=1046)
    public Map<String,Object> setPrefMailSelectAfterDeleteAsString(String zmailPrefMailSelectAfterDelete, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailSelectAfterDelete, zmailPrefMailSelectAfterDelete);
        return attrs;
    }

    /**
     * After deleting a message in list, which message should be selected
     *
     * <p>Valid values: [previous, adaptive, next]
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_GA
     */
    @ZAttr(id=1046)
    public void unsetPrefMailSelectAfterDelete() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailSelectAfterDelete, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * After deleting a message in list, which message should be selected
     *
     * <p>Valid values: [previous, adaptive, next]
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_GA
     */
    @ZAttr(id=1046)
    public Map<String,Object> unsetPrefMailSelectAfterDelete(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailSelectAfterDelete, "");
        return attrs;
    }

    /**
     * whether to send read receipt
     *
     * <p>Valid values: [always, never, prompt]
     *
     * @return zmailPrefMailSendReadReceipts, or ZAttrProvisioning.PrefMailSendReadReceipts.never if unset and/or has invalid value
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=822)
    public ZAttrProvisioning.PrefMailSendReadReceipts getPrefMailSendReadReceipts() {
        try { String v = getAttr(Provisioning.A_zmailPrefMailSendReadReceipts); return v == null ? ZAttrProvisioning.PrefMailSendReadReceipts.never : ZAttrProvisioning.PrefMailSendReadReceipts.fromString(v); } catch(org.zmail.common.service.ServiceException e) { return ZAttrProvisioning.PrefMailSendReadReceipts.never; }
    }

    /**
     * whether to send read receipt
     *
     * <p>Valid values: [always, never, prompt]
     *
     * @return zmailPrefMailSendReadReceipts, or "never" if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=822)
    public String getPrefMailSendReadReceiptsAsString() {
        return getAttr(Provisioning.A_zmailPrefMailSendReadReceipts, "never");
    }

    /**
     * whether to send read receipt
     *
     * <p>Valid values: [always, never, prompt]
     *
     * @param zmailPrefMailSendReadReceipts new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=822)
    public void setPrefMailSendReadReceipts(ZAttrProvisioning.PrefMailSendReadReceipts zmailPrefMailSendReadReceipts) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailSendReadReceipts, zmailPrefMailSendReadReceipts.toString());
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to send read receipt
     *
     * <p>Valid values: [always, never, prompt]
     *
     * @param zmailPrefMailSendReadReceipts new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=822)
    public Map<String,Object> setPrefMailSendReadReceipts(ZAttrProvisioning.PrefMailSendReadReceipts zmailPrefMailSendReadReceipts, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailSendReadReceipts, zmailPrefMailSendReadReceipts.toString());
        return attrs;
    }

    /**
     * whether to send read receipt
     *
     * <p>Valid values: [always, never, prompt]
     *
     * @param zmailPrefMailSendReadReceipts new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=822)
    public void setPrefMailSendReadReceiptsAsString(String zmailPrefMailSendReadReceipts) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailSendReadReceipts, zmailPrefMailSendReadReceipts);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to send read receipt
     *
     * <p>Valid values: [always, never, prompt]
     *
     * @param zmailPrefMailSendReadReceipts new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=822)
    public Map<String,Object> setPrefMailSendReadReceiptsAsString(String zmailPrefMailSendReadReceipts, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailSendReadReceipts, zmailPrefMailSendReadReceipts);
        return attrs;
    }

    /**
     * whether to send read receipt
     *
     * <p>Valid values: [always, never, prompt]
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=822)
    public void unsetPrefMailSendReadReceipts() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailSendReadReceipts, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to send read receipt
     *
     * <p>Valid values: [always, never, prompt]
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=822)
    public Map<String,Object> unsetPrefMailSendReadReceipts(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailSendReadReceipts, "");
        return attrs;
    }

    /**
     * mail signature style outlook|internet (deprecatedSince 5.0 in
     * identity)
     *
     * <p>Valid values: [outlook, internet]
     *
     * @return zmailPrefMailSignatureStyle, or ZAttrProvisioning.PrefMailSignatureStyle.outlook if unset and/or has invalid value
     */
    @ZAttr(id=156)
    public ZAttrProvisioning.PrefMailSignatureStyle getPrefMailSignatureStyle() {
        try { String v = getAttr(Provisioning.A_zmailPrefMailSignatureStyle); return v == null ? ZAttrProvisioning.PrefMailSignatureStyle.outlook : ZAttrProvisioning.PrefMailSignatureStyle.fromString(v); } catch(org.zmail.common.service.ServiceException e) { return ZAttrProvisioning.PrefMailSignatureStyle.outlook; }
    }

    /**
     * mail signature style outlook|internet (deprecatedSince 5.0 in
     * identity)
     *
     * <p>Valid values: [outlook, internet]
     *
     * @return zmailPrefMailSignatureStyle, or "outlook" if unset
     */
    @ZAttr(id=156)
    public String getPrefMailSignatureStyleAsString() {
        return getAttr(Provisioning.A_zmailPrefMailSignatureStyle, "outlook");
    }

    /**
     * mail signature style outlook|internet (deprecatedSince 5.0 in
     * identity)
     *
     * <p>Valid values: [outlook, internet]
     *
     * @param zmailPrefMailSignatureStyle new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=156)
    public void setPrefMailSignatureStyle(ZAttrProvisioning.PrefMailSignatureStyle zmailPrefMailSignatureStyle) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailSignatureStyle, zmailPrefMailSignatureStyle.toString());
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * mail signature style outlook|internet (deprecatedSince 5.0 in
     * identity)
     *
     * <p>Valid values: [outlook, internet]
     *
     * @param zmailPrefMailSignatureStyle new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=156)
    public Map<String,Object> setPrefMailSignatureStyle(ZAttrProvisioning.PrefMailSignatureStyle zmailPrefMailSignatureStyle, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailSignatureStyle, zmailPrefMailSignatureStyle.toString());
        return attrs;
    }

    /**
     * mail signature style outlook|internet (deprecatedSince 5.0 in
     * identity)
     *
     * <p>Valid values: [outlook, internet]
     *
     * @param zmailPrefMailSignatureStyle new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=156)
    public void setPrefMailSignatureStyleAsString(String zmailPrefMailSignatureStyle) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailSignatureStyle, zmailPrefMailSignatureStyle);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * mail signature style outlook|internet (deprecatedSince 5.0 in
     * identity)
     *
     * <p>Valid values: [outlook, internet]
     *
     * @param zmailPrefMailSignatureStyle new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=156)
    public Map<String,Object> setPrefMailSignatureStyleAsString(String zmailPrefMailSignatureStyle, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailSignatureStyle, zmailPrefMailSignatureStyle);
        return attrs;
    }

    /**
     * mail signature style outlook|internet (deprecatedSince 5.0 in
     * identity)
     *
     * <p>Valid values: [outlook, internet]
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=156)
    public void unsetPrefMailSignatureStyle() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailSignatureStyle, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * mail signature style outlook|internet (deprecatedSince 5.0 in
     * identity)
     *
     * <p>Valid values: [outlook, internet]
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=156)
    public Map<String,Object> unsetPrefMailSignatureStyle(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailSignatureStyle, "");
        return attrs;
    }

    /**
     * whether audible alert is enabled when a new email arrives
     *
     * @return zmailPrefMailSoundsEnabled, or false if unset
     *
     * @since ZCS 5.0.7
     */
    @ZAttr(id=666)
    public boolean isPrefMailSoundsEnabled() {
        return getBooleanAttr(Provisioning.A_zmailPrefMailSoundsEnabled, false);
    }

    /**
     * whether audible alert is enabled when a new email arrives
     *
     * @param zmailPrefMailSoundsEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.7
     */
    @ZAttr(id=666)
    public void setPrefMailSoundsEnabled(boolean zmailPrefMailSoundsEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailSoundsEnabled, zmailPrefMailSoundsEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether audible alert is enabled when a new email arrives
     *
     * @param zmailPrefMailSoundsEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.7
     */
    @ZAttr(id=666)
    public Map<String,Object> setPrefMailSoundsEnabled(boolean zmailPrefMailSoundsEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailSoundsEnabled, zmailPrefMailSoundsEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether audible alert is enabled when a new email arrives
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.7
     */
    @ZAttr(id=666)
    public void unsetPrefMailSoundsEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailSoundsEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether audible alert is enabled when a new email arrives
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.7
     */
    @ZAttr(id=666)
    public Map<String,Object> unsetPrefMailSoundsEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailSoundsEnabled, "");
        return attrs;
    }

    /**
     * whether to enable toaster notification for new mail
     *
     * @return zmailPrefMailToasterEnabled, or false if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=812)
    public boolean isPrefMailToasterEnabled() {
        return getBooleanAttr(Provisioning.A_zmailPrefMailToasterEnabled, false);
    }

    /**
     * whether to enable toaster notification for new mail
     *
     * @param zmailPrefMailToasterEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=812)
    public void setPrefMailToasterEnabled(boolean zmailPrefMailToasterEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailToasterEnabled, zmailPrefMailToasterEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to enable toaster notification for new mail
     *
     * @param zmailPrefMailToasterEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=812)
    public Map<String,Object> setPrefMailToasterEnabled(boolean zmailPrefMailToasterEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailToasterEnabled, zmailPrefMailToasterEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether to enable toaster notification for new mail
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=812)
    public void unsetPrefMailToasterEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailToasterEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to enable toaster notification for new mail
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=812)
    public Map<String,Object> unsetPrefMailToasterEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailToasterEnabled, "");
        return attrs;
    }

    /**
     * Trusted sender email addresses or domains. External images in emails
     * sent by trusted senders are automatically loaded in the message view.
     *
     * @return zmailPrefMailTrustedSenderList, or empty array if unset
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1138)
    public String[] getPrefMailTrustedSenderList() {
        return getMultiAttr(Provisioning.A_zmailPrefMailTrustedSenderList);
    }

    /**
     * Trusted sender email addresses or domains. External images in emails
     * sent by trusted senders are automatically loaded in the message view.
     *
     * @param zmailPrefMailTrustedSenderList new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1138)
    public void setPrefMailTrustedSenderList(String[] zmailPrefMailTrustedSenderList) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailTrustedSenderList, zmailPrefMailTrustedSenderList);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Trusted sender email addresses or domains. External images in emails
     * sent by trusted senders are automatically loaded in the message view.
     *
     * @param zmailPrefMailTrustedSenderList new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1138)
    public Map<String,Object> setPrefMailTrustedSenderList(String[] zmailPrefMailTrustedSenderList, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailTrustedSenderList, zmailPrefMailTrustedSenderList);
        return attrs;
    }

    /**
     * Trusted sender email addresses or domains. External images in emails
     * sent by trusted senders are automatically loaded in the message view.
     *
     * @param zmailPrefMailTrustedSenderList new to add to existing values
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1138)
    public void addPrefMailTrustedSenderList(String zmailPrefMailTrustedSenderList) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "+" + Provisioning.A_zmailPrefMailTrustedSenderList, zmailPrefMailTrustedSenderList);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Trusted sender email addresses or domains. External images in emails
     * sent by trusted senders are automatically loaded in the message view.
     *
     * @param zmailPrefMailTrustedSenderList new to add to existing values
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1138)
    public Map<String,Object> addPrefMailTrustedSenderList(String zmailPrefMailTrustedSenderList, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "+" + Provisioning.A_zmailPrefMailTrustedSenderList, zmailPrefMailTrustedSenderList);
        return attrs;
    }

    /**
     * Trusted sender email addresses or domains. External images in emails
     * sent by trusted senders are automatically loaded in the message view.
     *
     * @param zmailPrefMailTrustedSenderList existing value to remove
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1138)
    public void removePrefMailTrustedSenderList(String zmailPrefMailTrustedSenderList) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "-" + Provisioning.A_zmailPrefMailTrustedSenderList, zmailPrefMailTrustedSenderList);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Trusted sender email addresses or domains. External images in emails
     * sent by trusted senders are automatically loaded in the message view.
     *
     * @param zmailPrefMailTrustedSenderList existing value to remove
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1138)
    public Map<String,Object> removePrefMailTrustedSenderList(String zmailPrefMailTrustedSenderList, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "-" + Provisioning.A_zmailPrefMailTrustedSenderList, zmailPrefMailTrustedSenderList);
        return attrs;
    }

    /**
     * Trusted sender email addresses or domains. External images in emails
     * sent by trusted senders are automatically loaded in the message view.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1138)
    public void unsetPrefMailTrustedSenderList() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailTrustedSenderList, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Trusted sender email addresses or domains. External images in emails
     * sent by trusted senders are automatically loaded in the message view.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1138)
    public Map<String,Object> unsetPrefMailTrustedSenderList(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMailTrustedSenderList, "");
        return attrs;
    }

    /**
     * whether mandatory spell check is enabled
     *
     * @return zmailPrefMandatorySpellCheckEnabled, or false if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=749)
    public boolean isPrefMandatorySpellCheckEnabled() {
        return getBooleanAttr(Provisioning.A_zmailPrefMandatorySpellCheckEnabled, false);
    }

    /**
     * whether mandatory spell check is enabled
     *
     * @param zmailPrefMandatorySpellCheckEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=749)
    public void setPrefMandatorySpellCheckEnabled(boolean zmailPrefMandatorySpellCheckEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMandatorySpellCheckEnabled, zmailPrefMandatorySpellCheckEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether mandatory spell check is enabled
     *
     * @param zmailPrefMandatorySpellCheckEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=749)
    public Map<String,Object> setPrefMandatorySpellCheckEnabled(boolean zmailPrefMandatorySpellCheckEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMandatorySpellCheckEnabled, zmailPrefMandatorySpellCheckEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether mandatory spell check is enabled
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=749)
    public void unsetPrefMandatorySpellCheckEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMandatorySpellCheckEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether mandatory spell check is enabled
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=749)
    public Map<String,Object> unsetPrefMandatorySpellCheckEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMandatorySpellCheckEnabled, "");
        return attrs;
    }

    /**
     * whether and mark a message as read -1: Do not mark read 0: Mark read
     * 1..n: Mark read after this many seconds
     *
     * @return zmailPrefMarkMsgRead, or 0 if unset
     *
     * @since ZCS 5.0.6
     */
    @ZAttr(id=650)
    public int getPrefMarkMsgRead() {
        return getIntAttr(Provisioning.A_zmailPrefMarkMsgRead, 0);
    }

    /**
     * whether and mark a message as read -1: Do not mark read 0: Mark read
     * 1..n: Mark read after this many seconds
     *
     * @param zmailPrefMarkMsgRead new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.6
     */
    @ZAttr(id=650)
    public void setPrefMarkMsgRead(int zmailPrefMarkMsgRead) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMarkMsgRead, Integer.toString(zmailPrefMarkMsgRead));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether and mark a message as read -1: Do not mark read 0: Mark read
     * 1..n: Mark read after this many seconds
     *
     * @param zmailPrefMarkMsgRead new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.6
     */
    @ZAttr(id=650)
    public Map<String,Object> setPrefMarkMsgRead(int zmailPrefMarkMsgRead, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMarkMsgRead, Integer.toString(zmailPrefMarkMsgRead));
        return attrs;
    }

    /**
     * whether and mark a message as read -1: Do not mark read 0: Mark read
     * 1..n: Mark read after this many seconds
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.6
     */
    @ZAttr(id=650)
    public void unsetPrefMarkMsgRead() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMarkMsgRead, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether and mark a message as read -1: Do not mark read 0: Mark read
     * 1..n: Mark read after this many seconds
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.6
     */
    @ZAttr(id=650)
    public Map<String,Object> unsetPrefMarkMsgRead(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMarkMsgRead, "");
        return attrs;
    }

    /**
     * Account-level switch that enables message deduping. See
     * zmailMessageIdDedupeCacheSize for more details.
     *
     * @return zmailPrefMessageIdDedupingEnabled, or true if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1198)
    public boolean isPrefMessageIdDedupingEnabled() {
        return getBooleanAttr(Provisioning.A_zmailPrefMessageIdDedupingEnabled, true);
    }

    /**
     * Account-level switch that enables message deduping. See
     * zmailMessageIdDedupeCacheSize for more details.
     *
     * @param zmailPrefMessageIdDedupingEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1198)
    public void setPrefMessageIdDedupingEnabled(boolean zmailPrefMessageIdDedupingEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMessageIdDedupingEnabled, zmailPrefMessageIdDedupingEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Account-level switch that enables message deduping. See
     * zmailMessageIdDedupeCacheSize for more details.
     *
     * @param zmailPrefMessageIdDedupingEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1198)
    public Map<String,Object> setPrefMessageIdDedupingEnabled(boolean zmailPrefMessageIdDedupingEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMessageIdDedupingEnabled, zmailPrefMessageIdDedupingEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * Account-level switch that enables message deduping. See
     * zmailMessageIdDedupeCacheSize for more details.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1198)
    public void unsetPrefMessageIdDedupingEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMessageIdDedupingEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Account-level switch that enables message deduping. See
     * zmailMessageIdDedupeCacheSize for more details.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1198)
    public Map<String,Object> unsetPrefMessageIdDedupingEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMessageIdDedupingEnabled, "");
        return attrs;
    }

    /**
     * whether client prefers text/html or text/plain
     *
     * @return zmailPrefMessageViewHtmlPreferred, or true if unset
     */
    @ZAttr(id=145)
    public boolean isPrefMessageViewHtmlPreferred() {
        return getBooleanAttr(Provisioning.A_zmailPrefMessageViewHtmlPreferred, true);
    }

    /**
     * whether client prefers text/html or text/plain
     *
     * @param zmailPrefMessageViewHtmlPreferred new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=145)
    public void setPrefMessageViewHtmlPreferred(boolean zmailPrefMessageViewHtmlPreferred) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMessageViewHtmlPreferred, zmailPrefMessageViewHtmlPreferred ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether client prefers text/html or text/plain
     *
     * @param zmailPrefMessageViewHtmlPreferred new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=145)
    public Map<String,Object> setPrefMessageViewHtmlPreferred(boolean zmailPrefMessageViewHtmlPreferred, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMessageViewHtmlPreferred, zmailPrefMessageViewHtmlPreferred ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether client prefers text/html or text/plain
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=145)
    public void unsetPrefMessageViewHtmlPreferred() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMessageViewHtmlPreferred, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether client prefers text/html or text/plain
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=145)
    public Map<String,Object> unsetPrefMessageViewHtmlPreferred(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefMessageViewHtmlPreferred, "");
        return attrs;
    }

    /**
     * whether or not the client opens a new msg/conv in a new window (via
     * dbl-click)
     *
     * @return zmailPrefOpenMailInNewWindow, or false if unset
     */
    @ZAttr(id=500)
    public boolean isPrefOpenMailInNewWindow() {
        return getBooleanAttr(Provisioning.A_zmailPrefOpenMailInNewWindow, false);
    }

    /**
     * whether or not the client opens a new msg/conv in a new window (via
     * dbl-click)
     *
     * @param zmailPrefOpenMailInNewWindow new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=500)
    public void setPrefOpenMailInNewWindow(boolean zmailPrefOpenMailInNewWindow) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefOpenMailInNewWindow, zmailPrefOpenMailInNewWindow ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether or not the client opens a new msg/conv in a new window (via
     * dbl-click)
     *
     * @param zmailPrefOpenMailInNewWindow new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=500)
    public Map<String,Object> setPrefOpenMailInNewWindow(boolean zmailPrefOpenMailInNewWindow, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefOpenMailInNewWindow, zmailPrefOpenMailInNewWindow ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether or not the client opens a new msg/conv in a new window (via
     * dbl-click)
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=500)
    public void unsetPrefOpenMailInNewWindow() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefOpenMailInNewWindow, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether or not the client opens a new msg/conv in a new window (via
     * dbl-click)
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=500)
    public Map<String,Object> unsetPrefOpenMailInNewWindow(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefOpenMailInNewWindow, "");
        return attrs;
    }

    /**
     * server remembers addresses to which notifications have been sent for
     * this interval, and does not send duplicate notifications in this
     * interval. Must be in valid duration format: {digits}{time-unit}.
     * digits: 0-9, time-unit: [hmsd]|ms. h - hours, m - minutes, s -
     * seconds, d - days, ms - milliseconds. If time unit is not specified,
     * the default is s(seconds).
     *
     * <p>Use getPrefOutOfOfficeCacheDurationAsString to access value as a string.
     *
     * @see #getPrefOutOfOfficeCacheDurationAsString()
     *
     * @return zmailPrefOutOfOfficeCacheDuration in millseconds, or 604800000 (7d)  if unset
     */
    @ZAttr(id=386)
    public long getPrefOutOfOfficeCacheDuration() {
        return getTimeInterval(Provisioning.A_zmailPrefOutOfOfficeCacheDuration, 604800000L);
    }

    /**
     * server remembers addresses to which notifications have been sent for
     * this interval, and does not send duplicate notifications in this
     * interval. Must be in valid duration format: {digits}{time-unit}.
     * digits: 0-9, time-unit: [hmsd]|ms. h - hours, m - minutes, s -
     * seconds, d - days, ms - milliseconds. If time unit is not specified,
     * the default is s(seconds).
     *
     * @return zmailPrefOutOfOfficeCacheDuration, or "7d" if unset
     */
    @ZAttr(id=386)
    public String getPrefOutOfOfficeCacheDurationAsString() {
        return getAttr(Provisioning.A_zmailPrefOutOfOfficeCacheDuration, "7d");
    }

    /**
     * server remembers addresses to which notifications have been sent for
     * this interval, and does not send duplicate notifications in this
     * interval. Must be in valid duration format: {digits}{time-unit}.
     * digits: 0-9, time-unit: [hmsd]|ms. h - hours, m - minutes, s -
     * seconds, d - days, ms - milliseconds. If time unit is not specified,
     * the default is s(seconds).
     *
     * @param zmailPrefOutOfOfficeCacheDuration new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=386)
    public void setPrefOutOfOfficeCacheDuration(String zmailPrefOutOfOfficeCacheDuration) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefOutOfOfficeCacheDuration, zmailPrefOutOfOfficeCacheDuration);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * server remembers addresses to which notifications have been sent for
     * this interval, and does not send duplicate notifications in this
     * interval. Must be in valid duration format: {digits}{time-unit}.
     * digits: 0-9, time-unit: [hmsd]|ms. h - hours, m - minutes, s -
     * seconds, d - days, ms - milliseconds. If time unit is not specified,
     * the default is s(seconds).
     *
     * @param zmailPrefOutOfOfficeCacheDuration new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=386)
    public Map<String,Object> setPrefOutOfOfficeCacheDuration(String zmailPrefOutOfOfficeCacheDuration, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefOutOfOfficeCacheDuration, zmailPrefOutOfOfficeCacheDuration);
        return attrs;
    }

    /**
     * server remembers addresses to which notifications have been sent for
     * this interval, and does not send duplicate notifications in this
     * interval. Must be in valid duration format: {digits}{time-unit}.
     * digits: 0-9, time-unit: [hmsd]|ms. h - hours, m - minutes, s -
     * seconds, d - days, ms - milliseconds. If time unit is not specified,
     * the default is s(seconds).
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=386)
    public void unsetPrefOutOfOfficeCacheDuration() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefOutOfOfficeCacheDuration, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * server remembers addresses to which notifications have been sent for
     * this interval, and does not send duplicate notifications in this
     * interval. Must be in valid duration format: {digits}{time-unit}.
     * digits: 0-9, time-unit: [hmsd]|ms. h - hours, m - minutes, s -
     * seconds, d - days, ms - milliseconds. If time unit is not specified,
     * the default is s(seconds).
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=386)
    public Map<String,Object> unsetPrefOutOfOfficeCacheDuration(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefOutOfOfficeCacheDuration, "");
        return attrs;
    }

    /**
     * when user has OOO message enabled, when they login into web client,
     * whether to alert the user that the OOO message is turned on and
     * provide the ability to turn it off
     *
     * @return zmailPrefOutOfOfficeStatusAlertOnLogin, or true if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1245)
    public boolean isPrefOutOfOfficeStatusAlertOnLogin() {
        return getBooleanAttr(Provisioning.A_zmailPrefOutOfOfficeStatusAlertOnLogin, true);
    }

    /**
     * when user has OOO message enabled, when they login into web client,
     * whether to alert the user that the OOO message is turned on and
     * provide the ability to turn it off
     *
     * @param zmailPrefOutOfOfficeStatusAlertOnLogin new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1245)
    public void setPrefOutOfOfficeStatusAlertOnLogin(boolean zmailPrefOutOfOfficeStatusAlertOnLogin) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefOutOfOfficeStatusAlertOnLogin, zmailPrefOutOfOfficeStatusAlertOnLogin ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * when user has OOO message enabled, when they login into web client,
     * whether to alert the user that the OOO message is turned on and
     * provide the ability to turn it off
     *
     * @param zmailPrefOutOfOfficeStatusAlertOnLogin new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1245)
    public Map<String,Object> setPrefOutOfOfficeStatusAlertOnLogin(boolean zmailPrefOutOfOfficeStatusAlertOnLogin, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefOutOfOfficeStatusAlertOnLogin, zmailPrefOutOfOfficeStatusAlertOnLogin ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * when user has OOO message enabled, when they login into web client,
     * whether to alert the user that the OOO message is turned on and
     * provide the ability to turn it off
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1245)
    public void unsetPrefOutOfOfficeStatusAlertOnLogin() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefOutOfOfficeStatusAlertOnLogin, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * when user has OOO message enabled, when they login into web client,
     * whether to alert the user that the OOO message is turned on and
     * provide the ability to turn it off
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1245)
    public Map<String,Object> unsetPrefOutOfOfficeStatusAlertOnLogin(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefOutOfOfficeStatusAlertOnLogin, "");
        return attrs;
    }

    /**
     * When messages are accessed via POP3: - keep: Leave DELE&#039;ed
     * messages in Inbox. - read: Mark RETR&#039;ed messages as read, and
     * leave DELE&#039;ed messages in Inbox. - trash: Move DELE&#039;ed
     * messages to Trash, and mark them as read. - delete: Hard-delete
     * DELE&#039;ed messages. This is the straightforward POP3
     * implementation.
     *
     * <p>Valid values: [trash, delete, read, keep]
     *
     * @return zmailPrefPop3DeleteOption, or ZAttrProvisioning.PrefPop3DeleteOption.delete if unset and/or has invalid value
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1165)
    public ZAttrProvisioning.PrefPop3DeleteOption getPrefPop3DeleteOption() {
        try { String v = getAttr(Provisioning.A_zmailPrefPop3DeleteOption); return v == null ? ZAttrProvisioning.PrefPop3DeleteOption.delete : ZAttrProvisioning.PrefPop3DeleteOption.fromString(v); } catch(org.zmail.common.service.ServiceException e) { return ZAttrProvisioning.PrefPop3DeleteOption.delete; }
    }

    /**
     * When messages are accessed via POP3: - keep: Leave DELE&#039;ed
     * messages in Inbox. - read: Mark RETR&#039;ed messages as read, and
     * leave DELE&#039;ed messages in Inbox. - trash: Move DELE&#039;ed
     * messages to Trash, and mark them as read. - delete: Hard-delete
     * DELE&#039;ed messages. This is the straightforward POP3
     * implementation.
     *
     * <p>Valid values: [trash, delete, read, keep]
     *
     * @return zmailPrefPop3DeleteOption, or "delete" if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1165)
    public String getPrefPop3DeleteOptionAsString() {
        return getAttr(Provisioning.A_zmailPrefPop3DeleteOption, "delete");
    }

    /**
     * When messages are accessed via POP3: - keep: Leave DELE&#039;ed
     * messages in Inbox. - read: Mark RETR&#039;ed messages as read, and
     * leave DELE&#039;ed messages in Inbox. - trash: Move DELE&#039;ed
     * messages to Trash, and mark them as read. - delete: Hard-delete
     * DELE&#039;ed messages. This is the straightforward POP3
     * implementation.
     *
     * <p>Valid values: [trash, delete, read, keep]
     *
     * @param zmailPrefPop3DeleteOption new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1165)
    public void setPrefPop3DeleteOption(ZAttrProvisioning.PrefPop3DeleteOption zmailPrefPop3DeleteOption) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefPop3DeleteOption, zmailPrefPop3DeleteOption.toString());
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * When messages are accessed via POP3: - keep: Leave DELE&#039;ed
     * messages in Inbox. - read: Mark RETR&#039;ed messages as read, and
     * leave DELE&#039;ed messages in Inbox. - trash: Move DELE&#039;ed
     * messages to Trash, and mark them as read. - delete: Hard-delete
     * DELE&#039;ed messages. This is the straightforward POP3
     * implementation.
     *
     * <p>Valid values: [trash, delete, read, keep]
     *
     * @param zmailPrefPop3DeleteOption new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1165)
    public Map<String,Object> setPrefPop3DeleteOption(ZAttrProvisioning.PrefPop3DeleteOption zmailPrefPop3DeleteOption, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefPop3DeleteOption, zmailPrefPop3DeleteOption.toString());
        return attrs;
    }

    /**
     * When messages are accessed via POP3: - keep: Leave DELE&#039;ed
     * messages in Inbox. - read: Mark RETR&#039;ed messages as read, and
     * leave DELE&#039;ed messages in Inbox. - trash: Move DELE&#039;ed
     * messages to Trash, and mark them as read. - delete: Hard-delete
     * DELE&#039;ed messages. This is the straightforward POP3
     * implementation.
     *
     * <p>Valid values: [trash, delete, read, keep]
     *
     * @param zmailPrefPop3DeleteOption new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1165)
    public void setPrefPop3DeleteOptionAsString(String zmailPrefPop3DeleteOption) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefPop3DeleteOption, zmailPrefPop3DeleteOption);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * When messages are accessed via POP3: - keep: Leave DELE&#039;ed
     * messages in Inbox. - read: Mark RETR&#039;ed messages as read, and
     * leave DELE&#039;ed messages in Inbox. - trash: Move DELE&#039;ed
     * messages to Trash, and mark them as read. - delete: Hard-delete
     * DELE&#039;ed messages. This is the straightforward POP3
     * implementation.
     *
     * <p>Valid values: [trash, delete, read, keep]
     *
     * @param zmailPrefPop3DeleteOption new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1165)
    public Map<String,Object> setPrefPop3DeleteOptionAsString(String zmailPrefPop3DeleteOption, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefPop3DeleteOption, zmailPrefPop3DeleteOption);
        return attrs;
    }

    /**
     * When messages are accessed via POP3: - keep: Leave DELE&#039;ed
     * messages in Inbox. - read: Mark RETR&#039;ed messages as read, and
     * leave DELE&#039;ed messages in Inbox. - trash: Move DELE&#039;ed
     * messages to Trash, and mark them as read. - delete: Hard-delete
     * DELE&#039;ed messages. This is the straightforward POP3
     * implementation.
     *
     * <p>Valid values: [trash, delete, read, keep]
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1165)
    public void unsetPrefPop3DeleteOption() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefPop3DeleteOption, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * When messages are accessed via POP3: - keep: Leave DELE&#039;ed
     * messages in Inbox. - read: Mark RETR&#039;ed messages as read, and
     * leave DELE&#039;ed messages in Inbox. - trash: Move DELE&#039;ed
     * messages to Trash, and mark them as read. - delete: Hard-delete
     * DELE&#039;ed messages. This is the straightforward POP3
     * implementation.
     *
     * <p>Valid values: [trash, delete, read, keep]
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1165)
    public Map<String,Object> unsetPrefPop3DeleteOption(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefPop3DeleteOption, "");
        return attrs;
    }

    /**
     * download pop3 messages since
     *
     * <p>Use getPrefPop3DownloadSinceAsString to access value as a string.
     *
     * @see #getPrefPop3DownloadSinceAsString()
     *
     * @return zmailPrefPop3DownloadSince as Date, null if unset or unable to parse
     *
     * @since ZCS 5.0.6
     */
    @ZAttr(id=653)
    public Date getPrefPop3DownloadSince() {
        return getGeneralizedTimeAttr(Provisioning.A_zmailPrefPop3DownloadSince, null);
    }

    /**
     * download pop3 messages since
     *
     * @return zmailPrefPop3DownloadSince, or null if unset
     *
     * @since ZCS 5.0.6
     */
    @ZAttr(id=653)
    public String getPrefPop3DownloadSinceAsString() {
        return getAttr(Provisioning.A_zmailPrefPop3DownloadSince, null);
    }

    /**
     * download pop3 messages since
     *
     * @param zmailPrefPop3DownloadSince new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.6
     */
    @ZAttr(id=653)
    public void setPrefPop3DownloadSince(Date zmailPrefPop3DownloadSince) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefPop3DownloadSince, zmailPrefPop3DownloadSince==null ? "" : DateUtil.toGeneralizedTime(zmailPrefPop3DownloadSince));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * download pop3 messages since
     *
     * @param zmailPrefPop3DownloadSince new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.6
     */
    @ZAttr(id=653)
    public Map<String,Object> setPrefPop3DownloadSince(Date zmailPrefPop3DownloadSince, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefPop3DownloadSince, zmailPrefPop3DownloadSince==null ? "" : DateUtil.toGeneralizedTime(zmailPrefPop3DownloadSince));
        return attrs;
    }

    /**
     * download pop3 messages since
     *
     * @param zmailPrefPop3DownloadSince new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.6
     */
    @ZAttr(id=653)
    public void setPrefPop3DownloadSinceAsString(String zmailPrefPop3DownloadSince) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefPop3DownloadSince, zmailPrefPop3DownloadSince);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * download pop3 messages since
     *
     * @param zmailPrefPop3DownloadSince new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.6
     */
    @ZAttr(id=653)
    public Map<String,Object> setPrefPop3DownloadSinceAsString(String zmailPrefPop3DownloadSince, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefPop3DownloadSince, zmailPrefPop3DownloadSince);
        return attrs;
    }

    /**
     * download pop3 messages since
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.6
     */
    @ZAttr(id=653)
    public void unsetPrefPop3DownloadSince() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefPop3DownloadSince, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * download pop3 messages since
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.6
     */
    @ZAttr(id=653)
    public Map<String,Object> unsetPrefPop3DownloadSince(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefPop3DownloadSince, "");
        return attrs;
    }

    /**
     * whether or not to include spam messages in POP3 access
     *
     * @return zmailPrefPop3IncludeSpam, or false if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1166)
    public boolean isPrefPop3IncludeSpam() {
        return getBooleanAttr(Provisioning.A_zmailPrefPop3IncludeSpam, false);
    }

    /**
     * whether or not to include spam messages in POP3 access
     *
     * @param zmailPrefPop3IncludeSpam new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1166)
    public void setPrefPop3IncludeSpam(boolean zmailPrefPop3IncludeSpam) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefPop3IncludeSpam, zmailPrefPop3IncludeSpam ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether or not to include spam messages in POP3 access
     *
     * @param zmailPrefPop3IncludeSpam new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1166)
    public Map<String,Object> setPrefPop3IncludeSpam(boolean zmailPrefPop3IncludeSpam, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefPop3IncludeSpam, zmailPrefPop3IncludeSpam ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether or not to include spam messages in POP3 access
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1166)
    public void unsetPrefPop3IncludeSpam() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefPop3IncludeSpam, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether or not to include spam messages in POP3 access
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1166)
    public Map<String,Object> unsetPrefPop3IncludeSpam(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefPop3IncludeSpam, "");
        return attrs;
    }

    /**
     * Deprecated since: 6.0.0_BETA2. deprecated in favor of
     * zmailPrefReadingPaneLocation and zmailPrefConvReadingPaneLocation.
     * Orig desc: whether reading pane is shown by default
     *
     * @return zmailPrefReadingPaneEnabled, or true if unset
     */
    @ZAttr(id=394)
    public boolean isPrefReadingPaneEnabled() {
        return getBooleanAttr(Provisioning.A_zmailPrefReadingPaneEnabled, true);
    }

    /**
     * Deprecated since: 6.0.0_BETA2. deprecated in favor of
     * zmailPrefReadingPaneLocation and zmailPrefConvReadingPaneLocation.
     * Orig desc: whether reading pane is shown by default
     *
     * @param zmailPrefReadingPaneEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=394)
    public void setPrefReadingPaneEnabled(boolean zmailPrefReadingPaneEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefReadingPaneEnabled, zmailPrefReadingPaneEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Deprecated since: 6.0.0_BETA2. deprecated in favor of
     * zmailPrefReadingPaneLocation and zmailPrefConvReadingPaneLocation.
     * Orig desc: whether reading pane is shown by default
     *
     * @param zmailPrefReadingPaneEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=394)
    public Map<String,Object> setPrefReadingPaneEnabled(boolean zmailPrefReadingPaneEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefReadingPaneEnabled, zmailPrefReadingPaneEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * Deprecated since: 6.0.0_BETA2. deprecated in favor of
     * zmailPrefReadingPaneLocation and zmailPrefConvReadingPaneLocation.
     * Orig desc: whether reading pane is shown by default
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=394)
    public void unsetPrefReadingPaneEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefReadingPaneEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Deprecated since: 6.0.0_BETA2. deprecated in favor of
     * zmailPrefReadingPaneLocation and zmailPrefConvReadingPaneLocation.
     * Orig desc: whether reading pane is shown by default
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=394)
    public Map<String,Object> unsetPrefReadingPaneEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefReadingPaneEnabled, "");
        return attrs;
    }

    /**
     * where the message reading pane is displayed in list views
     *
     * <p>Valid values: [off, bottom, right]
     *
     * @return zmailPrefReadingPaneLocation, or ZAttrProvisioning.PrefReadingPaneLocation.right if unset and/or has invalid value
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=804)
    public ZAttrProvisioning.PrefReadingPaneLocation getPrefReadingPaneLocation() {
        try { String v = getAttr(Provisioning.A_zmailPrefReadingPaneLocation); return v == null ? ZAttrProvisioning.PrefReadingPaneLocation.right : ZAttrProvisioning.PrefReadingPaneLocation.fromString(v); } catch(org.zmail.common.service.ServiceException e) { return ZAttrProvisioning.PrefReadingPaneLocation.right; }
    }

    /**
     * where the message reading pane is displayed in list views
     *
     * <p>Valid values: [off, bottom, right]
     *
     * @return zmailPrefReadingPaneLocation, or "right" if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=804)
    public String getPrefReadingPaneLocationAsString() {
        return getAttr(Provisioning.A_zmailPrefReadingPaneLocation, "right");
    }

    /**
     * where the message reading pane is displayed in list views
     *
     * <p>Valid values: [off, bottom, right]
     *
     * @param zmailPrefReadingPaneLocation new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=804)
    public void setPrefReadingPaneLocation(ZAttrProvisioning.PrefReadingPaneLocation zmailPrefReadingPaneLocation) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefReadingPaneLocation, zmailPrefReadingPaneLocation.toString());
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * where the message reading pane is displayed in list views
     *
     * <p>Valid values: [off, bottom, right]
     *
     * @param zmailPrefReadingPaneLocation new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=804)
    public Map<String,Object> setPrefReadingPaneLocation(ZAttrProvisioning.PrefReadingPaneLocation zmailPrefReadingPaneLocation, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefReadingPaneLocation, zmailPrefReadingPaneLocation.toString());
        return attrs;
    }

    /**
     * where the message reading pane is displayed in list views
     *
     * <p>Valid values: [off, bottom, right]
     *
     * @param zmailPrefReadingPaneLocation new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=804)
    public void setPrefReadingPaneLocationAsString(String zmailPrefReadingPaneLocation) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefReadingPaneLocation, zmailPrefReadingPaneLocation);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * where the message reading pane is displayed in list views
     *
     * <p>Valid values: [off, bottom, right]
     *
     * @param zmailPrefReadingPaneLocation new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=804)
    public Map<String,Object> setPrefReadingPaneLocationAsString(String zmailPrefReadingPaneLocation, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefReadingPaneLocation, zmailPrefReadingPaneLocation);
        return attrs;
    }

    /**
     * where the message reading pane is displayed in list views
     *
     * <p>Valid values: [off, bottom, right]
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=804)
    public void unsetPrefReadingPaneLocation() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefReadingPaneLocation, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * where the message reading pane is displayed in list views
     *
     * <p>Valid values: [off, bottom, right]
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=804)
    public Map<String,Object> unsetPrefReadingPaneLocation(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefReadingPaneLocation, "");
        return attrs;
    }

    /**
     * what part of the original message to include during replies
     * (deprecatedSince 5.0 in identity). The value includeBody has been
     * deprecated since 6.0.6, use includeBodyAndHeaders instead.
     *
     * <p>Valid values: [includeBodyWithPrefix, includeBodyOnly, includeSmartAndHeadersWithPrefix, includeBody, includeSmartWithPrefix, includeAsAttachment, includeSmart, includeSmartAndHeaders, includeBodyAndHeaders, includeBodyAndHeadersWithPrefix, includeNone]
     *
     * @return zmailPrefReplyIncludeOriginalText, or ZAttrProvisioning.PrefReplyIncludeOriginalText.includeBody if unset and/or has invalid value
     */
    @ZAttr(id=133)
    public ZAttrProvisioning.PrefReplyIncludeOriginalText getPrefReplyIncludeOriginalText() {
        try { String v = getAttr(Provisioning.A_zmailPrefReplyIncludeOriginalText); return v == null ? ZAttrProvisioning.PrefReplyIncludeOriginalText.includeBody : ZAttrProvisioning.PrefReplyIncludeOriginalText.fromString(v); } catch(org.zmail.common.service.ServiceException e) { return ZAttrProvisioning.PrefReplyIncludeOriginalText.includeBody; }
    }

    /**
     * what part of the original message to include during replies
     * (deprecatedSince 5.0 in identity). The value includeBody has been
     * deprecated since 6.0.6, use includeBodyAndHeaders instead.
     *
     * <p>Valid values: [includeBodyWithPrefix, includeBodyOnly, includeSmartAndHeadersWithPrefix, includeBody, includeSmartWithPrefix, includeAsAttachment, includeSmart, includeSmartAndHeaders, includeBodyAndHeaders, includeBodyAndHeadersWithPrefix, includeNone]
     *
     * @return zmailPrefReplyIncludeOriginalText, or "includeBody" if unset
     */
    @ZAttr(id=133)
    public String getPrefReplyIncludeOriginalTextAsString() {
        return getAttr(Provisioning.A_zmailPrefReplyIncludeOriginalText, "includeBody");
    }

    /**
     * what part of the original message to include during replies
     * (deprecatedSince 5.0 in identity). The value includeBody has been
     * deprecated since 6.0.6, use includeBodyAndHeaders instead.
     *
     * <p>Valid values: [includeBodyWithPrefix, includeBodyOnly, includeSmartAndHeadersWithPrefix, includeBody, includeSmartWithPrefix, includeAsAttachment, includeSmart, includeSmartAndHeaders, includeBodyAndHeaders, includeBodyAndHeadersWithPrefix, includeNone]
     *
     * @param zmailPrefReplyIncludeOriginalText new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=133)
    public void setPrefReplyIncludeOriginalText(ZAttrProvisioning.PrefReplyIncludeOriginalText zmailPrefReplyIncludeOriginalText) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefReplyIncludeOriginalText, zmailPrefReplyIncludeOriginalText.toString());
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * what part of the original message to include during replies
     * (deprecatedSince 5.0 in identity). The value includeBody has been
     * deprecated since 6.0.6, use includeBodyAndHeaders instead.
     *
     * <p>Valid values: [includeBodyWithPrefix, includeBodyOnly, includeSmartAndHeadersWithPrefix, includeBody, includeSmartWithPrefix, includeAsAttachment, includeSmart, includeSmartAndHeaders, includeBodyAndHeaders, includeBodyAndHeadersWithPrefix, includeNone]
     *
     * @param zmailPrefReplyIncludeOriginalText new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=133)
    public Map<String,Object> setPrefReplyIncludeOriginalText(ZAttrProvisioning.PrefReplyIncludeOriginalText zmailPrefReplyIncludeOriginalText, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefReplyIncludeOriginalText, zmailPrefReplyIncludeOriginalText.toString());
        return attrs;
    }

    /**
     * what part of the original message to include during replies
     * (deprecatedSince 5.0 in identity). The value includeBody has been
     * deprecated since 6.0.6, use includeBodyAndHeaders instead.
     *
     * <p>Valid values: [includeBodyWithPrefix, includeBodyOnly, includeSmartAndHeadersWithPrefix, includeBody, includeSmartWithPrefix, includeAsAttachment, includeSmart, includeSmartAndHeaders, includeBodyAndHeaders, includeBodyAndHeadersWithPrefix, includeNone]
     *
     * @param zmailPrefReplyIncludeOriginalText new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=133)
    public void setPrefReplyIncludeOriginalTextAsString(String zmailPrefReplyIncludeOriginalText) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefReplyIncludeOriginalText, zmailPrefReplyIncludeOriginalText);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * what part of the original message to include during replies
     * (deprecatedSince 5.0 in identity). The value includeBody has been
     * deprecated since 6.0.6, use includeBodyAndHeaders instead.
     *
     * <p>Valid values: [includeBodyWithPrefix, includeBodyOnly, includeSmartAndHeadersWithPrefix, includeBody, includeSmartWithPrefix, includeAsAttachment, includeSmart, includeSmartAndHeaders, includeBodyAndHeaders, includeBodyAndHeadersWithPrefix, includeNone]
     *
     * @param zmailPrefReplyIncludeOriginalText new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=133)
    public Map<String,Object> setPrefReplyIncludeOriginalTextAsString(String zmailPrefReplyIncludeOriginalText, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefReplyIncludeOriginalText, zmailPrefReplyIncludeOriginalText);
        return attrs;
    }

    /**
     * what part of the original message to include during replies
     * (deprecatedSince 5.0 in identity). The value includeBody has been
     * deprecated since 6.0.6, use includeBodyAndHeaders instead.
     *
     * <p>Valid values: [includeBodyWithPrefix, includeBodyOnly, includeSmartAndHeadersWithPrefix, includeBody, includeSmartWithPrefix, includeAsAttachment, includeSmart, includeSmartAndHeaders, includeBodyAndHeaders, includeBodyAndHeadersWithPrefix, includeNone]
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=133)
    public void unsetPrefReplyIncludeOriginalText() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefReplyIncludeOriginalText, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * what part of the original message to include during replies
     * (deprecatedSince 5.0 in identity). The value includeBody has been
     * deprecated since 6.0.6, use includeBodyAndHeaders instead.
     *
     * <p>Valid values: [includeBodyWithPrefix, includeBodyOnly, includeSmartAndHeadersWithPrefix, includeBody, includeSmartWithPrefix, includeAsAttachment, includeSmart, includeSmartAndHeaders, includeBodyAndHeaders, includeBodyAndHeadersWithPrefix, includeNone]
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=133)
    public Map<String,Object> unsetPrefReplyIncludeOriginalText(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefReplyIncludeOriginalText, "");
        return attrs;
    }

    /**
     * whether or not to save outgoing mail (deprecatedSince 5.0 in identity)
     *
     * @return zmailPrefSaveToSent, or true if unset
     */
    @ZAttr(id=22)
    public boolean isPrefSaveToSent() {
        return getBooleanAttr(Provisioning.A_zmailPrefSaveToSent, true);
    }

    /**
     * whether or not to save outgoing mail (deprecatedSince 5.0 in identity)
     *
     * @param zmailPrefSaveToSent new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=22)
    public void setPrefSaveToSent(boolean zmailPrefSaveToSent) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefSaveToSent, zmailPrefSaveToSent ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether or not to save outgoing mail (deprecatedSince 5.0 in identity)
     *
     * @param zmailPrefSaveToSent new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=22)
    public Map<String,Object> setPrefSaveToSent(boolean zmailPrefSaveToSent, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefSaveToSent, zmailPrefSaveToSent ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether or not to save outgoing mail (deprecatedSince 5.0 in identity)
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=22)
    public void unsetPrefSaveToSent() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefSaveToSent, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether or not to save outgoing mail (deprecatedSince 5.0 in identity)
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=22)
    public Map<String,Object> unsetPrefSaveToSent(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefSaveToSent, "");
        return attrs;
    }

    /**
     * whether or not search tree is expanded
     *
     * @return zmailPrefSearchTreeOpen, or true if unset
     *
     * @since ZCS 5.0.5
     */
    @ZAttr(id=634)
    public boolean isPrefSearchTreeOpen() {
        return getBooleanAttr(Provisioning.A_zmailPrefSearchTreeOpen, true);
    }

    /**
     * whether or not search tree is expanded
     *
     * @param zmailPrefSearchTreeOpen new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.5
     */
    @ZAttr(id=634)
    public void setPrefSearchTreeOpen(boolean zmailPrefSearchTreeOpen) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefSearchTreeOpen, zmailPrefSearchTreeOpen ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether or not search tree is expanded
     *
     * @param zmailPrefSearchTreeOpen new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.5
     */
    @ZAttr(id=634)
    public Map<String,Object> setPrefSearchTreeOpen(boolean zmailPrefSearchTreeOpen, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefSearchTreeOpen, zmailPrefSearchTreeOpen ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether or not search tree is expanded
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.5
     */
    @ZAttr(id=634)
    public void unsetPrefSearchTreeOpen() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefSearchTreeOpen, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether or not search tree is expanded
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.5
     */
    @ZAttr(id=634)
    public Map<String,Object> unsetPrefSearchTreeOpen(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefSearchTreeOpen, "");
        return attrs;
    }

    /**
     * Retention period of messages in the Sent folder. 0 means that all
     * messages will be retained. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * <p>Use getPrefSentLifetimeAsString to access value as a string.
     *
     * @see #getPrefSentLifetimeAsString()
     *
     * @return zmailPrefSentLifetime in millseconds, or 0 (0)  if unset
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=539)
    public long getPrefSentLifetime() {
        return getTimeInterval(Provisioning.A_zmailPrefSentLifetime, 0L);
    }

    /**
     * Retention period of messages in the Sent folder. 0 means that all
     * messages will be retained. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @return zmailPrefSentLifetime, or "0" if unset
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=539)
    public String getPrefSentLifetimeAsString() {
        return getAttr(Provisioning.A_zmailPrefSentLifetime, "0");
    }

    /**
     * Retention period of messages in the Sent folder. 0 means that all
     * messages will be retained. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param zmailPrefSentLifetime new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=539)
    public void setPrefSentLifetime(String zmailPrefSentLifetime) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefSentLifetime, zmailPrefSentLifetime);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Retention period of messages in the Sent folder. 0 means that all
     * messages will be retained. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param zmailPrefSentLifetime new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=539)
    public Map<String,Object> setPrefSentLifetime(String zmailPrefSentLifetime, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefSentLifetime, zmailPrefSentLifetime);
        return attrs;
    }

    /**
     * Retention period of messages in the Sent folder. 0 means that all
     * messages will be retained. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=539)
    public void unsetPrefSentLifetime() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefSentLifetime, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Retention period of messages in the Sent folder. 0 means that all
     * messages will be retained. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=539)
    public Map<String,Object> unsetPrefSentLifetime(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefSentLifetime, "");
        return attrs;
    }

    /**
     * name of folder to save sent mail in (deprecatedSince 5.0 in identity)
     *
     * @return zmailPrefSentMailFolder, or "sent" if unset
     */
    @ZAttr(id=103)
    public String getPrefSentMailFolder() {
        return getAttr(Provisioning.A_zmailPrefSentMailFolder, "sent");
    }

    /**
     * name of folder to save sent mail in (deprecatedSince 5.0 in identity)
     *
     * @param zmailPrefSentMailFolder new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=103)
    public void setPrefSentMailFolder(String zmailPrefSentMailFolder) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefSentMailFolder, zmailPrefSentMailFolder);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * name of folder to save sent mail in (deprecatedSince 5.0 in identity)
     *
     * @param zmailPrefSentMailFolder new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=103)
    public Map<String,Object> setPrefSentMailFolder(String zmailPrefSentMailFolder, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefSentMailFolder, zmailPrefSentMailFolder);
        return attrs;
    }

    /**
     * name of folder to save sent mail in (deprecatedSince 5.0 in identity)
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=103)
    public void unsetPrefSentMailFolder() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefSentMailFolder, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * name of folder to save sent mail in (deprecatedSince 5.0 in identity)
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=103)
    public Map<String,Object> unsetPrefSentMailFolder(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefSentMailFolder, "");
        return attrs;
    }

    /**
     * whether end-user wants auto-complete from shared address books.
     *
     * @return zmailPrefSharedAddrBookAutoCompleteEnabled, or false if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=759)
    public boolean isPrefSharedAddrBookAutoCompleteEnabled() {
        return getBooleanAttr(Provisioning.A_zmailPrefSharedAddrBookAutoCompleteEnabled, false);
    }

    /**
     * whether end-user wants auto-complete from shared address books.
     *
     * @param zmailPrefSharedAddrBookAutoCompleteEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=759)
    public void setPrefSharedAddrBookAutoCompleteEnabled(boolean zmailPrefSharedAddrBookAutoCompleteEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefSharedAddrBookAutoCompleteEnabled, zmailPrefSharedAddrBookAutoCompleteEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether end-user wants auto-complete from shared address books.
     *
     * @param zmailPrefSharedAddrBookAutoCompleteEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=759)
    public Map<String,Object> setPrefSharedAddrBookAutoCompleteEnabled(boolean zmailPrefSharedAddrBookAutoCompleteEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefSharedAddrBookAutoCompleteEnabled, zmailPrefSharedAddrBookAutoCompleteEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether end-user wants auto-complete from shared address books.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=759)
    public void unsetPrefSharedAddrBookAutoCompleteEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefSharedAddrBookAutoCompleteEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether end-user wants auto-complete from shared address books.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=759)
    public Map<String,Object> unsetPrefSharedAddrBookAutoCompleteEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefSharedAddrBookAutoCompleteEnabled, "");
        return attrs;
    }

    /**
     * show just the display name of email addresses in the message header
     * area and compose pane
     *
     * @return zmailPrefShortEmailAddress, or true if unset
     *
     * @since ZCS 7.0.1
     */
    @ZAttr(id=1173)
    public boolean isPrefShortEmailAddress() {
        return getBooleanAttr(Provisioning.A_zmailPrefShortEmailAddress, true);
    }

    /**
     * show just the display name of email addresses in the message header
     * area and compose pane
     *
     * @param zmailPrefShortEmailAddress new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.0.1
     */
    @ZAttr(id=1173)
    public void setPrefShortEmailAddress(boolean zmailPrefShortEmailAddress) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefShortEmailAddress, zmailPrefShortEmailAddress ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * show just the display name of email addresses in the message header
     * area and compose pane
     *
     * @param zmailPrefShortEmailAddress new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.0.1
     */
    @ZAttr(id=1173)
    public Map<String,Object> setPrefShortEmailAddress(boolean zmailPrefShortEmailAddress, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefShortEmailAddress, zmailPrefShortEmailAddress ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * show just the display name of email addresses in the message header
     * area and compose pane
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.0.1
     */
    @ZAttr(id=1173)
    public void unsetPrefShortEmailAddress() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefShortEmailAddress, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * show just the display name of email addresses in the message header
     * area and compose pane
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.0.1
     */
    @ZAttr(id=1173)
    public Map<String,Object> unsetPrefShortEmailAddress(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefShortEmailAddress, "");
        return attrs;
    }

    /**
     * keyboard shortcuts
     *
     * @return zmailPrefShortcuts, or null if unset
     */
    @ZAttr(id=396)
    public String getPrefShortcuts() {
        return getAttr(Provisioning.A_zmailPrefShortcuts, null);
    }

    /**
     * keyboard shortcuts
     *
     * @param zmailPrefShortcuts new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=396)
    public void setPrefShortcuts(String zmailPrefShortcuts) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefShortcuts, zmailPrefShortcuts);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * keyboard shortcuts
     *
     * @param zmailPrefShortcuts new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=396)
    public Map<String,Object> setPrefShortcuts(String zmailPrefShortcuts, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefShortcuts, zmailPrefShortcuts);
        return attrs;
    }

    /**
     * keyboard shortcuts
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=396)
    public void unsetPrefShortcuts() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefShortcuts, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * keyboard shortcuts
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=396)
    public Map<String,Object> unsetPrefShortcuts(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefShortcuts, "");
        return attrs;
    }

    /**
     * show calendar week in calendar views
     *
     * @return zmailPrefShowCalendarWeek, or false if unset
     *
     * @since ZCS 6.0.0_GA
     */
    @ZAttr(id=1045)
    public boolean isPrefShowCalendarWeek() {
        return getBooleanAttr(Provisioning.A_zmailPrefShowCalendarWeek, false);
    }

    /**
     * show calendar week in calendar views
     *
     * @param zmailPrefShowCalendarWeek new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_GA
     */
    @ZAttr(id=1045)
    public void setPrefShowCalendarWeek(boolean zmailPrefShowCalendarWeek) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefShowCalendarWeek, zmailPrefShowCalendarWeek ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * show calendar week in calendar views
     *
     * @param zmailPrefShowCalendarWeek new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_GA
     */
    @ZAttr(id=1045)
    public Map<String,Object> setPrefShowCalendarWeek(boolean zmailPrefShowCalendarWeek, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefShowCalendarWeek, zmailPrefShowCalendarWeek ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * show calendar week in calendar views
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_GA
     */
    @ZAttr(id=1045)
    public void unsetPrefShowCalendarWeek() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefShowCalendarWeek, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * show calendar week in calendar views
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_GA
     */
    @ZAttr(id=1045)
    public Map<String,Object> unsetPrefShowCalendarWeek(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefShowCalendarWeek, "");
        return attrs;
    }

    /**
     * whether or not to show direction buttons in compose toolbar
     *
     * @return zmailPrefShowComposeDirection, or false if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1274)
    public boolean isPrefShowComposeDirection() {
        return getBooleanAttr(Provisioning.A_zmailPrefShowComposeDirection, false);
    }

    /**
     * whether or not to show direction buttons in compose toolbar
     *
     * @param zmailPrefShowComposeDirection new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1274)
    public void setPrefShowComposeDirection(boolean zmailPrefShowComposeDirection) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefShowComposeDirection, zmailPrefShowComposeDirection ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether or not to show direction buttons in compose toolbar
     *
     * @param zmailPrefShowComposeDirection new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1274)
    public Map<String,Object> setPrefShowComposeDirection(boolean zmailPrefShowComposeDirection, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefShowComposeDirection, zmailPrefShowComposeDirection ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether or not to show direction buttons in compose toolbar
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1274)
    public void unsetPrefShowComposeDirection() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefShowComposeDirection, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether or not to show direction buttons in compose toolbar
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1274)
    public Map<String,Object> unsetPrefShowComposeDirection(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefShowComposeDirection, "");
        return attrs;
    }

    /**
     * show fragments in conversation and message lists
     *
     * @return zmailPrefShowFragments, or true if unset
     */
    @ZAttr(id=192)
    public boolean isPrefShowFragments() {
        return getBooleanAttr(Provisioning.A_zmailPrefShowFragments, true);
    }

    /**
     * show fragments in conversation and message lists
     *
     * @param zmailPrefShowFragments new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=192)
    public void setPrefShowFragments(boolean zmailPrefShowFragments) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefShowFragments, zmailPrefShowFragments ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * show fragments in conversation and message lists
     *
     * @param zmailPrefShowFragments new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=192)
    public Map<String,Object> setPrefShowFragments(boolean zmailPrefShowFragments, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefShowFragments, zmailPrefShowFragments ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * show fragments in conversation and message lists
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=192)
    public void unsetPrefShowFragments() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefShowFragments, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * show fragments in conversation and message lists
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=192)
    public Map<String,Object> unsetPrefShowFragments(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefShowFragments, "");
        return attrs;
    }

    /**
     * whether to show search box or not
     *
     * @return zmailPrefShowSearchString, or false if unset
     */
    @ZAttr(id=222)
    public boolean isPrefShowSearchString() {
        return getBooleanAttr(Provisioning.A_zmailPrefShowSearchString, false);
    }

    /**
     * whether to show search box or not
     *
     * @param zmailPrefShowSearchString new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=222)
    public void setPrefShowSearchString(boolean zmailPrefShowSearchString) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefShowSearchString, zmailPrefShowSearchString ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to show search box or not
     *
     * @param zmailPrefShowSearchString new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=222)
    public Map<String,Object> setPrefShowSearchString(boolean zmailPrefShowSearchString, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefShowSearchString, zmailPrefShowSearchString ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether to show search box or not
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=222)
    public void unsetPrefShowSearchString() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefShowSearchString, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to show search box or not
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=222)
    public Map<String,Object> unsetPrefShowSearchString(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefShowSearchString, "");
        return attrs;
    }

    /**
     * show selection checkbox for selecting email, contact, voicemail items
     * in a list view for batch operations
     *
     * @return zmailPrefShowSelectionCheckbox, or false if unset
     */
    @ZAttr(id=471)
    public boolean isPrefShowSelectionCheckbox() {
        return getBooleanAttr(Provisioning.A_zmailPrefShowSelectionCheckbox, false);
    }

    /**
     * show selection checkbox for selecting email, contact, voicemail items
     * in a list view for batch operations
     *
     * @param zmailPrefShowSelectionCheckbox new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=471)
    public void setPrefShowSelectionCheckbox(boolean zmailPrefShowSelectionCheckbox) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefShowSelectionCheckbox, zmailPrefShowSelectionCheckbox ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * show selection checkbox for selecting email, contact, voicemail items
     * in a list view for batch operations
     *
     * @param zmailPrefShowSelectionCheckbox new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=471)
    public Map<String,Object> setPrefShowSelectionCheckbox(boolean zmailPrefShowSelectionCheckbox, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefShowSelectionCheckbox, zmailPrefShowSelectionCheckbox ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * show selection checkbox for selecting email, contact, voicemail items
     * in a list view for batch operations
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=471)
    public void unsetPrefShowSelectionCheckbox() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefShowSelectionCheckbox, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * show selection checkbox for selecting email, contact, voicemail items
     * in a list view for batch operations
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=471)
    public Map<String,Object> unsetPrefShowSelectionCheckbox(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefShowSelectionCheckbox, "");
        return attrs;
    }

    /**
     * Skin to use for this account
     *
     * @return zmailPrefSkin, or "serenity" if unset
     */
    @ZAttr(id=355)
    public String getPrefSkin() {
        return getAttr(Provisioning.A_zmailPrefSkin, "serenity");
    }

    /**
     * Skin to use for this account
     *
     * @param zmailPrefSkin new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=355)
    public void setPrefSkin(String zmailPrefSkin) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefSkin, zmailPrefSkin);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Skin to use for this account
     *
     * @param zmailPrefSkin new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=355)
    public Map<String,Object> setPrefSkin(String zmailPrefSkin, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefSkin, zmailPrefSkin);
        return attrs;
    }

    /**
     * Skin to use for this account
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=355)
    public void unsetPrefSkin() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefSkin, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Skin to use for this account
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=355)
    public Map<String,Object> unsetPrefSkin(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefSkin, "");
        return attrs;
    }

    /**
     * sort order for list view in the WEB UI
     *
     * @return zmailPrefSortOrder, or null if unset
     *
     * @since ZCS 7.1.0
     */
    @ZAttr(id=1188)
    public String getPrefSortOrder() {
        return getAttr(Provisioning.A_zmailPrefSortOrder, null);
    }

    /**
     * sort order for list view in the WEB UI
     *
     * @param zmailPrefSortOrder new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.1.0
     */
    @ZAttr(id=1188)
    public void setPrefSortOrder(String zmailPrefSortOrder) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefSortOrder, zmailPrefSortOrder);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * sort order for list view in the WEB UI
     *
     * @param zmailPrefSortOrder new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.1.0
     */
    @ZAttr(id=1188)
    public Map<String,Object> setPrefSortOrder(String zmailPrefSortOrder, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefSortOrder, zmailPrefSortOrder);
        return attrs;
    }

    /**
     * sort order for list view in the WEB UI
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.1.0
     */
    @ZAttr(id=1188)
    public void unsetPrefSortOrder() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefSortOrder, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * sort order for list view in the WEB UI
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.1.0
     */
    @ZAttr(id=1188)
    public Map<String,Object> unsetPrefSortOrder(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefSortOrder, "");
        return attrs;
    }

    /**
     * The name of the dictionary used for spell checking. If not set, the
     * locale is used.
     *
     * @return zmailPrefSpellDictionary, or null if unset
     *
     * @since ZCS 6.0.0_GA
     */
    @ZAttr(id=1041)
    public String getPrefSpellDictionary() {
        return getAttr(Provisioning.A_zmailPrefSpellDictionary, null);
    }

    /**
     * The name of the dictionary used for spell checking. If not set, the
     * locale is used.
     *
     * @param zmailPrefSpellDictionary new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_GA
     */
    @ZAttr(id=1041)
    public void setPrefSpellDictionary(String zmailPrefSpellDictionary) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefSpellDictionary, zmailPrefSpellDictionary);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * The name of the dictionary used for spell checking. If not set, the
     * locale is used.
     *
     * @param zmailPrefSpellDictionary new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_GA
     */
    @ZAttr(id=1041)
    public Map<String,Object> setPrefSpellDictionary(String zmailPrefSpellDictionary, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefSpellDictionary, zmailPrefSpellDictionary);
        return attrs;
    }

    /**
     * The name of the dictionary used for spell checking. If not set, the
     * locale is used.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_GA
     */
    @ZAttr(id=1041)
    public void unsetPrefSpellDictionary() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefSpellDictionary, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * The name of the dictionary used for spell checking. If not set, the
     * locale is used.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_GA
     */
    @ZAttr(id=1041)
    public Map<String,Object> unsetPrefSpellDictionary(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefSpellDictionary, "");
        return attrs;
    }

    /**
     * If TRUE, the spell checker ignores words that contain only upper-case
     * letters.
     *
     * @return zmailPrefSpellIgnoreAllCaps, or true if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1207)
    public boolean isPrefSpellIgnoreAllCaps() {
        return getBooleanAttr(Provisioning.A_zmailPrefSpellIgnoreAllCaps, true);
    }

    /**
     * If TRUE, the spell checker ignores words that contain only upper-case
     * letters.
     *
     * @param zmailPrefSpellIgnoreAllCaps new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1207)
    public void setPrefSpellIgnoreAllCaps(boolean zmailPrefSpellIgnoreAllCaps) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefSpellIgnoreAllCaps, zmailPrefSpellIgnoreAllCaps ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * If TRUE, the spell checker ignores words that contain only upper-case
     * letters.
     *
     * @param zmailPrefSpellIgnoreAllCaps new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1207)
    public Map<String,Object> setPrefSpellIgnoreAllCaps(boolean zmailPrefSpellIgnoreAllCaps, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefSpellIgnoreAllCaps, zmailPrefSpellIgnoreAllCaps ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * If TRUE, the spell checker ignores words that contain only upper-case
     * letters.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1207)
    public void unsetPrefSpellIgnoreAllCaps() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefSpellIgnoreAllCaps, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * If TRUE, the spell checker ignores words that contain only upper-case
     * letters.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1207)
    public Map<String,Object> unsetPrefSpellIgnoreAllCaps(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefSpellIgnoreAllCaps, "");
        return attrs;
    }

    /**
     * Regular Expression for words to ignore during spell check.
     *
     * @return zmailPrefSpellIgnorePattern, or null if unset
     *
     * @since ZCS 8.0.4
     */
    @ZAttr(id=1432)
    public String getPrefSpellIgnorePattern() {
        return getAttr(Provisioning.A_zmailPrefSpellIgnorePattern, null);
    }

    /**
     * Regular Expression for words to ignore during spell check.
     *
     * @param zmailPrefSpellIgnorePattern new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.4
     */
    @ZAttr(id=1432)
    public void setPrefSpellIgnorePattern(String zmailPrefSpellIgnorePattern) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefSpellIgnorePattern, zmailPrefSpellIgnorePattern);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Regular Expression for words to ignore during spell check.
     *
     * @param zmailPrefSpellIgnorePattern new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.4
     */
    @ZAttr(id=1432)
    public Map<String,Object> setPrefSpellIgnorePattern(String zmailPrefSpellIgnorePattern, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefSpellIgnorePattern, zmailPrefSpellIgnorePattern);
        return attrs;
    }

    /**
     * Regular Expression for words to ignore during spell check.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.4
     */
    @ZAttr(id=1432)
    public void unsetPrefSpellIgnorePattern() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefSpellIgnorePattern, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Regular Expression for words to ignore during spell check.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.4
     */
    @ZAttr(id=1432)
    public Map<String,Object> unsetPrefSpellIgnorePattern(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefSpellIgnorePattern, "");
        return attrs;
    }

    /**
     * List of words to ignore when checking spelling. The word list of an
     * account includes the words specified for its cos and domain.
     *
     * @return zmailPrefSpellIgnoreWord, or empty array if unset
     *
     * @since ZCS 6.0.5
     */
    @ZAttr(id=1073)
    public String[] getPrefSpellIgnoreWord() {
        String[] value = getMultiAttr(Provisioning.A_zmailPrefSpellIgnoreWord); return value.length > 0 ? value : new String[] {"blog"};
    }

    /**
     * List of words to ignore when checking spelling. The word list of an
     * account includes the words specified for its cos and domain.
     *
     * @param zmailPrefSpellIgnoreWord new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.5
     */
    @ZAttr(id=1073)
    public void setPrefSpellIgnoreWord(String[] zmailPrefSpellIgnoreWord) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefSpellIgnoreWord, zmailPrefSpellIgnoreWord);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * List of words to ignore when checking spelling. The word list of an
     * account includes the words specified for its cos and domain.
     *
     * @param zmailPrefSpellIgnoreWord new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.5
     */
    @ZAttr(id=1073)
    public Map<String,Object> setPrefSpellIgnoreWord(String[] zmailPrefSpellIgnoreWord, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefSpellIgnoreWord, zmailPrefSpellIgnoreWord);
        return attrs;
    }

    /**
     * List of words to ignore when checking spelling. The word list of an
     * account includes the words specified for its cos and domain.
     *
     * @param zmailPrefSpellIgnoreWord new to add to existing values
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.5
     */
    @ZAttr(id=1073)
    public void addPrefSpellIgnoreWord(String zmailPrefSpellIgnoreWord) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "+" + Provisioning.A_zmailPrefSpellIgnoreWord, zmailPrefSpellIgnoreWord);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * List of words to ignore when checking spelling. The word list of an
     * account includes the words specified for its cos and domain.
     *
     * @param zmailPrefSpellIgnoreWord new to add to existing values
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.5
     */
    @ZAttr(id=1073)
    public Map<String,Object> addPrefSpellIgnoreWord(String zmailPrefSpellIgnoreWord, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "+" + Provisioning.A_zmailPrefSpellIgnoreWord, zmailPrefSpellIgnoreWord);
        return attrs;
    }

    /**
     * List of words to ignore when checking spelling. The word list of an
     * account includes the words specified for its cos and domain.
     *
     * @param zmailPrefSpellIgnoreWord existing value to remove
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.5
     */
    @ZAttr(id=1073)
    public void removePrefSpellIgnoreWord(String zmailPrefSpellIgnoreWord) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "-" + Provisioning.A_zmailPrefSpellIgnoreWord, zmailPrefSpellIgnoreWord);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * List of words to ignore when checking spelling. The word list of an
     * account includes the words specified for its cos and domain.
     *
     * @param zmailPrefSpellIgnoreWord existing value to remove
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.5
     */
    @ZAttr(id=1073)
    public Map<String,Object> removePrefSpellIgnoreWord(String zmailPrefSpellIgnoreWord, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "-" + Provisioning.A_zmailPrefSpellIgnoreWord, zmailPrefSpellIgnoreWord);
        return attrs;
    }

    /**
     * List of words to ignore when checking spelling. The word list of an
     * account includes the words specified for its cos and domain.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.5
     */
    @ZAttr(id=1073)
    public void unsetPrefSpellIgnoreWord() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefSpellIgnoreWord, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * List of words to ignore when checking spelling. The word list of an
     * account includes the words specified for its cos and domain.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.5
     */
    @ZAttr(id=1073)
    public Map<String,Object> unsetPrefSpellIgnoreWord(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefSpellIgnoreWord, "");
        return attrs;
    }

    /**
     * whether standard client should operate in accessibility Mode
     *
     * @return zmailPrefStandardClientAccessibilityMode, or false if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=689)
    public boolean isPrefStandardClientAccessibilityMode() {
        return getBooleanAttr(Provisioning.A_zmailPrefStandardClientAccessibilityMode, false);
    }

    /**
     * whether standard client should operate in accessibility Mode
     *
     * @param zmailPrefStandardClientAccessibilityMode new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=689)
    public void setPrefStandardClientAccessibilityMode(boolean zmailPrefStandardClientAccessibilityMode) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefStandardClientAccessibilityMode, zmailPrefStandardClientAccessibilityMode ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether standard client should operate in accessibility Mode
     *
     * @param zmailPrefStandardClientAccessibilityMode new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=689)
    public Map<String,Object> setPrefStandardClientAccessibilityMode(boolean zmailPrefStandardClientAccessibilityMode, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefStandardClientAccessibilityMode, zmailPrefStandardClientAccessibilityMode ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether standard client should operate in accessibility Mode
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=689)
    public void unsetPrefStandardClientAccessibilityMode() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefStandardClientAccessibilityMode, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether standard client should operate in accessibility Mode
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=689)
    public Map<String,Object> unsetPrefStandardClientAccessibilityMode(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefStandardClientAccessibilityMode, "");
        return attrs;
    }

    /**
     * whether or not tag tree is expanded
     *
     * @return zmailPrefTagTreeOpen, or true if unset
     *
     * @since ZCS 5.0.5
     */
    @ZAttr(id=633)
    public boolean isPrefTagTreeOpen() {
        return getBooleanAttr(Provisioning.A_zmailPrefTagTreeOpen, true);
    }

    /**
     * whether or not tag tree is expanded
     *
     * @param zmailPrefTagTreeOpen new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.5
     */
    @ZAttr(id=633)
    public void setPrefTagTreeOpen(boolean zmailPrefTagTreeOpen) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefTagTreeOpen, zmailPrefTagTreeOpen ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether or not tag tree is expanded
     *
     * @param zmailPrefTagTreeOpen new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.5
     */
    @ZAttr(id=633)
    public Map<String,Object> setPrefTagTreeOpen(boolean zmailPrefTagTreeOpen, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefTagTreeOpen, zmailPrefTagTreeOpen ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether or not tag tree is expanded
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.5
     */
    @ZAttr(id=633)
    public void unsetPrefTagTreeOpen() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefTagTreeOpen, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether or not tag tree is expanded
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.5
     */
    @ZAttr(id=633)
    public Map<String,Object> unsetPrefTagTreeOpen(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefTagTreeOpen, "");
        return attrs;
    }

    /**
     * preferred task filtering option in UI
     *
     * <p>Valid values: [DEFERRED, WAITING, COMPLETED, TODO, INPROGRESS, NOTSTARTED]
     *
     * @return zmailPrefTasksFilterBy, or null if unset and/or has invalid value
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1323)
    public ZAttrProvisioning.PrefTasksFilterBy getPrefTasksFilterBy() {
        try { String v = getAttr(Provisioning.A_zmailPrefTasksFilterBy); return v == null ? null : ZAttrProvisioning.PrefTasksFilterBy.fromString(v); } catch(org.zmail.common.service.ServiceException e) { return null; }
    }

    /**
     * preferred task filtering option in UI
     *
     * <p>Valid values: [DEFERRED, WAITING, COMPLETED, TODO, INPROGRESS, NOTSTARTED]
     *
     * @return zmailPrefTasksFilterBy, or null if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1323)
    public String getPrefTasksFilterByAsString() {
        return getAttr(Provisioning.A_zmailPrefTasksFilterBy, null);
    }

    /**
     * preferred task filtering option in UI
     *
     * <p>Valid values: [DEFERRED, WAITING, COMPLETED, TODO, INPROGRESS, NOTSTARTED]
     *
     * @param zmailPrefTasksFilterBy new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1323)
    public void setPrefTasksFilterBy(ZAttrProvisioning.PrefTasksFilterBy zmailPrefTasksFilterBy) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefTasksFilterBy, zmailPrefTasksFilterBy.toString());
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * preferred task filtering option in UI
     *
     * <p>Valid values: [DEFERRED, WAITING, COMPLETED, TODO, INPROGRESS, NOTSTARTED]
     *
     * @param zmailPrefTasksFilterBy new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1323)
    public Map<String,Object> setPrefTasksFilterBy(ZAttrProvisioning.PrefTasksFilterBy zmailPrefTasksFilterBy, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefTasksFilterBy, zmailPrefTasksFilterBy.toString());
        return attrs;
    }

    /**
     * preferred task filtering option in UI
     *
     * <p>Valid values: [DEFERRED, WAITING, COMPLETED, TODO, INPROGRESS, NOTSTARTED]
     *
     * @param zmailPrefTasksFilterBy new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1323)
    public void setPrefTasksFilterByAsString(String zmailPrefTasksFilterBy) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefTasksFilterBy, zmailPrefTasksFilterBy);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * preferred task filtering option in UI
     *
     * <p>Valid values: [DEFERRED, WAITING, COMPLETED, TODO, INPROGRESS, NOTSTARTED]
     *
     * @param zmailPrefTasksFilterBy new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1323)
    public Map<String,Object> setPrefTasksFilterByAsString(String zmailPrefTasksFilterBy, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefTasksFilterBy, zmailPrefTasksFilterBy);
        return attrs;
    }

    /**
     * preferred task filtering option in UI
     *
     * <p>Valid values: [DEFERRED, WAITING, COMPLETED, TODO, INPROGRESS, NOTSTARTED]
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1323)
    public void unsetPrefTasksFilterBy() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefTasksFilterBy, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * preferred task filtering option in UI
     *
     * <p>Valid values: [DEFERRED, WAITING, COMPLETED, TODO, INPROGRESS, NOTSTARTED]
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1323)
    public Map<String,Object> unsetPrefTasksFilterBy(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefTasksFilterBy, "");
        return attrs;
    }

    /**
     * where the reading pane is displayed for tasks
     *
     * <p>Valid values: [off, bottom, right]
     *
     * @return zmailPrefTasksReadingPaneLocation, or ZAttrProvisioning.PrefTasksReadingPaneLocation.right if unset and/or has invalid value
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1151)
    public ZAttrProvisioning.PrefTasksReadingPaneLocation getPrefTasksReadingPaneLocation() {
        try { String v = getAttr(Provisioning.A_zmailPrefTasksReadingPaneLocation); return v == null ? ZAttrProvisioning.PrefTasksReadingPaneLocation.right : ZAttrProvisioning.PrefTasksReadingPaneLocation.fromString(v); } catch(org.zmail.common.service.ServiceException e) { return ZAttrProvisioning.PrefTasksReadingPaneLocation.right; }
    }

    /**
     * where the reading pane is displayed for tasks
     *
     * <p>Valid values: [off, bottom, right]
     *
     * @return zmailPrefTasksReadingPaneLocation, or "right" if unset
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1151)
    public String getPrefTasksReadingPaneLocationAsString() {
        return getAttr(Provisioning.A_zmailPrefTasksReadingPaneLocation, "right");
    }

    /**
     * where the reading pane is displayed for tasks
     *
     * <p>Valid values: [off, bottom, right]
     *
     * @param zmailPrefTasksReadingPaneLocation new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1151)
    public void setPrefTasksReadingPaneLocation(ZAttrProvisioning.PrefTasksReadingPaneLocation zmailPrefTasksReadingPaneLocation) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefTasksReadingPaneLocation, zmailPrefTasksReadingPaneLocation.toString());
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * where the reading pane is displayed for tasks
     *
     * <p>Valid values: [off, bottom, right]
     *
     * @param zmailPrefTasksReadingPaneLocation new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1151)
    public Map<String,Object> setPrefTasksReadingPaneLocation(ZAttrProvisioning.PrefTasksReadingPaneLocation zmailPrefTasksReadingPaneLocation, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefTasksReadingPaneLocation, zmailPrefTasksReadingPaneLocation.toString());
        return attrs;
    }

    /**
     * where the reading pane is displayed for tasks
     *
     * <p>Valid values: [off, bottom, right]
     *
     * @param zmailPrefTasksReadingPaneLocation new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1151)
    public void setPrefTasksReadingPaneLocationAsString(String zmailPrefTasksReadingPaneLocation) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefTasksReadingPaneLocation, zmailPrefTasksReadingPaneLocation);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * where the reading pane is displayed for tasks
     *
     * <p>Valid values: [off, bottom, right]
     *
     * @param zmailPrefTasksReadingPaneLocation new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1151)
    public Map<String,Object> setPrefTasksReadingPaneLocationAsString(String zmailPrefTasksReadingPaneLocation, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefTasksReadingPaneLocation, zmailPrefTasksReadingPaneLocation);
        return attrs;
    }

    /**
     * where the reading pane is displayed for tasks
     *
     * <p>Valid values: [off, bottom, right]
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1151)
    public void unsetPrefTasksReadingPaneLocation() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefTasksReadingPaneLocation, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * where the reading pane is displayed for tasks
     *
     * <p>Valid values: [off, bottom, right]
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.0.0
     */
    @ZAttr(id=1151)
    public Map<String,Object> unsetPrefTasksReadingPaneLocation(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefTasksReadingPaneLocation, "");
        return attrs;
    }

    /**
     * time zone of user or COS
     *
     * @return zmailPrefTimeZoneId, or empty array if unset
     */
    @ZAttr(id=235)
    public String[] getPrefTimeZoneId() {
        String[] value = getMultiAttr(Provisioning.A_zmailPrefTimeZoneId); return value.length > 0 ? value : new String[] {"America/Los_Angeles"};
    }

    /**
     * time zone of user or COS
     *
     * @param zmailPrefTimeZoneId new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=235)
    public void setPrefTimeZoneId(String[] zmailPrefTimeZoneId) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefTimeZoneId, zmailPrefTimeZoneId);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * time zone of user or COS
     *
     * @param zmailPrefTimeZoneId new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=235)
    public Map<String,Object> setPrefTimeZoneId(String[] zmailPrefTimeZoneId, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefTimeZoneId, zmailPrefTimeZoneId);
        return attrs;
    }

    /**
     * time zone of user or COS
     *
     * @param zmailPrefTimeZoneId new to add to existing values
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=235)
    public void addPrefTimeZoneId(String zmailPrefTimeZoneId) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "+" + Provisioning.A_zmailPrefTimeZoneId, zmailPrefTimeZoneId);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * time zone of user or COS
     *
     * @param zmailPrefTimeZoneId new to add to existing values
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=235)
    public Map<String,Object> addPrefTimeZoneId(String zmailPrefTimeZoneId, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "+" + Provisioning.A_zmailPrefTimeZoneId, zmailPrefTimeZoneId);
        return attrs;
    }

    /**
     * time zone of user or COS
     *
     * @param zmailPrefTimeZoneId existing value to remove
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=235)
    public void removePrefTimeZoneId(String zmailPrefTimeZoneId) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "-" + Provisioning.A_zmailPrefTimeZoneId, zmailPrefTimeZoneId);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * time zone of user or COS
     *
     * @param zmailPrefTimeZoneId existing value to remove
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=235)
    public Map<String,Object> removePrefTimeZoneId(String zmailPrefTimeZoneId, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "-" + Provisioning.A_zmailPrefTimeZoneId, zmailPrefTimeZoneId);
        return attrs;
    }

    /**
     * time zone of user or COS
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=235)
    public void unsetPrefTimeZoneId() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefTimeZoneId, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * time zone of user or COS
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=235)
    public Map<String,Object> unsetPrefTimeZoneId(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefTimeZoneId, "");
        return attrs;
    }

    /**
     * Retention period of messages in the Trash folder. 0 means that all
     * messages will be retained. This user-modifiable attribute works in
     * conjunction with zmailMailTrashLifetime, which is admin-modifiable.
     * The shorter duration is used. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * <p>Use getPrefTrashLifetimeAsString to access value as a string.
     *
     * @see #getPrefTrashLifetimeAsString()
     *
     * @return zmailPrefTrashLifetime in millseconds, or 0 (0)  if unset
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=541)
    public long getPrefTrashLifetime() {
        return getTimeInterval(Provisioning.A_zmailPrefTrashLifetime, 0L);
    }

    /**
     * Retention period of messages in the Trash folder. 0 means that all
     * messages will be retained. This user-modifiable attribute works in
     * conjunction with zmailMailTrashLifetime, which is admin-modifiable.
     * The shorter duration is used. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @return zmailPrefTrashLifetime, or "0" if unset
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=541)
    public String getPrefTrashLifetimeAsString() {
        return getAttr(Provisioning.A_zmailPrefTrashLifetime, "0");
    }

    /**
     * Retention period of messages in the Trash folder. 0 means that all
     * messages will be retained. This user-modifiable attribute works in
     * conjunction with zmailMailTrashLifetime, which is admin-modifiable.
     * The shorter duration is used. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param zmailPrefTrashLifetime new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=541)
    public void setPrefTrashLifetime(String zmailPrefTrashLifetime) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefTrashLifetime, zmailPrefTrashLifetime);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Retention period of messages in the Trash folder. 0 means that all
     * messages will be retained. This user-modifiable attribute works in
     * conjunction with zmailMailTrashLifetime, which is admin-modifiable.
     * The shorter duration is used. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param zmailPrefTrashLifetime new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=541)
    public Map<String,Object> setPrefTrashLifetime(String zmailPrefTrashLifetime, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefTrashLifetime, zmailPrefTrashLifetime);
        return attrs;
    }

    /**
     * Retention period of messages in the Trash folder. 0 means that all
     * messages will be retained. This user-modifiable attribute works in
     * conjunction with zmailMailTrashLifetime, which is admin-modifiable.
     * The shorter duration is used. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=541)
    public void unsetPrefTrashLifetime() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefTrashLifetime, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Retention period of messages in the Trash folder. 0 means that all
     * messages will be retained. This user-modifiable attribute works in
     * conjunction with zmailMailTrashLifetime, which is admin-modifiable.
     * The shorter duration is used. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=541)
    public Map<String,Object> unsetPrefTrashLifetime(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefTrashLifetime, "");
        return attrs;
    }

    /**
     * whether or not keyboard shortcuts are enabled
     *
     * @return zmailPrefUseKeyboardShortcuts, or true if unset
     */
    @ZAttr(id=61)
    public boolean isPrefUseKeyboardShortcuts() {
        return getBooleanAttr(Provisioning.A_zmailPrefUseKeyboardShortcuts, true);
    }

    /**
     * whether or not keyboard shortcuts are enabled
     *
     * @param zmailPrefUseKeyboardShortcuts new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=61)
    public void setPrefUseKeyboardShortcuts(boolean zmailPrefUseKeyboardShortcuts) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefUseKeyboardShortcuts, zmailPrefUseKeyboardShortcuts ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether or not keyboard shortcuts are enabled
     *
     * @param zmailPrefUseKeyboardShortcuts new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=61)
    public Map<String,Object> setPrefUseKeyboardShortcuts(boolean zmailPrefUseKeyboardShortcuts, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefUseKeyboardShortcuts, zmailPrefUseKeyboardShortcuts ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether or not keyboard shortcuts are enabled
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=61)
    public void unsetPrefUseKeyboardShortcuts() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefUseKeyboardShortcuts, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether or not keyboard shortcuts are enabled
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=61)
    public Map<String,Object> unsetPrefUseKeyboardShortcuts(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefUseKeyboardShortcuts, "");
        return attrs;
    }

    /**
     * When composing and sending mail, whether to use RFC 2231 MIME
     * parameter value encoding. If set to FALSE, then RFC 2047 style
     * encoding is used.
     *
     * @return zmailPrefUseRfc2231, or false if unset
     */
    @ZAttr(id=395)
    public boolean isPrefUseRfc2231() {
        return getBooleanAttr(Provisioning.A_zmailPrefUseRfc2231, false);
    }

    /**
     * When composing and sending mail, whether to use RFC 2231 MIME
     * parameter value encoding. If set to FALSE, then RFC 2047 style
     * encoding is used.
     *
     * @param zmailPrefUseRfc2231 new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=395)
    public void setPrefUseRfc2231(boolean zmailPrefUseRfc2231) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefUseRfc2231, zmailPrefUseRfc2231 ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * When composing and sending mail, whether to use RFC 2231 MIME
     * parameter value encoding. If set to FALSE, then RFC 2047 style
     * encoding is used.
     *
     * @param zmailPrefUseRfc2231 new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=395)
    public Map<String,Object> setPrefUseRfc2231(boolean zmailPrefUseRfc2231, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefUseRfc2231, zmailPrefUseRfc2231 ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * When composing and sending mail, whether to use RFC 2231 MIME
     * parameter value encoding. If set to FALSE, then RFC 2047 style
     * encoding is used.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=395)
    public void unsetPrefUseRfc2231() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefUseRfc2231, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * When composing and sending mail, whether to use RFC 2231 MIME
     * parameter value encoding. If set to FALSE, then RFC 2047 style
     * encoding is used.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=395)
    public Map<String,Object> unsetPrefUseRfc2231(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefUseRfc2231, "");
        return attrs;
    }

    /**
     * whether list of well known time zones is displayed in calendar UI
     *
     * @return zmailPrefUseTimeZoneListInCalendar, or false if unset
     */
    @ZAttr(id=236)
    public boolean isPrefUseTimeZoneListInCalendar() {
        return getBooleanAttr(Provisioning.A_zmailPrefUseTimeZoneListInCalendar, false);
    }

    /**
     * whether list of well known time zones is displayed in calendar UI
     *
     * @param zmailPrefUseTimeZoneListInCalendar new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=236)
    public void setPrefUseTimeZoneListInCalendar(boolean zmailPrefUseTimeZoneListInCalendar) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefUseTimeZoneListInCalendar, zmailPrefUseTimeZoneListInCalendar ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether list of well known time zones is displayed in calendar UI
     *
     * @param zmailPrefUseTimeZoneListInCalendar new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=236)
    public Map<String,Object> setPrefUseTimeZoneListInCalendar(boolean zmailPrefUseTimeZoneListInCalendar, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefUseTimeZoneListInCalendar, zmailPrefUseTimeZoneListInCalendar ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether list of well known time zones is displayed in calendar UI
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=236)
    public void unsetPrefUseTimeZoneListInCalendar() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefUseTimeZoneListInCalendar, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether list of well known time zones is displayed in calendar UI
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=236)
    public Map<String,Object> unsetPrefUseTimeZoneListInCalendar(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefUseTimeZoneListInCalendar, "");
        return attrs;
    }

    /**
     * number of voice messages/call logs per page
     *
     * @return zmailPrefVoiceItemsPerPage, or 25 if unset
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=526)
    public int getPrefVoiceItemsPerPage() {
        return getIntAttr(Provisioning.A_zmailPrefVoiceItemsPerPage, 25);
    }

    /**
     * number of voice messages/call logs per page
     *
     * @param zmailPrefVoiceItemsPerPage new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=526)
    public void setPrefVoiceItemsPerPage(int zmailPrefVoiceItemsPerPage) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefVoiceItemsPerPage, Integer.toString(zmailPrefVoiceItemsPerPage));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * number of voice messages/call logs per page
     *
     * @param zmailPrefVoiceItemsPerPage new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=526)
    public Map<String,Object> setPrefVoiceItemsPerPage(int zmailPrefVoiceItemsPerPage, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefVoiceItemsPerPage, Integer.toString(zmailPrefVoiceItemsPerPage));
        return attrs;
    }

    /**
     * number of voice messages/call logs per page
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=526)
    public void unsetPrefVoiceItemsPerPage() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefVoiceItemsPerPage, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * number of voice messages/call logs per page
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.0
     */
    @ZAttr(id=526)
    public Map<String,Object> unsetPrefVoiceItemsPerPage(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefVoiceItemsPerPage, "");
        return attrs;
    }

    /**
     * whether to display a warning when users try to navigate away from ZCS
     *
     * @return zmailPrefWarnOnExit, or true if unset
     */
    @ZAttr(id=456)
    public boolean isPrefWarnOnExit() {
        return getBooleanAttr(Provisioning.A_zmailPrefWarnOnExit, true);
    }

    /**
     * whether to display a warning when users try to navigate away from ZCS
     *
     * @param zmailPrefWarnOnExit new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=456)
    public void setPrefWarnOnExit(boolean zmailPrefWarnOnExit) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefWarnOnExit, zmailPrefWarnOnExit ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to display a warning when users try to navigate away from ZCS
     *
     * @param zmailPrefWarnOnExit new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=456)
    public Map<String,Object> setPrefWarnOnExit(boolean zmailPrefWarnOnExit, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefWarnOnExit, zmailPrefWarnOnExit ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether to display a warning when users try to navigate away from ZCS
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=456)
    public void unsetPrefWarnOnExit() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefWarnOnExit, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether to display a warning when users try to navigate away from ZCS
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=456)
    public Map<String,Object> unsetPrefWarnOnExit(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefWarnOnExit, "");
        return attrs;
    }

    /**
     * whether or not zimlet tree is expanded
     *
     * @return zmailPrefZimletTreeOpen, or false if unset
     *
     * @since ZCS 5.0.5
     */
    @ZAttr(id=638)
    public boolean isPrefZimletTreeOpen() {
        return getBooleanAttr(Provisioning.A_zmailPrefZimletTreeOpen, false);
    }

    /**
     * whether or not zimlet tree is expanded
     *
     * @param zmailPrefZimletTreeOpen new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.5
     */
    @ZAttr(id=638)
    public void setPrefZimletTreeOpen(boolean zmailPrefZimletTreeOpen) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefZimletTreeOpen, zmailPrefZimletTreeOpen ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether or not zimlet tree is expanded
     *
     * @param zmailPrefZimletTreeOpen new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.5
     */
    @ZAttr(id=638)
    public Map<String,Object> setPrefZimletTreeOpen(boolean zmailPrefZimletTreeOpen, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefZimletTreeOpen, zmailPrefZimletTreeOpen ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether or not zimlet tree is expanded
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.5
     */
    @ZAttr(id=638)
    public void unsetPrefZimletTreeOpen() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefZimletTreeOpen, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether or not zimlet tree is expanded
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.5
     */
    @ZAttr(id=638)
    public Map<String,Object> unsetPrefZimletTreeOpen(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefZimletTreeOpen, "");
        return attrs;
    }

    /**
     * zimlets user wants to see in the UI
     *
     * @return zmailPrefZimlets, or empty array if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=765)
    public String[] getPrefZimlets() {
        return getMultiAttr(Provisioning.A_zmailPrefZimlets);
    }

    /**
     * zimlets user wants to see in the UI
     *
     * @param zmailPrefZimlets new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=765)
    public void setPrefZimlets(String[] zmailPrefZimlets) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefZimlets, zmailPrefZimlets);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * zimlets user wants to see in the UI
     *
     * @param zmailPrefZimlets new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=765)
    public Map<String,Object> setPrefZimlets(String[] zmailPrefZimlets, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefZimlets, zmailPrefZimlets);
        return attrs;
    }

    /**
     * zimlets user wants to see in the UI
     *
     * @param zmailPrefZimlets new to add to existing values
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=765)
    public void addPrefZimlets(String zmailPrefZimlets) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "+" + Provisioning.A_zmailPrefZimlets, zmailPrefZimlets);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * zimlets user wants to see in the UI
     *
     * @param zmailPrefZimlets new to add to existing values
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=765)
    public Map<String,Object> addPrefZimlets(String zmailPrefZimlets, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "+" + Provisioning.A_zmailPrefZimlets, zmailPrefZimlets);
        return attrs;
    }

    /**
     * zimlets user wants to see in the UI
     *
     * @param zmailPrefZimlets existing value to remove
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=765)
    public void removePrefZimlets(String zmailPrefZimlets) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "-" + Provisioning.A_zmailPrefZimlets, zmailPrefZimlets);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * zimlets user wants to see in the UI
     *
     * @param zmailPrefZimlets existing value to remove
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=765)
    public Map<String,Object> removePrefZimlets(String zmailPrefZimlets, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "-" + Provisioning.A_zmailPrefZimlets, zmailPrefZimlets);
        return attrs;
    }

    /**
     * zimlets user wants to see in the UI
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=765)
    public void unsetPrefZimlets() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefZimlets, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * zimlets user wants to see in the UI
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=765)
    public Map<String,Object> unsetPrefZimlets(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPrefZimlets, "");
        return attrs;
    }

    /**
     * Allowed domains for Proxy servlet
     *
     * @return zmailProxyAllowedDomains, or empty array if unset
     */
    @ZAttr(id=294)
    public String[] getProxyAllowedDomains() {
        return getMultiAttr(Provisioning.A_zmailProxyAllowedDomains);
    }

    /**
     * Allowed domains for Proxy servlet
     *
     * @param zmailProxyAllowedDomains new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=294)
    public void setProxyAllowedDomains(String[] zmailProxyAllowedDomains) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailProxyAllowedDomains, zmailProxyAllowedDomains);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Allowed domains for Proxy servlet
     *
     * @param zmailProxyAllowedDomains new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=294)
    public Map<String,Object> setProxyAllowedDomains(String[] zmailProxyAllowedDomains, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailProxyAllowedDomains, zmailProxyAllowedDomains);
        return attrs;
    }

    /**
     * Allowed domains for Proxy servlet
     *
     * @param zmailProxyAllowedDomains new to add to existing values
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=294)
    public void addProxyAllowedDomains(String zmailProxyAllowedDomains) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "+" + Provisioning.A_zmailProxyAllowedDomains, zmailProxyAllowedDomains);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Allowed domains for Proxy servlet
     *
     * @param zmailProxyAllowedDomains new to add to existing values
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=294)
    public Map<String,Object> addProxyAllowedDomains(String zmailProxyAllowedDomains, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "+" + Provisioning.A_zmailProxyAllowedDomains, zmailProxyAllowedDomains);
        return attrs;
    }

    /**
     * Allowed domains for Proxy servlet
     *
     * @param zmailProxyAllowedDomains existing value to remove
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=294)
    public void removeProxyAllowedDomains(String zmailProxyAllowedDomains) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "-" + Provisioning.A_zmailProxyAllowedDomains, zmailProxyAllowedDomains);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Allowed domains for Proxy servlet
     *
     * @param zmailProxyAllowedDomains existing value to remove
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=294)
    public Map<String,Object> removeProxyAllowedDomains(String zmailProxyAllowedDomains, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "-" + Provisioning.A_zmailProxyAllowedDomains, zmailProxyAllowedDomains);
        return attrs;
    }

    /**
     * Allowed domains for Proxy servlet
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=294)
    public void unsetProxyAllowedDomains() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailProxyAllowedDomains, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Allowed domains for Proxy servlet
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=294)
    public Map<String,Object> unsetProxyAllowedDomains(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailProxyAllowedDomains, "");
        return attrs;
    }

    /**
     * Deprecated since: 7.2.1. Deprecated per bug 74769. Orig desc: Content
     * types that can be cached by proxy servlet
     *
     * @return zmailProxyCacheableContentTypes, or empty array if unset
     */
    @ZAttr(id=303)
    public String[] getProxyCacheableContentTypes() {
        String[] value = getMultiAttr(Provisioning.A_zmailProxyCacheableContentTypes); return value.length > 0 ? value : new String[] {"text/javascript","application/x-javascript"};
    }

    /**
     * Deprecated since: 7.2.1. Deprecated per bug 74769. Orig desc: Content
     * types that can be cached by proxy servlet
     *
     * @param zmailProxyCacheableContentTypes new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=303)
    public void setProxyCacheableContentTypes(String[] zmailProxyCacheableContentTypes) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailProxyCacheableContentTypes, zmailProxyCacheableContentTypes);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Deprecated since: 7.2.1. Deprecated per bug 74769. Orig desc: Content
     * types that can be cached by proxy servlet
     *
     * @param zmailProxyCacheableContentTypes new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=303)
    public Map<String,Object> setProxyCacheableContentTypes(String[] zmailProxyCacheableContentTypes, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailProxyCacheableContentTypes, zmailProxyCacheableContentTypes);
        return attrs;
    }

    /**
     * Deprecated since: 7.2.1. Deprecated per bug 74769. Orig desc: Content
     * types that can be cached by proxy servlet
     *
     * @param zmailProxyCacheableContentTypes new to add to existing values
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=303)
    public void addProxyCacheableContentTypes(String zmailProxyCacheableContentTypes) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "+" + Provisioning.A_zmailProxyCacheableContentTypes, zmailProxyCacheableContentTypes);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Deprecated since: 7.2.1. Deprecated per bug 74769. Orig desc: Content
     * types that can be cached by proxy servlet
     *
     * @param zmailProxyCacheableContentTypes new to add to existing values
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=303)
    public Map<String,Object> addProxyCacheableContentTypes(String zmailProxyCacheableContentTypes, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "+" + Provisioning.A_zmailProxyCacheableContentTypes, zmailProxyCacheableContentTypes);
        return attrs;
    }

    /**
     * Deprecated since: 7.2.1. Deprecated per bug 74769. Orig desc: Content
     * types that can be cached by proxy servlet
     *
     * @param zmailProxyCacheableContentTypes existing value to remove
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=303)
    public void removeProxyCacheableContentTypes(String zmailProxyCacheableContentTypes) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "-" + Provisioning.A_zmailProxyCacheableContentTypes, zmailProxyCacheableContentTypes);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Deprecated since: 7.2.1. Deprecated per bug 74769. Orig desc: Content
     * types that can be cached by proxy servlet
     *
     * @param zmailProxyCacheableContentTypes existing value to remove
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=303)
    public Map<String,Object> removeProxyCacheableContentTypes(String zmailProxyCacheableContentTypes, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "-" + Provisioning.A_zmailProxyCacheableContentTypes, zmailProxyCacheableContentTypes);
        return attrs;
    }

    /**
     * Deprecated since: 7.2.1. Deprecated per bug 74769. Orig desc: Content
     * types that can be cached by proxy servlet
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=303)
    public void unsetProxyCacheableContentTypes() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailProxyCacheableContentTypes, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Deprecated since: 7.2.1. Deprecated per bug 74769. Orig desc: Content
     * types that can be cached by proxy servlet
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=303)
    public Map<String,Object> unsetProxyCacheableContentTypes(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailProxyCacheableContentTypes, "");
        return attrs;
    }

    /**
     * Maximum allowed lifetime of public shares. A value of 0 indicates that
     * there&#039;s no limit on a public share&#039;s lifetime. . Must be in
     * valid duration format: {digits}{time-unit}. digits: 0-9, time-unit:
     * [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days, ms -
     * milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * <p>Use getPublicShareLifetimeAsString to access value as a string.
     *
     * @see #getPublicShareLifetimeAsString()
     *
     * @return zmailPublicShareLifetime in millseconds, or 0 (0)  if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1355)
    public long getPublicShareLifetime() {
        return getTimeInterval(Provisioning.A_zmailPublicShareLifetime, 0L);
    }

    /**
     * Maximum allowed lifetime of public shares. A value of 0 indicates that
     * there&#039;s no limit on a public share&#039;s lifetime. . Must be in
     * valid duration format: {digits}{time-unit}. digits: 0-9, time-unit:
     * [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days, ms -
     * milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @return zmailPublicShareLifetime, or "0" if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1355)
    public String getPublicShareLifetimeAsString() {
        return getAttr(Provisioning.A_zmailPublicShareLifetime, "0");
    }

    /**
     * Maximum allowed lifetime of public shares. A value of 0 indicates that
     * there&#039;s no limit on a public share&#039;s lifetime. . Must be in
     * valid duration format: {digits}{time-unit}. digits: 0-9, time-unit:
     * [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days, ms -
     * milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @param zmailPublicShareLifetime new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1355)
    public void setPublicShareLifetime(String zmailPublicShareLifetime) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPublicShareLifetime, zmailPublicShareLifetime);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Maximum allowed lifetime of public shares. A value of 0 indicates that
     * there&#039;s no limit on a public share&#039;s lifetime. . Must be in
     * valid duration format: {digits}{time-unit}. digits: 0-9, time-unit:
     * [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days, ms -
     * milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @param zmailPublicShareLifetime new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1355)
    public Map<String,Object> setPublicShareLifetime(String zmailPublicShareLifetime, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPublicShareLifetime, zmailPublicShareLifetime);
        return attrs;
    }

    /**
     * Maximum allowed lifetime of public shares. A value of 0 indicates that
     * there&#039;s no limit on a public share&#039;s lifetime. . Must be in
     * valid duration format: {digits}{time-unit}. digits: 0-9, time-unit:
     * [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days, ms -
     * milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1355)
    public void unsetPublicShareLifetime() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPublicShareLifetime, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Maximum allowed lifetime of public shares. A value of 0 indicates that
     * there&#039;s no limit on a public share&#039;s lifetime. . Must be in
     * valid duration format: {digits}{time-unit}. digits: 0-9, time-unit:
     * [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days, ms -
     * milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1355)
    public Map<String,Object> unsetPublicShareLifetime(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPublicShareLifetime, "");
        return attrs;
    }

    /**
     * switch for turning public sharing on/off
     *
     * @return zmailPublicSharingEnabled, or true if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1351)
    public boolean isPublicSharingEnabled() {
        return getBooleanAttr(Provisioning.A_zmailPublicSharingEnabled, true);
    }

    /**
     * switch for turning public sharing on/off
     *
     * @param zmailPublicSharingEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1351)
    public void setPublicSharingEnabled(boolean zmailPublicSharingEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPublicSharingEnabled, zmailPublicSharingEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * switch for turning public sharing on/off
     *
     * @param zmailPublicSharingEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1351)
    public Map<String,Object> setPublicSharingEnabled(boolean zmailPublicSharingEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPublicSharingEnabled, zmailPublicSharingEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * switch for turning public sharing on/off
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1351)
    public void unsetPublicSharingEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPublicSharingEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * switch for turning public sharing on/off
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1351)
    public Map<String,Object> unsetPublicSharingEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailPublicSharingEnabled, "");
        return attrs;
    }

    /**
     * Minimum duration of time between quota warnings.. Must be in valid
     * duration format: {digits}{time-unit}. digits: 0-9, time-unit:
     * [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days, ms -
     * milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * <p>Use getQuotaWarnIntervalAsString to access value as a string.
     *
     * @see #getQuotaWarnIntervalAsString()
     *
     * @return zmailQuotaWarnInterval in millseconds, or 86400000 (1d)  if unset
     */
    @ZAttr(id=485)
    public long getQuotaWarnInterval() {
        return getTimeInterval(Provisioning.A_zmailQuotaWarnInterval, 86400000L);
    }

    /**
     * Minimum duration of time between quota warnings.. Must be in valid
     * duration format: {digits}{time-unit}. digits: 0-9, time-unit:
     * [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days, ms -
     * milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @return zmailQuotaWarnInterval, or "1d" if unset
     */
    @ZAttr(id=485)
    public String getQuotaWarnIntervalAsString() {
        return getAttr(Provisioning.A_zmailQuotaWarnInterval, "1d");
    }

    /**
     * Minimum duration of time between quota warnings.. Must be in valid
     * duration format: {digits}{time-unit}. digits: 0-9, time-unit:
     * [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days, ms -
     * milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @param zmailQuotaWarnInterval new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=485)
    public void setQuotaWarnInterval(String zmailQuotaWarnInterval) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailQuotaWarnInterval, zmailQuotaWarnInterval);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Minimum duration of time between quota warnings.. Must be in valid
     * duration format: {digits}{time-unit}. digits: 0-9, time-unit:
     * [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days, ms -
     * milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @param zmailQuotaWarnInterval new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=485)
    public Map<String,Object> setQuotaWarnInterval(String zmailQuotaWarnInterval, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailQuotaWarnInterval, zmailQuotaWarnInterval);
        return attrs;
    }

    /**
     * Minimum duration of time between quota warnings.. Must be in valid
     * duration format: {digits}{time-unit}. digits: 0-9, time-unit:
     * [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days, ms -
     * milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=485)
    public void unsetQuotaWarnInterval() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailQuotaWarnInterval, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Minimum duration of time between quota warnings.. Must be in valid
     * duration format: {digits}{time-unit}. digits: 0-9, time-unit:
     * [hmsd]|ms. h - hours, m - minutes, s - seconds, d - days, ms -
     * milliseconds. If time unit is not specified, the default is
     * s(seconds).
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=485)
    public Map<String,Object> unsetQuotaWarnInterval(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailQuotaWarnInterval, "");
        return attrs;
    }

    /**
     * Quota warning message template.
     *
     * @return zmailQuotaWarnMessage, or "From: Postmaster <postmaster@${RECIPIENT_DOMAIN}>${NEWLINE}To: ${RECIPIENT_NAME} <${RECIPIENT_ADDRESS}>${NEWLINE}Subject: Quota warning${NEWLINE}Date: ${DATE}${NEWLINE}Content-Type: text/plain${NEWLINE}${NEWLINE}Your mailbox size has reached ${MBOX_SIZE_MB}MB, which is over ${WARN_PERCENT}% of your ${QUOTA_MB}MB quota.${NEWLINE}Please delete some messages to avoid exceeding your quota.${NEWLINE}" if unset
     */
    @ZAttr(id=486)
    public String getQuotaWarnMessage() {
        return getAttr(Provisioning.A_zmailQuotaWarnMessage, "From: Postmaster <postmaster@${RECIPIENT_DOMAIN}>${NEWLINE}To: ${RECIPIENT_NAME} <${RECIPIENT_ADDRESS}>${NEWLINE}Subject: Quota warning${NEWLINE}Date: ${DATE}${NEWLINE}Content-Type: text/plain${NEWLINE}${NEWLINE}Your mailbox size has reached ${MBOX_SIZE_MB}MB, which is over ${WARN_PERCENT}% of your ${QUOTA_MB}MB quota.${NEWLINE}Please delete some messages to avoid exceeding your quota.${NEWLINE}");
    }

    /**
     * Quota warning message template.
     *
     * @param zmailQuotaWarnMessage new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=486)
    public void setQuotaWarnMessage(String zmailQuotaWarnMessage) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailQuotaWarnMessage, zmailQuotaWarnMessage);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Quota warning message template.
     *
     * @param zmailQuotaWarnMessage new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=486)
    public Map<String,Object> setQuotaWarnMessage(String zmailQuotaWarnMessage, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailQuotaWarnMessage, zmailQuotaWarnMessage);
        return attrs;
    }

    /**
     * Quota warning message template.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=486)
    public void unsetQuotaWarnMessage() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailQuotaWarnMessage, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Quota warning message template.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=486)
    public Map<String,Object> unsetQuotaWarnMessage(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailQuotaWarnMessage, "");
        return attrs;
    }

    /**
     * Threshold for quota warning messages.
     *
     * @return zmailQuotaWarnPercent, or 90 if unset
     */
    @ZAttr(id=483)
    public int getQuotaWarnPercent() {
        return getIntAttr(Provisioning.A_zmailQuotaWarnPercent, 90);
    }

    /**
     * Threshold for quota warning messages.
     *
     * @param zmailQuotaWarnPercent new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=483)
    public void setQuotaWarnPercent(int zmailQuotaWarnPercent) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailQuotaWarnPercent, Integer.toString(zmailQuotaWarnPercent));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Threshold for quota warning messages.
     *
     * @param zmailQuotaWarnPercent new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=483)
    public Map<String,Object> setQuotaWarnPercent(int zmailQuotaWarnPercent, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailQuotaWarnPercent, Integer.toString(zmailQuotaWarnPercent));
        return attrs;
    }

    /**
     * Threshold for quota warning messages.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=483)
    public void unsetQuotaWarnPercent() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailQuotaWarnPercent, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Threshold for quota warning messages.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=483)
    public Map<String,Object> unsetQuotaWarnPercent(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailQuotaWarnPercent, "");
        return attrs;
    }

    /**
     * Maximum allowed lifetime of shares to internal users or groups. A
     * value of 0 indicates that there&#039;s no limit on an internal
     * share&#039;s lifetime. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * <p>Use getShareLifetimeAsString to access value as a string.
     *
     * @see #getShareLifetimeAsString()
     *
     * @return zmailShareLifetime in millseconds, or 0 (0)  if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1348)
    public long getShareLifetime() {
        return getTimeInterval(Provisioning.A_zmailShareLifetime, 0L);
    }

    /**
     * Maximum allowed lifetime of shares to internal users or groups. A
     * value of 0 indicates that there&#039;s no limit on an internal
     * share&#039;s lifetime. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @return zmailShareLifetime, or "0" if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1348)
    public String getShareLifetimeAsString() {
        return getAttr(Provisioning.A_zmailShareLifetime, "0");
    }

    /**
     * Maximum allowed lifetime of shares to internal users or groups. A
     * value of 0 indicates that there&#039;s no limit on an internal
     * share&#039;s lifetime. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param zmailShareLifetime new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1348)
    public void setShareLifetime(String zmailShareLifetime) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailShareLifetime, zmailShareLifetime);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Maximum allowed lifetime of shares to internal users or groups. A
     * value of 0 indicates that there&#039;s no limit on an internal
     * share&#039;s lifetime. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param zmailShareLifetime new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1348)
    public Map<String,Object> setShareLifetime(String zmailShareLifetime, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailShareLifetime, zmailShareLifetime);
        return attrs;
    }

    /**
     * Maximum allowed lifetime of shares to internal users or groups. A
     * value of 0 indicates that there&#039;s no limit on an internal
     * share&#039;s lifetime. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1348)
    public void unsetShareLifetime() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailShareLifetime, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Maximum allowed lifetime of shares to internal users or groups. A
     * value of 0 indicates that there&#039;s no limit on an internal
     * share&#039;s lifetime. . Must be in valid duration format:
     * {digits}{time-unit}. digits: 0-9, time-unit: [hmsd]|ms. h - hours, m -
     * minutes, s - seconds, d - days, ms - milliseconds. If time unit is not
     * specified, the default is s(seconds).
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1348)
    public Map<String,Object> unsetShareLifetime(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailShareLifetime, "");
        return attrs;
    }

    /**
     * maximum number of signatures allowed on an account
     *
     * @return zmailSignatureMaxNumEntries, or 20 if unset
     */
    @ZAttr(id=493)
    public int getSignatureMaxNumEntries() {
        return getIntAttr(Provisioning.A_zmailSignatureMaxNumEntries, 20);
    }

    /**
     * maximum number of signatures allowed on an account
     *
     * @param zmailSignatureMaxNumEntries new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=493)
    public void setSignatureMaxNumEntries(int zmailSignatureMaxNumEntries) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailSignatureMaxNumEntries, Integer.toString(zmailSignatureMaxNumEntries));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * maximum number of signatures allowed on an account
     *
     * @param zmailSignatureMaxNumEntries new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=493)
    public Map<String,Object> setSignatureMaxNumEntries(int zmailSignatureMaxNumEntries, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailSignatureMaxNumEntries, Integer.toString(zmailSignatureMaxNumEntries));
        return attrs;
    }

    /**
     * maximum number of signatures allowed on an account
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=493)
    public void unsetSignatureMaxNumEntries() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailSignatureMaxNumEntries, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * maximum number of signatures allowed on an account
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=493)
    public Map<String,Object> unsetSignatureMaxNumEntries(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailSignatureMaxNumEntries, "");
        return attrs;
    }

    /**
     * minimum number of signatures allowed on an account, this is only used
     * in the client
     *
     * @return zmailSignatureMinNumEntries, or 1 if unset
     */
    @ZAttr(id=523)
    public int getSignatureMinNumEntries() {
        return getIntAttr(Provisioning.A_zmailSignatureMinNumEntries, 1);
    }

    /**
     * minimum number of signatures allowed on an account, this is only used
     * in the client
     *
     * @param zmailSignatureMinNumEntries new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=523)
    public void setSignatureMinNumEntries(int zmailSignatureMinNumEntries) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailSignatureMinNumEntries, Integer.toString(zmailSignatureMinNumEntries));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * minimum number of signatures allowed on an account, this is only used
     * in the client
     *
     * @param zmailSignatureMinNumEntries new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=523)
    public Map<String,Object> setSignatureMinNumEntries(int zmailSignatureMinNumEntries, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailSignatureMinNumEntries, Integer.toString(zmailSignatureMinNumEntries));
        return attrs;
    }

    /**
     * minimum number of signatures allowed on an account, this is only used
     * in the client
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=523)
    public void unsetSignatureMinNumEntries() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailSignatureMinNumEntries, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * minimum number of signatures allowed on an account, this is only used
     * in the client
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=523)
    public Map<String,Object> unsetSignatureMinNumEntries(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailSignatureMinNumEntries, "");
        return attrs;
    }

    /**
     * Whether to enable smtp debug trace
     *
     * @return zmailSmtpEnableTrace, or false if unset
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=793)
    public boolean isSmtpEnableTrace() {
        return getBooleanAttr(Provisioning.A_zmailSmtpEnableTrace, false);
    }

    /**
     * Whether to enable smtp debug trace
     *
     * @param zmailSmtpEnableTrace new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=793)
    public void setSmtpEnableTrace(boolean zmailSmtpEnableTrace) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailSmtpEnableTrace, zmailSmtpEnableTrace ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Whether to enable smtp debug trace
     *
     * @param zmailSmtpEnableTrace new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=793)
    public Map<String,Object> setSmtpEnableTrace(boolean zmailSmtpEnableTrace, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailSmtpEnableTrace, zmailSmtpEnableTrace ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * Whether to enable smtp debug trace
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=793)
    public void unsetSmtpEnableTrace() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailSmtpEnableTrace, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Whether to enable smtp debug trace
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_BETA1
     */
    @ZAttr(id=793)
    public Map<String,Object> unsetSmtpEnableTrace(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailSmtpEnableTrace, "");
        return attrs;
    }

    /**
     * If TRUE, the address for MAIL FROM in the SMTP session will always be
     * set to the email address of the account. If FALSE, the address will be
     * the value of the Sender or From header in the outgoing message, in
     * that order.
     *
     * @return zmailSmtpRestrictEnvelopeFrom, or true if unset
     *
     * @since ZCS 6.0.5
     */
    @ZAttr(id=1077)
    public boolean isSmtpRestrictEnvelopeFrom() {
        return getBooleanAttr(Provisioning.A_zmailSmtpRestrictEnvelopeFrom, true);
    }

    /**
     * If TRUE, the address for MAIL FROM in the SMTP session will always be
     * set to the email address of the account. If FALSE, the address will be
     * the value of the Sender or From header in the outgoing message, in
     * that order.
     *
     * @param zmailSmtpRestrictEnvelopeFrom new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.5
     */
    @ZAttr(id=1077)
    public void setSmtpRestrictEnvelopeFrom(boolean zmailSmtpRestrictEnvelopeFrom) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailSmtpRestrictEnvelopeFrom, zmailSmtpRestrictEnvelopeFrom ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * If TRUE, the address for MAIL FROM in the SMTP session will always be
     * set to the email address of the account. If FALSE, the address will be
     * the value of the Sender or From header in the outgoing message, in
     * that order.
     *
     * @param zmailSmtpRestrictEnvelopeFrom new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.5
     */
    @ZAttr(id=1077)
    public Map<String,Object> setSmtpRestrictEnvelopeFrom(boolean zmailSmtpRestrictEnvelopeFrom, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailSmtpRestrictEnvelopeFrom, zmailSmtpRestrictEnvelopeFrom ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * If TRUE, the address for MAIL FROM in the SMTP session will always be
     * set to the email address of the account. If FALSE, the address will be
     * the value of the Sender or From header in the outgoing message, in
     * that order.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.5
     */
    @ZAttr(id=1077)
    public void unsetSmtpRestrictEnvelopeFrom() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailSmtpRestrictEnvelopeFrom, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * If TRUE, the address for MAIL FROM in the SMTP session will always be
     * set to the email address of the account. If FALSE, the address will be
     * the value of the Sender or From header in the outgoing message, in
     * that order.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.5
     */
    @ZAttr(id=1077)
    public Map<String,Object> unsetSmtpRestrictEnvelopeFrom(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailSmtpRestrictEnvelopeFrom, "");
        return attrs;
    }

    /**
     * URL for Socialcast integration
     *
     * @return zmailSocialcastURL, or null if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1389)
    public String getSocialcastURL() {
        return getAttr(Provisioning.A_zmailSocialcastURL, null);
    }

    /**
     * URL for Socialcast integration
     *
     * @param zmailSocialcastURL new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1389)
    public void setSocialcastURL(String zmailSocialcastURL) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailSocialcastURL, zmailSocialcastURL);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * URL for Socialcast integration
     *
     * @param zmailSocialcastURL new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1389)
    public Map<String,Object> setSocialcastURL(String zmailSocialcastURL, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailSocialcastURL, zmailSocialcastURL);
        return attrs;
    }

    /**
     * URL for Socialcast integration
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1389)
    public void unsetSocialcastURL() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailSocialcastURL, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * URL for Socialcast integration
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1389)
    public Map<String,Object> unsetSocialcastURL(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailSocialcastURL, "");
        return attrs;
    }

    /**
     * If TRUE, spam messages will be affected by user mail filters instead
     * of being automatically filed into the Junk folder.
     *
     * @return zmailSpamApplyUserFilters, or false if unset
     *
     * @since ZCS 5.0.2
     */
    @ZAttr(id=604)
    public boolean isSpamApplyUserFilters() {
        return getBooleanAttr(Provisioning.A_zmailSpamApplyUserFilters, false);
    }

    /**
     * If TRUE, spam messages will be affected by user mail filters instead
     * of being automatically filed into the Junk folder.
     *
     * @param zmailSpamApplyUserFilters new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.2
     */
    @ZAttr(id=604)
    public void setSpamApplyUserFilters(boolean zmailSpamApplyUserFilters) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailSpamApplyUserFilters, zmailSpamApplyUserFilters ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * If TRUE, spam messages will be affected by user mail filters instead
     * of being automatically filed into the Junk folder.
     *
     * @param zmailSpamApplyUserFilters new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.2
     */
    @ZAttr(id=604)
    public Map<String,Object> setSpamApplyUserFilters(boolean zmailSpamApplyUserFilters, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailSpamApplyUserFilters, zmailSpamApplyUserFilters ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * If TRUE, spam messages will be affected by user mail filters instead
     * of being automatically filed into the Junk folder.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 5.0.2
     */
    @ZAttr(id=604)
    public void unsetSpamApplyUserFilters() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailSpamApplyUserFilters, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * If TRUE, spam messages will be affected by user mail filters instead
     * of being automatically filed into the Junk folder.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 5.0.2
     */
    @ZAttr(id=604)
    public Map<String,Object> unsetSpamApplyUserFilters(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailSpamApplyUserFilters, "");
        return attrs;
    }

    /**
     * description of the custom tab in the Preferences page in HTML client
     * in the format {tab-name},{associated-URL}
     *
     * @return zmailStandardClientCustomPrefTab, or empty array if unset
     *
     * @since ZCS 7.1.3
     */
    @ZAttr(id=1267)
    public String[] getStandardClientCustomPrefTab() {
        return getMultiAttr(Provisioning.A_zmailStandardClientCustomPrefTab);
    }

    /**
     * description of the custom tab in the Preferences page in HTML client
     * in the format {tab-name},{associated-URL}
     *
     * @param zmailStandardClientCustomPrefTab new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.1.3
     */
    @ZAttr(id=1267)
    public void setStandardClientCustomPrefTab(String[] zmailStandardClientCustomPrefTab) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailStandardClientCustomPrefTab, zmailStandardClientCustomPrefTab);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * description of the custom tab in the Preferences page in HTML client
     * in the format {tab-name},{associated-URL}
     *
     * @param zmailStandardClientCustomPrefTab new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.1.3
     */
    @ZAttr(id=1267)
    public Map<String,Object> setStandardClientCustomPrefTab(String[] zmailStandardClientCustomPrefTab, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailStandardClientCustomPrefTab, zmailStandardClientCustomPrefTab);
        return attrs;
    }

    /**
     * description of the custom tab in the Preferences page in HTML client
     * in the format {tab-name},{associated-URL}
     *
     * @param zmailStandardClientCustomPrefTab new to add to existing values
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.1.3
     */
    @ZAttr(id=1267)
    public void addStandardClientCustomPrefTab(String zmailStandardClientCustomPrefTab) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "+" + Provisioning.A_zmailStandardClientCustomPrefTab, zmailStandardClientCustomPrefTab);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * description of the custom tab in the Preferences page in HTML client
     * in the format {tab-name},{associated-URL}
     *
     * @param zmailStandardClientCustomPrefTab new to add to existing values
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.1.3
     */
    @ZAttr(id=1267)
    public Map<String,Object> addStandardClientCustomPrefTab(String zmailStandardClientCustomPrefTab, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "+" + Provisioning.A_zmailStandardClientCustomPrefTab, zmailStandardClientCustomPrefTab);
        return attrs;
    }

    /**
     * description of the custom tab in the Preferences page in HTML client
     * in the format {tab-name},{associated-URL}
     *
     * @param zmailStandardClientCustomPrefTab existing value to remove
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.1.3
     */
    @ZAttr(id=1267)
    public void removeStandardClientCustomPrefTab(String zmailStandardClientCustomPrefTab) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "-" + Provisioning.A_zmailStandardClientCustomPrefTab, zmailStandardClientCustomPrefTab);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * description of the custom tab in the Preferences page in HTML client
     * in the format {tab-name},{associated-URL}
     *
     * @param zmailStandardClientCustomPrefTab existing value to remove
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.1.3
     */
    @ZAttr(id=1267)
    public Map<String,Object> removeStandardClientCustomPrefTab(String zmailStandardClientCustomPrefTab, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "-" + Provisioning.A_zmailStandardClientCustomPrefTab, zmailStandardClientCustomPrefTab);
        return attrs;
    }

    /**
     * description of the custom tab in the Preferences page in HTML client
     * in the format {tab-name},{associated-URL}
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.1.3
     */
    @ZAttr(id=1267)
    public void unsetStandardClientCustomPrefTab() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailStandardClientCustomPrefTab, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * description of the custom tab in the Preferences page in HTML client
     * in the format {tab-name},{associated-URL}
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.1.3
     */
    @ZAttr(id=1267)
    public Map<String,Object> unsetStandardClientCustomPrefTab(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailStandardClientCustomPrefTab, "");
        return attrs;
    }

    /**
     * whether extra custom tabs in the Preferences page in HTML client are
     * enabled
     *
     * @return zmailStandardClientCustomPrefTabsEnabled, or false if unset
     *
     * @since ZCS 7.1.3
     */
    @ZAttr(id=1266)
    public boolean isStandardClientCustomPrefTabsEnabled() {
        return getBooleanAttr(Provisioning.A_zmailStandardClientCustomPrefTabsEnabled, false);
    }

    /**
     * whether extra custom tabs in the Preferences page in HTML client are
     * enabled
     *
     * @param zmailStandardClientCustomPrefTabsEnabled new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.1.3
     */
    @ZAttr(id=1266)
    public void setStandardClientCustomPrefTabsEnabled(boolean zmailStandardClientCustomPrefTabsEnabled) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailStandardClientCustomPrefTabsEnabled, zmailStandardClientCustomPrefTabsEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether extra custom tabs in the Preferences page in HTML client are
     * enabled
     *
     * @param zmailStandardClientCustomPrefTabsEnabled new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.1.3
     */
    @ZAttr(id=1266)
    public Map<String,Object> setStandardClientCustomPrefTabsEnabled(boolean zmailStandardClientCustomPrefTabsEnabled, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailStandardClientCustomPrefTabsEnabled, zmailStandardClientCustomPrefTabsEnabled ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether extra custom tabs in the Preferences page in HTML client are
     * enabled
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.1.3
     */
    @ZAttr(id=1266)
    public void unsetStandardClientCustomPrefTabsEnabled() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailStandardClientCustomPrefTabsEnabled, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether extra custom tabs in the Preferences page in HTML client are
     * enabled
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.1.3
     */
    @ZAttr(id=1266)
    public Map<String,Object> unsetStandardClientCustomPrefTabsEnabled(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailStandardClientCustomPrefTabsEnabled, "");
        return attrs;
    }

    /**
     * The maximum batch size for each ZmailSync transaction. Default value
     * of 0 means to follow client requested size. If set to any positive
     * integer, the value will be the maximum number of items to sync even if
     * client requests more. This setting affects all sync categories
     * including email, contacts, calendar and tasks.
     *
     * @return zmailSyncWindowSize, or 0 if unset
     */
    @ZAttr(id=437)
    public int getSyncWindowSize() {
        return getIntAttr(Provisioning.A_zmailSyncWindowSize, 0);
    }

    /**
     * The maximum batch size for each ZmailSync transaction. Default value
     * of 0 means to follow client requested size. If set to any positive
     * integer, the value will be the maximum number of items to sync even if
     * client requests more. This setting affects all sync categories
     * including email, contacts, calendar and tasks.
     *
     * @param zmailSyncWindowSize new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=437)
    public void setSyncWindowSize(int zmailSyncWindowSize) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailSyncWindowSize, Integer.toString(zmailSyncWindowSize));
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * The maximum batch size for each ZmailSync transaction. Default value
     * of 0 means to follow client requested size. If set to any positive
     * integer, the value will be the maximum number of items to sync even if
     * client requests more. This setting affects all sync categories
     * including email, contacts, calendar and tasks.
     *
     * @param zmailSyncWindowSize new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=437)
    public Map<String,Object> setSyncWindowSize(int zmailSyncWindowSize, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailSyncWindowSize, Integer.toString(zmailSyncWindowSize));
        return attrs;
    }

    /**
     * The maximum batch size for each ZmailSync transaction. Default value
     * of 0 means to follow client requested size. If set to any positive
     * integer, the value will be the maximum number of items to sync even if
     * client requests more. This setting affects all sync categories
     * including email, contacts, calendar and tasks.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=437)
    public void unsetSyncWindowSize() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailSyncWindowSize, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * The maximum batch size for each ZmailSync transaction. Default value
     * of 0 means to follow client requested size. If set to any positive
     * integer, the value will be the maximum number of items to sync even if
     * client requests more. This setting affects all sync categories
     * including email, contacts, calendar and tasks.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=437)
    public Map<String,Object> unsetSyncWindowSize(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailSyncWindowSize, "");
        return attrs;
    }

    /**
     * The registered name of the Zmail Analyzer Extension for this account
     * to use
     *
     * @return zmailTextAnalyzer, or null if unset
     */
    @ZAttr(id=393)
    public String getTextAnalyzer() {
        return getAttr(Provisioning.A_zmailTextAnalyzer, null);
    }

    /**
     * The registered name of the Zmail Analyzer Extension for this account
     * to use
     *
     * @param zmailTextAnalyzer new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=393)
    public void setTextAnalyzer(String zmailTextAnalyzer) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailTextAnalyzer, zmailTextAnalyzer);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * The registered name of the Zmail Analyzer Extension for this account
     * to use
     *
     * @param zmailTextAnalyzer new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=393)
    public Map<String,Object> setTextAnalyzer(String zmailTextAnalyzer, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailTextAnalyzer, zmailTextAnalyzer);
        return attrs;
    }

    /**
     * The registered name of the Zmail Analyzer Extension for this account
     * to use
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=393)
    public void unsetTextAnalyzer() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailTextAnalyzer, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * The registered name of the Zmail Analyzer Extension for this account
     * to use
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=393)
    public Map<String,Object> unsetTextAnalyzer(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailTextAnalyzer, "");
        return attrs;
    }

    /**
     * UC service zmailId
     *
     * @return zmailUCServiceId, or null if unset
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1401)
    public String getUCServiceId() {
        return getAttr(Provisioning.A_zmailUCServiceId, null);
    }

    /**
     * UC service zmailId
     *
     * @param zmailUCServiceId new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1401)
    public void setUCServiceId(String zmailUCServiceId) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailUCServiceId, zmailUCServiceId);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * UC service zmailId
     *
     * @param zmailUCServiceId new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1401)
    public Map<String,Object> setUCServiceId(String zmailUCServiceId, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailUCServiceId, zmailUCServiceId);
        return attrs;
    }

    /**
     * UC service zmailId
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1401)
    public void unsetUCServiceId() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailUCServiceId, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * UC service zmailId
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 8.0.0
     */
    @ZAttr(id=1401)
    public Map<String,Object> unsetUCServiceId(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailUCServiceId, "");
        return attrs;
    }

    /**
     * whether or not to show link to offline version in the web UI top bar
     *
     * @return zmailWebClientShowOfflineLink, or true if unset
     *
     * @since ZCS 6.0.0_GA
     */
    @ZAttr(id=1047)
    public boolean isWebClientShowOfflineLink() {
        return getBooleanAttr(Provisioning.A_zmailWebClientShowOfflineLink, true);
    }

    /**
     * whether or not to show link to offline version in the web UI top bar
     *
     * @param zmailWebClientShowOfflineLink new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_GA
     */
    @ZAttr(id=1047)
    public void setWebClientShowOfflineLink(boolean zmailWebClientShowOfflineLink) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailWebClientShowOfflineLink, zmailWebClientShowOfflineLink ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether or not to show link to offline version in the web UI top bar
     *
     * @param zmailWebClientShowOfflineLink new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_GA
     */
    @ZAttr(id=1047)
    public Map<String,Object> setWebClientShowOfflineLink(boolean zmailWebClientShowOfflineLink, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailWebClientShowOfflineLink, zmailWebClientShowOfflineLink ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * whether or not to show link to offline version in the web UI top bar
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 6.0.0_GA
     */
    @ZAttr(id=1047)
    public void unsetWebClientShowOfflineLink() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailWebClientShowOfflineLink, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * whether or not to show link to offline version in the web UI top bar
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 6.0.0_GA
     */
    @ZAttr(id=1047)
    public Map<String,Object> unsetWebClientShowOfflineLink(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailWebClientShowOfflineLink, "");
        return attrs;
    }

    /**
     * List of Zimlets available to this COS Values can be prefixed with ! or
     * + or - !: mandatory + (or no prefix): enabled by default -: disabled
     * by default
     *
     * @return zmailZimletAvailableZimlets, or empty array if unset
     */
    @ZAttr(id=291)
    public String[] getZimletAvailableZimlets() {
        return getMultiAttr(Provisioning.A_zmailZimletAvailableZimlets);
    }

    /**
     * List of Zimlets available to this COS Values can be prefixed with ! or
     * + or - !: mandatory + (or no prefix): enabled by default -: disabled
     * by default
     *
     * @param zmailZimletAvailableZimlets new value
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=291)
    public void setZimletAvailableZimlets(String[] zmailZimletAvailableZimlets) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailZimletAvailableZimlets, zmailZimletAvailableZimlets);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * List of Zimlets available to this COS Values can be prefixed with ! or
     * + or - !: mandatory + (or no prefix): enabled by default -: disabled
     * by default
     *
     * @param zmailZimletAvailableZimlets new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=291)
    public Map<String,Object> setZimletAvailableZimlets(String[] zmailZimletAvailableZimlets, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailZimletAvailableZimlets, zmailZimletAvailableZimlets);
        return attrs;
    }

    /**
     * List of Zimlets available to this COS Values can be prefixed with ! or
     * + or - !: mandatory + (or no prefix): enabled by default -: disabled
     * by default
     *
     * @param zmailZimletAvailableZimlets new to add to existing values
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=291)
    public void addZimletAvailableZimlets(String zmailZimletAvailableZimlets) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "+" + Provisioning.A_zmailZimletAvailableZimlets, zmailZimletAvailableZimlets);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * List of Zimlets available to this COS Values can be prefixed with ! or
     * + or - !: mandatory + (or no prefix): enabled by default -: disabled
     * by default
     *
     * @param zmailZimletAvailableZimlets new to add to existing values
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=291)
    public Map<String,Object> addZimletAvailableZimlets(String zmailZimletAvailableZimlets, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "+" + Provisioning.A_zmailZimletAvailableZimlets, zmailZimletAvailableZimlets);
        return attrs;
    }

    /**
     * List of Zimlets available to this COS Values can be prefixed with ! or
     * + or - !: mandatory + (or no prefix): enabled by default -: disabled
     * by default
     *
     * @param zmailZimletAvailableZimlets existing value to remove
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=291)
    public void removeZimletAvailableZimlets(String zmailZimletAvailableZimlets) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "-" + Provisioning.A_zmailZimletAvailableZimlets, zmailZimletAvailableZimlets);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * List of Zimlets available to this COS Values can be prefixed with ! or
     * + or - !: mandatory + (or no prefix): enabled by default -: disabled
     * by default
     *
     * @param zmailZimletAvailableZimlets existing value to remove
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=291)
    public Map<String,Object> removeZimletAvailableZimlets(String zmailZimletAvailableZimlets, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        StringUtil.addToMultiMap(attrs, "-" + Provisioning.A_zmailZimletAvailableZimlets, zmailZimletAvailableZimlets);
        return attrs;
    }

    /**
     * List of Zimlets available to this COS Values can be prefixed with ! or
     * + or - !: mandatory + (or no prefix): enabled by default -: disabled
     * by default
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     */
    @ZAttr(id=291)
    public void unsetZimletAvailableZimlets() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailZimletAvailableZimlets, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * List of Zimlets available to this COS Values can be prefixed with ! or
     * + or - !: mandatory + (or no prefix): enabled by default -: disabled
     * by default
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     */
    @ZAttr(id=291)
    public Map<String,Object> unsetZimletAvailableZimlets(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailZimletAvailableZimlets, "");
        return attrs;
    }

    /**
     * Whether to load zimlets synchronously in the web client. If set to
     * TRUE, users are not allowed to use the core app before zimlets are
     * loaded. If set to FALSE, zimlets are loaded in the background and
     * users are allowed to use the core app before all zimlets finish
     * loading.
     *
     * @return zmailZimletLoadSynchronously, or false if unset
     *
     * @since ZCS 7.2.0
     */
    @ZAttr(id=1391)
    public boolean isZimletLoadSynchronously() {
        return getBooleanAttr(Provisioning.A_zmailZimletLoadSynchronously, false);
    }

    /**
     * Whether to load zimlets synchronously in the web client. If set to
     * TRUE, users are not allowed to use the core app before zimlets are
     * loaded. If set to FALSE, zimlets are loaded in the background and
     * users are allowed to use the core app before all zimlets finish
     * loading.
     *
     * @param zmailZimletLoadSynchronously new value
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.2.0
     */
    @ZAttr(id=1391)
    public void setZimletLoadSynchronously(boolean zmailZimletLoadSynchronously) throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailZimletLoadSynchronously, zmailZimletLoadSynchronously ? Provisioning.TRUE : Provisioning.FALSE);
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Whether to load zimlets synchronously in the web client. If set to
     * TRUE, users are not allowed to use the core app before zimlets are
     * loaded. If set to FALSE, zimlets are loaded in the background and
     * users are allowed to use the core app before all zimlets finish
     * loading.
     *
     * @param zmailZimletLoadSynchronously new value
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.2.0
     */
    @ZAttr(id=1391)
    public Map<String,Object> setZimletLoadSynchronously(boolean zmailZimletLoadSynchronously, Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailZimletLoadSynchronously, zmailZimletLoadSynchronously ? Provisioning.TRUE : Provisioning.FALSE);
        return attrs;
    }

    /**
     * Whether to load zimlets synchronously in the web client. If set to
     * TRUE, users are not allowed to use the core app before zimlets are
     * loaded. If set to FALSE, zimlets are loaded in the background and
     * users are allowed to use the core app before all zimlets finish
     * loading.
     *
     * @throws org.zmail.common.service.ServiceException if error during update
     *
     * @since ZCS 7.2.0
     */
    @ZAttr(id=1391)
    public void unsetZimletLoadSynchronously() throws org.zmail.common.service.ServiceException {
        HashMap<String,Object> attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailZimletLoadSynchronously, "");
        getProvisioning().modifyAttrs(this, attrs);
    }

    /**
     * Whether to load zimlets synchronously in the web client. If set to
     * TRUE, users are not allowed to use the core app before zimlets are
     * loaded. If set to FALSE, zimlets are loaded in the background and
     * users are allowed to use the core app before all zimlets finish
     * loading.
     *
     * @param attrs existing map to populate, or null to create a new map
     * @return populated map to pass into Provisioning.modifyAttrs
     *
     * @since ZCS 7.2.0
     */
    @ZAttr(id=1391)
    public Map<String,Object> unsetZimletLoadSynchronously(Map<String,Object> attrs) {
        if (attrs == null) attrs = new HashMap<String,Object>();
        attrs.put(Provisioning.A_zmailZimletLoadSynchronously, "");
        return attrs;
    }

    ///// END-AUTO-GEN-REPLACE

}
