package Amavis::Custom;
use strict;
use warnings;
no warnings qw(uninitialized redefine);

BEGIN {
  import Amavis::Conf qw(:platform ca);
}

# invoked at child process creation time;
# return an object, or just undef when custom checks are not needed
sub new {
  my($class,$conn,$msginfo) = @_;
  my($self) = bless {}, $class;

  my($ccat_sub) = 0;
  my(@recips) = map { $_->recip_addr } @{$msginfo->per_recip_data};
  if (Amavis::Lookup::lookup(0,$msginfo->sender,
        @{ca('archive_quarantine_to_maps')})) {
    $ccat_sub = 3;  # sender quarantine
  } elsif (grep { Amavis::Lookup::lookup(0,$_,
         @{ca('archive_quarantine_to_maps')}) } @recips) {
    $ccat_sub = 2;  # recipient quarantine
  }
  if ($ccat_sub > 0) {
    $msginfo->add_contents_category(CC_CLEAN,$ccat_sub);
    for my $r (@{$msginfo->per_recip_data}) {
      $r->add_contents_category(CC_CLEAN,$ccat_sub);
    }
  }
  $self;  # returning an object activates further callbacks,
          # returning undef disables them
};
