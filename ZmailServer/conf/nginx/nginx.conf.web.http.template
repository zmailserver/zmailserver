!{explode domain(vhn)}
# HTTP Proxy Configuration
# 
server
{
    server_name         ${vhn}; 
    ${core.ipboth.enabled}listen            ${vip}:${web.http.port};
    ${core.ipv4only.enabled}listen            ${vip}:${web.http.port};
    ${core.ipv6only.enabled}listen            ${vip}:${web.http.port} ipv6only=on;
    client_max_body_size 0;

    location /
    {
        include             ${core.includes}/${core.cprefix}.web.http.mode-${web.mailmode};

        # Begin stray redirect hack
        # 
        # In some cases, we may get a stray redirect out of the mailhost,
        # which attempts to send us to $host:$mailhostport, where:
        # 
        # $host is the host portion (excluding port) of the proxy URL
        # $mailhostport is the zimbraMailPort as applies to the mailhost
        #   server being redirected to
        # 
        # This is the case when one mailhost in the upstream cluster is
        # trying to redirect to another mailhost in the same cluster
        # In this case, we need to trap and fudge this location header
        # 
        # NOTE that this will only work in the cases where each mailhost 
        # within the cluster has the same mailhostport (Limitation)
        # 

        set $mailhostport ${web.http.uport};   # replace this with *the* mailhost port
        set $relhost $host;

        if ($mailhostport != 80) {   # standard HTTP port, do not replace
            set $relhost $host:$mailhostport;
        }

        # End stray redirect hack

        # Proxy to Zimbra Upstream
        proxy_pass     ${web.upstream.target};

        # For audit
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # For Virtual Hosting
        set $virtual_host $http_host;
        if ($virtual_host = '') {
            set $virtual_host $server_name:$server_port;
        }
        proxy_set_header Host            $virtual_host;

        # Fudge inter-mailbox redirects (kludge)
        proxy_redirect http://$relhost/ http://$http_host/;
    }

    #For long polling of Microsoft ActiveSync
    location ^~ /Microsoft-Server-ActiveSync
    {
        include             ${core.includes}/${core.cprefix}.web.http.mode-${web.mailmode};

        # Begin stray redirect hack
        # 
        # In some cases, we may get a stray redirect out of the mailhost,
        # which attempts to send us to $host:$mailhostport, where:
        # 
        # $host is the host portion (excluding port) of the proxy URL
        # $mailhostport is the zimbraMailPort as applies to the mailhost
        #   server being redirected to
        # 
        # This is the case when one mailhost in the upstream cluster is
        # trying to redirect to another mailhost in the same cluster
        # In this case, we need to trap and fudge this location header
        # 
        # NOTE that this will only work in the cases where each mailhost 
        # within the cluster has the same mailhostport (Limitation)
        # 

        set $mailhostport ${web.http.uport};   # replace this with *the* mailhost port
        set $relhost $host;

        if ($mailhostport != 80) {   # standard HTTP port, do not replace
            set $relhost $host:$mailhostport;
        }

        # End stray redirect hack

        # Proxy to Zimbra Upstream
        proxy_pass         ${web.upstream.target};
        proxy_read_timeout ${web.upstream.polling.timeout};
        proxy_buffering    off;

        # For audit
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # For Virtual Hosting
        set $virtual_host $http_host;
        if ($virtual_host = '') {
            set $virtual_host $server_name:$server_port;
        }
        proxy_set_header Host            $virtual_host;

        # Fudge inter-mailbox redirects (kludge)
        proxy_redirect http://$relhost/ http://$http_host/;
    }

    # For NoOpRequest
    location /service/soap/NoOpRequest {
        include             ${core.includes}/${core.cprefix}.web.http.mode-${web.mailmode};
    
        # Begin stray redirect hack
        #
        # In some cases, we may get a stray redirect out of the mailhost,
        # which attempts to send us to $host:$mailhostport, where:
        #
        # $host is the host portion (excluding port) of the proxy URL
        # $mailhostport is the zimbraMailPort as applies to the mailhost
        #   server being redirected to
        #
        # This is the case when one mailhost in the upstream cluster is
        # trying to redirect to another mailhost in the same cluster
        # In this case, we need to trap and fudge this location header
        #
        # NOTE that this will only work in the cases where each mailhost
        # within the cluster has the same mailhostport (Limitation)
        #

        set $mailhostport ${web.http.uport};   # replace this with *the* mailhost port
        set $relhost $host;

        if ($mailhostport != 80) {   # standard HTTP port, do not replace
            set $relhost $host:$mailhostport;
        }

        # End stray redirect hack

        # Proxy to Zimbra Upstream
        proxy_pass ${web.upstream.target};

        proxy_read_timeout ${web.upstream.noop.timeout};
        proxy_buffering    off;

        # For audit
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # For Virtual Hosting
        set $virtual_host $http_host;
        if ($virtual_host = '') {
            set $virtual_host $server_addr:$server_port;
        }
        proxy_set_header Host            $virtual_host;

        # Fudge inter-mailbox redirects (kludge)
        proxy_redirect http://$relhost/ http://$http_host/;
    }

    # For WaitSetRequest
    location /service/soap/WaitSetRequest {
        include             ${core.includes}/${core.cprefix}.web.http.mode-${web.mailmode};

        # Begin stray redirect hack
        #
        # In some cases, we may get a stray redirect out of the mailhost,
        # which attempts to send us to $host:$mailhostport, where:
        #
        # $host is the host portion (excluding port) of the proxy URL
        # $mailhostport is the zimbraMailPort as applies to the mailhost
        #   server being redirected to
        #
        # This is the case when one mailhost in the upstream cluster is
        # trying to redirect to another mailhost in the same cluster
        # In this case, we need to trap and fudge this location header
        #
        # NOTE that this will only work in the cases where each mailhost
        # within the cluster has the same mailhostport (Limitation)
        #

        set $mailhostport ${web.http.uport};   # replace this with *the* mailhost port
        set $relhost $host;

        if ($mailhostport != 80) {   # standard HTTP port, do not replace
            set $relhost $host:$mailhostport;
        }

        # End stray redirect hack

        # Proxy to Zimbra Upstream
        proxy_pass ${web.upstream.target};

        proxy_read_timeout ${web.upstream.waitset.timeout};
        proxy_buffering    off;

        # For audit
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # For Virtual Hosting
        set $virtual_host $http_host;
        if ($virtual_host = '') {
            set $virtual_host $server_addr:$server_port;
        }
        proxy_set_header Host            $virtual_host;

        # Fudge inter-mailbox redirects (kludge)
        proxy_redirect http://$relhost/ http://$http_host/;
    }

    location ~* ^/zmerror_.*\.html$ {
        # for custom error pages, internal use only
        internal;
    }

    #chunkin handler
    location @chunkin_handler {
        chunkin_resume;
    }
}
