# NGINX POP/IMAP proxy configuration file for use with Zimbra
# 

# Refer to nginx wiki at http://wiki.codemongers.com/ for configuration syntax
# 

# change UID/GID to zimbra/zimbra upon startup
user zimbra zimbra;

# number of worker processes to start 
# multiply this by worker_connections to get the maximum number of connections 
# that can be simultaneously handled by nginx (the product should not exceed
# 65536, since that is the 16-bit limit of the TCP port range)
# 
worker_processes  4;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

pid        /opt/zimbra/log/nginx.pid;
error_log  /opt/zimbra/log/nginx.log info;


events {
    # number of simultaneous connections that each worker process can 
    # handle simultaneously
    # note that this number should not exceed the hard limit of the 
    # RLIMIT_NOFILE resource limit that is set for the zimbra user, because
    # RLIMIT_NOFILE defines the maximum number of open file descriptors that
    # a process running as a user can have - by default, limits.conf on a 
    # zimbra system will ensure that the zimbra user has more than 10k file
    # descriptors allowed for a zimbra process

    # (note) also see worker_rlimit_nofile at 
    # http://wiki.codemongers.com/NginxMainModule#worker_rlimit_nofile
    # 
    worker_connections  10240;
}

memcache {
    # memcached server configuration
    # configure one or more memcached servers that will cache the route 
    # information for pop/imap users
    # 
    %%uncomment VAR:getAllMemcachedServers%% %%explode servers VAR:getAllMemcachedServers;%%

    # The time that NGINX will wait for a cached result from a memcached
    # server, after which the request will be considered timed out,
    # and NGINX will fall back to an http routing lookup handler
    # 
    timeout     3000ms;

    # The amount of time that NGINX will wait before attempting to reconnect
    # to a memcache server that unexpectedly terminated (or shut down) its 
    # connection with NGINX
    # 
    reconnect   1m;

    # The time to live (TTL) for an entry added to the memcached server 
    # This value represents the amount of time that the route information 
    # that is cached into the memcached servers will be available, before 
    # the memcached daemon expires it
    # Memcached expects the TTL for an entry to be specified in seconds, 
    # therefore any value specified in milliseconds here will be rounded 
    # up to the next integer value in seconds. If not specified, the TTL
    # defaults to 0, which indicates an infinite time to live for the 
    # routing information
    # 
    ttl         1h;

    # Whether or not to cache unqualified login names - this is useful in 
    # deployments where there is only one domain, but many users, so that a 
    # user may log in without the @domain suffix to the login name. If this
    # flag is enabled, then no domain is suffixed to the key of the route
    # information entry in the cache - If this flag is disabled, then the 
    # IP address of the network interface of the proxy server is suffixed
    # to the user's unqualified login name, and that is used as the key 
    # for the route information - this will make sure that in future, the
    # same user logging in to the same proxy using an unqualified login 
    # name will benefit from the previously cached route information, if any
    # By default, this value is off
    # 
    allow_unqualified    off;

}

mail {

    # POP/IMAP timeout
    timeout                       3600s;

    # pass error messages from the backend server to the client
    # if true, the error messages are passed to the client verbatim, else
    # nginx logs the original error message in its log file and sends back
    # a generic error message to the client
    # 
    proxy_pass_error_message on;

    # HTTP lookup handlers that will return the route information for a
    # pop3/imap login
    # see http://wiki.codemongers.com/NginxMailCoreModule
    # 
    %%explode auth_http VAR:getAllReverseProxyURLs;%%

	pop3_capabilities        "TOP" "USER" "UIDL" "EXPIRE 31 USER";
	imap_capabilities        "IMAP4rev1" "ID" "LITERAL+" "SASL-IR";

    # IMAP4 ID Extension support (RFC 2971)
    # Use the imap_id directive to specify the string that should be sent
    # back by the proxy server back to the client upon receipt of an 
    # IMAP ID command as described by RFC 2971
    # There MUST be an even number of strings specified against 
    # this directive, because RFC 2971 defines the server response to be 
    # a list of field-value pairs (refer Formal Syntax, RFC 2971 Section 4)
    # Each string in this list should be enclosed within double quotes
    # If not quoted, they will be automatically quoted by nginx, but the 
    # use of quotes allows the space character to be included within an 
    # ID field or a value
    # The odd numbered strings are treated as ID fields, with the following 
    # even-numbered string considered to be the ID value corresponding to 
    # the field name
    # If omitted, the response to the ID command will be nil, which
    # according to RFC 2971, is permissible in lieu of the field-value list
    # The imap_id directive may be overridden in a server block
    # 
    imap_id     "NAME" "nginx" "VERSION" "0" "RELEASE" "1";

    # master authenticating user for cases where nginx must authenticate 
    # on behalf of the end user -- this is required in those sasl auth
    # mechanisms where the user's plain-text password is not available,
    # in these cases, after nginx has deemed that the user has authenticated
    # himself/herself correctly, then nginx will use the master auth user 
    # name and master auth password, along with the end user's user name, 
    # in order to log in to the backend server
    # such authentication will be done as per the PLAIN sasl mechanism as 
    # defined in RFC 4616
    # (presently, this will only be used for auth gssapi)
    # 
    master_auth_username    "nginx";
    master_auth_password    "nginx123";

    # sasl_app_name
    # This is the application name which nginx will use when initializing
    # the SASL library using the call to sasl_server_init()
    # The SASL library is initialized once per process, the application name
    # provided here is used for where to find the default configuration file
    # If not specified, sasl_app_name defaults to "nginx"
    # 
    sasl_app_name           "nginx";

    # Login rate limiting directives
    # 

    # mail_login_ip_max 
    # 
    # Sets the maximum number of times that any user is allowed to log in from
    # a particular IP over POP or IMAP to this proxy server before the login is
    # rejected with an appropriate protocol specific bye response
    # This counter is cumulative for all users that appear to the proxy to be 
    # logging in from the same IP address
    # If multiple users appear to the proxy to be logging in from the same IP 
    # address (usual with NATing), then each of the different users' login will
    # contribute to increasing the hit counter for that IP address, and when the
    # counter eventually exceeds mail_login_ip_max, then the connections from 
    # that IP address will be throttled
    # Therefore, all users from the same IP will contribute to
    # (and be affected by) this counter
    # Logins using all protocols (POP3/POP3S/IMAP/IMAPS) will affect this 
    # counter, (the counter is aggregate for all protocols, *not* separate)
    # See notes accompanying the mail_login_ip_ttl for reasonable values for
    # this directive
    # If this value is set to 0, then no throttling will take place for any IP
    # 
    mail_login_ip_max               %%zimbraReverseProxyIPLoginLimit%%;

    # mail_login_ip_ttl
    # 
    # Sets the time-to-live for the hit counter for IP login throttling
    # Used in conjunction with mail_login_ip_max, this defines the semantics
    # of the throttling for IP logins. Therfore, if this is set to 3600s, and
    # if mail_login_ip_max is set to 1000, then it means that NGINX should not
    # allow more than 1000 users to log in to the proxy from the same IP, 
    # within the time interval of an hour (=3600s)
    # The semantics for such a configuration would then be -
    # "allow maximum 1000 users per hour from any given IP address"
    #
    mail_login_ip_ttl               %%zimbraReverseProxyIPLoginLimitTime%%s;

    # Define a textual message that should be displayed to the user when
    # his/her connection is rejected based on IP overusage
    # This message will be encapsulated in the proper protocol specific 
    # response to the client ("* BYE" for IMAP, and "-ERR" for POP3)
    #
    mail_login_ip_rejectmsg         "Login rejected from this IP";

    # Similar semantics for Rate Limiting User Logins
    # Setting mail_login_user_max to 100 and mail_login_user_ttl to 3600s
    # implies "allow maximum 100 logins per hour for any user"
    # As with the ip counterparts, the user hit counter and timeout are 
    # cumulative for all protocols
    # Also, for a given user's login, both counters are checked in succession,
    # with the IP counter being checked first
    # A login may be rejected (throttled) because the IP is over-usage, or
    # because the login name itself is over-usage
    # A value of 0 indicates that no throttling will take place for any user
    # 
    mail_login_user_max             %%zimbraReverseProxyUserLoginLimit%%;
    mail_login_user_ttl             %%zimbraReverseProxyUserLoginLimitTime%%s;
    mail_login_user_rejectmsg       "Login rejected for this user";

    # XOIP
%%uncomment VAR:!zimbraReverseProxySendPop3Xoip%%    proxy_issue_pop3_xoip off;

    # Supported SASL Authentication mechanisms
    # 
    # Use the pop3_auth and imap_auth to specify which SASL mechanisms are 
    # enabled for POP and IMAP respectively
    # These directives may be specified at mail{} level, or overridden at
    # server{} level
    # Even though an authentication mechanism may be listed against 
    # pop3_auth and/or imap_auth, it may or may not be available depending
    # on whether cleartext login is available (see description for starttls)
    # For example, if starttls is set to only, then SASL PLAIN is not 
    # available outside of TLS/SSL
    # SASL mechanisms may be specified all on one line (space separated)
    # against pop3_auth, or they may be specified on a separate line
    # Specifying the SASL mechanisms on a separate line has the advantage
    # that they can be enabled/disabled separately by zmmtaconfig using
    # different LDAP attributes
    # Currently, only PLAIN and GSSAPI mechanisms are supported
    # 

    pop3_auth               plain;
%%uncomment VAR:zimbraReverseProxyPop3SaslGssapiEnabled%%    pop3_auth               gssapi;

    imap_auth               plain;
%%uncomment VAR:zimbraReverseProxyImapSaslGssapiEnabled%%    imap_auth               gssapi;

    # Specify whether to use literal strings while issuing the LOGIN command
    # to the upstream server. If set to on, then it means that NGINX will use
    # literal strings to log in to the upstream server, and so the upstream 
    # MUST support literal strings
    # If set to off, then NGINX uses quoted strings to log in to the upstream
    # server when using the LOGIN command
    # If not specified, imap_literalauth defaults to on
    # 
    imap_literalauth        on;

    # Auth Wait Interval
    # Specifies the time interval that NGINX will wait before rejecting an
    # authentication attempt with invalid credentials
    # If not specified, this value defaults to 10 seconds
    # 
    auth_wait               10s;

    # TLS configuration
    # 
    # (starttls moved to per-server config)
    # starttls on;
    ssl_prefer_server_ciphers on;
    ssl_certificate             /opt/zimbra/conf/nginx.crt;
    ssl_certificate_key         /opt/zimbra/conf/nginx.key;
    
    # Ciphers configuration
    #
    # Permitted ciphers. Ciphers are assigned in the formats supported by OpenSSL
    #
%%uncomment VAR:zimbraReverseProxySSLCiphers%%        ssl_ciphers %%zimbraReverseProxySSLCiphers%%;

    # POP3 proxy configuration
    # 
%%uncomment VAR:zimbraReverseProxyMailEnabled%%    server {
%%uncomment VAR:zimbraReverseProxyMailEnabled%%        listen %%zimbraPop3ProxyBindPort%%;
%%uncomment VAR:zimbraReverseProxyMailEnabled%%        protocol pop3;
%%uncomment VAR:zimbraReverseProxyMailEnabled%%        proxy on;
        # sasl_service_name defaults to "pop" when protocol=pop3, "imap" when protocol=imap
%%uncomment VAR:zimbraReverseProxyMailEnabled%%        sasl_service_name       "pop";
        # starttls=on implies cleartext login enabled
        # starttls=only implies cleartext login requires SSL/TLS
%%uncomment VAR:zimbraReverseProxyMailEnabled%%        starttls                %%zimbraReverseProxyPop3StartTlsMode%%;
%%uncomment VAR:zimbraReverseProxyMailEnabled%%    }

%%uncomment VAR:zimbraReverseProxyMailEnabled%%    server {
%%uncomment VAR:zimbraReverseProxyMailEnabled%%        listen %%zimbraPop3SSLProxyBindPort%%;
%%uncomment VAR:zimbraReverseProxyMailEnabled%%        protocol pop3;
%%uncomment VAR:zimbraReverseProxyMailEnabled%%        proxy on;
%%uncomment VAR:zimbraReverseProxyMailEnabled%%        ssl on;
        # sasl_service_name defaults to "pop" when protocol=pop3, "imap" when protocol=imap
%%uncomment VAR:zimbraReverseProxyMailEnabled%%        sasl_service_name       "pop";
%%uncomment VAR:zimbraReverseProxyMailEnabled%%    }

    # IMAP proxy configuration
    # 
%%uncomment VAR:zimbraReverseProxyMailEnabled%%    server {
%%uncomment VAR:zimbraReverseProxyMailEnabled%%        listen %%zimbraImapProxyBindPort%%;
%%uncomment VAR:zimbraReverseProxyMailEnabled%%        protocol imap;
%%uncomment VAR:zimbraReverseProxyMailEnabled%%        proxy on;
        # sasl_service_name defaults to "pop" when protocol=pop3, "imap" when protocol=imap
%%uncomment VAR:zimbraReverseProxyMailEnabled%%        sasl_service_name       "imap";
        # starttls=on implies cleartext login enabled
        # starttls=only implies cleartext login requires SSL/TLS
%%uncomment VAR:zimbraReverseProxyMailEnabled%%        starttls                %%zimbraReverseProxyImapStartTlsMode%%;
%%uncomment VAR:zimbraReverseProxyMailEnabled%%    }

%%uncomment VAR:zimbraReverseProxyMailEnabled%%    server {
%%uncomment VAR:zimbraReverseProxyMailEnabled%%        listen %%zimbraImapSSLProxyBindPort%%;
%%uncomment VAR:zimbraReverseProxyMailEnabled%%        protocol imap;
%%uncomment VAR:zimbraReverseProxyMailEnabled%%        proxy on;
%%uncomment VAR:zimbraReverseProxyMailEnabled%%        ssl on;
        # sasl_service_name defaults to "pop" when protocol=pop3, "imap" when protocol=imap
%%uncomment VAR:zimbraReverseProxyMailEnabled%%        sasl_service_name       "imap";
%%uncomment VAR:zimbraReverseProxyMailEnabled%%    }
}

http {

    # . Define an upstream section which represents a set of zimbra mailbox
    #   servers to which we will proxy
    # . Declare one server entry inside the upstream block for each known 
    #   mailbox server - in a single node install, there should be just one
    #   server entry, usually localhost:7070
    #   In a multi-node install, there should be one server entry per mailbox
    #   server
    # . The name of the upstream block will be sent against the Host: header
    #   to the real servers ("zimbra" is used in the example below, but it is 
    #   probably better to use a fully qualified name here)
    # . If the name of the proxy server needs to be sent instead, then 
    # . Also include the zmauth directive (with no arguments) in the upstream 
    #   block. Doing so will instruct nginx proxy to look at the ZM_AUTH_TOKEN
    #   cookie, and to extract the name(s) of the mailbox servers from the 
    #   "mailhost=" section of the decoded auth-token
    # . A decoded ZM_AUTH_TOKEN may look like (no line sep) -
    #          id=36:cc00ce85-8c0b-49eb-8e08-a8aab43ce836;
    #          exp=13:1196504658160;
    #          type=6:zimbra;
    #          mailhost=14:127.0.0.1:7070;
    #
    upstream zimbra
    {
	%%getAllReverseProxyBackends%%
        zmauth;
    }

    # HTTP lookup handlers that will return the route information for a
    # http/https login
    # see http://wiki.codemongers.com/NginxMailCoreModule
    # 
%%uncomment VAR:zimbraReverseProxyHttpEnabled%% %%explode zmroutehandlers VAR:getAllReverseProxyURLs;%%
%%uncomment VAR:zimbraReverseProxyHttpEnabled%%    zmroute_timeout 15s;

%%uncomment VAR:zimbraReverseProxyHttpEnabled%% server {
%%uncomment VAR:zimbraReverseProxyHttpEnabled%%     listen %%zimbraMailProxyPort%%;
%%uncomment VAR:zimbraReverseProxyHttpEnabled%%     client_max_body_size %%zimbraFileUploadMaxSize%%;
%%uncomment VAR:zimbraReverseProxyHttpEnabled%%     location / {
            # Proxy to the collection of servers identified by the upstream
            # block 'zimbra'
            #
%%uncomment VAR:zimbraReverseProxyHttpEnabled%%         proxy_pass http://zimbra;

            # Set the X-Forwarded-For request header to indicate the IP address
            # of the end-client on whose behalf the proxying has been done
            # (usually required for security and audit purposes)
            #
%%uncomment VAR:zimbraReverseProxyHttpEnabled%%         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # Set the Host header to an appropriate value when communicating
            # with the upstream server
            # If not specified, the name of the upstream block (in this case,
            # "zimbra") will be sent against the Host header to the backend
            # server
            # Reasonable values here are -
            #   $proxy_host (default)   The name of the upstream block
            #   $server_name            The FQDN of the proxy server
            #   $http_host              The server:port that was used by the
            #                            client to reach the proxy server
            #
            # proxy_set_header Host            $proxy_host;
            # proxy_set_header Host            $server_name;
%%uncomment VAR:zimbraReverseProxyHttpEnabled%%         proxy_set_header Host            $http_host;

%%uncomment VAR:zimbraReverseProxyHttpEnabled%%     }
%%uncomment VAR:zimbraReverseProxyHttpEnabled%% }
    # HTTPS Proxy
%%uncomment VAR:zimbraReverseProxyHttpEnabled%% server {
%%uncomment VAR:zimbraReverseProxyHttpEnabled%%     listen %%zimbraMailSSLProxyPort%%;
%%uncomment VAR:zimbraReverseProxyHttpEnabled%%     client_max_body_size %%zimbraFileUploadMaxSize%%;
%%uncomment VAR:zimbraReverseProxyHttpEnabled%%     ssl                  on;
%%uncomment VAR:zimbraReverseProxyHttpEnabled%%     ssl_certificate      /opt/zimbra/conf/nginx.crt;
%%uncomment VAR:zimbraReverseProxyHttpEnabled%%     ssl_certificate_key  /opt/zimbra/conf/nginx.key;
%%uncomment VAR:zimbraReverseProxyHttpEnabled%%     location / {
%%uncomment VAR:zimbraReverseProxyHttpEnabled%%         proxy_pass       http://zimbra;
%%uncomment VAR:zimbraReverseProxyHttpEnabled%%         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
%%uncomment VAR:zimbraReverseProxyHttpEnabled%%         proxy_set_header Host            $http_host;
%%uncomment VAR:zimbraReverseProxyHttpEnabled%%     }
%%uncomment VAR:zimbraReverseProxyHttpEnabled%% }

}
