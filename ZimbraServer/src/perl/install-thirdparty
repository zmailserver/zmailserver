#!/usr/bin/perl
# 
# ***** BEGIN LICENSE BLOCK *****
# Zimbra Collaboration Suite Server
# Copyright (C) 2008, 2009, 2010, 2011, 2012 VMware, Inc.
# 
# The contents of this file are subject to the Zimbra Public License
# Version 1.3 ("License"); you may not use this file except in
# compliance with the License.  You may obtain a copy of the License at
# http://www.zimbra.com/license.
# 
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.
# ***** END LICENSE BLOCK *****
# 

use strict;

if (scalar(@ARGV) != 1) {
    print(STDERR "Usage: install-thirdparty <p4-branch-name>\n");
    exit(1);
}

my $BASE_DIR = "/opt/zimbra";
my $CACHE_DIR = "$BASE_DIR/third-party-cache";
my $LIB_DIR = "$BASE_DIR/lib/";
my $THIRD_PARTY_BUILDS_DIR = "//depot/zimbra/$ARGV[0]/ThirdPartyBuilds/";
my $P4_ROOT = $THIRD_PARTY_BUILDS_DIR . getPlatformDirName();
my $JETTY_P4_PATH = "//depot/zimbra/$ARGV[0]/ThirdParty/jetty";
my %BINARIES = (
    "curl" => "7.25.0",
    "cyrus-sasl" => "2.1.25.4z",
    "heimdal" => "1.5.2",
    "libtool" => "2.2.6b",
    "openldap" => "2.4.33.3z",
    "openldap-libs" => "2.4.33.3z",
    "openssl" => "1.0.1c",
    "rsync" => "3.0.9",
    "tcmalloc" => "2.0",
    "jetty" => "distribution-7.6.10.z5"
);
my $P4_CMD = "p4";

if (! -d $CACHE_DIR) {
    mkdir($CACHE_DIR) || die "Could not create directory: $CACHE_DIR";
}

# Remove old binaries to make sure there's no cruft.
for my $binaryName (keys %BINARIES) {
    my $version = $BINARIES{$binaryName};
    my $cmd = "rm -rf $BASE_DIR/$binaryName $BASE_DIR/$binaryName-$version";
    runCommand($cmd);
}

for my $binaryName (keys %BINARIES) {
    my $version = $BINARIES{$binaryName};
    my $cmd;
    my $p4Path;

    if ($binaryName eq "openldap-libs") {
        $p4Path = "$P4_ROOT/openldap/openldap-libs-$version.tgz";
    } elsif ($binaryName eq "jetty") {
        $p4Path = "$JETTY_P4_PATH/jetty-$version.tar.gz";
    } else {
        $p4Path = "$P4_ROOT/$binaryName/$binaryName-$version.tgz";
    }

    # Copy tarball to the third party cache directory if necessary.
    my $tarball = "$CACHE_DIR/$binaryName-$version.tgz";
    if (! -f $tarball) {
        $cmd = "$P4_CMD print -o $tarball $p4Path";
        runCommand($cmd);
    }

    # Untar.
    $cmd = "tar -xzf $tarball -C $BASE_DIR";
    runCommand($cmd);

    # Symlink.
    if ($binaryName ne "openldap-libs") {
        symlink("$BASE_DIR/$binaryName-$version", "$BASE_DIR/$binaryName") || die "Could not create symlink for $binaryName";
    }
}

installJunixsocketNativeLib();

sub runCommand($) {
    my $cmd = shift();
    print("$cmd\n");
    system($cmd);
    if ($? != 0) {
	print(STDERR "An error occurred while running '$cmd'");
	if (defined($!)) {
	    print(STDERR ": $!");
	}
	print(STDERR "\n");
	exit(1);
    }
}

sub getPlatformDirName() {
    my $os = `uname -s`;
    chomp($os);
    my $dirName;

    if ($os eq "Darwin") {
	my $version = `uname -r | cut -f1 -d.`;
	chomp($version);
	if ($version eq "8") {
	    $dirName = "MACOSXx86";
	} elsif ($version eq "9") {
	    $dirName = "MACOSXx86_10.6";
        } elsif ($version eq "11") {
	    $dirName = "MACOSXx86_10.7";
	} else {
	    $dirName = "MACOSXx86_10.6";
	}
    } else {
	if (-f "/etc/redhat-release") {
	    my $uname = `uname -a`;
            if ($uname =~ /el6/) {
                if ($uname =~ /64/) {
                    $dirName = "RHEL6_64";
                } else {
                    $dirName = "RHEL6";
                }
            } elsif ($uname =~ /el5/) {
		if ($uname =~ /64/) {
		    $dirName = "RHEL5_64";
		} else {
		    $dirName = "RHEL5";
		}
	    } else {
		if ($uname =~ /64/) {
		    $dirName = "RHEL4_64";
		} else {
		    $dirName = "RHEL4";
		}
	    }
        } else {
	    if (`uname -m` =~ /i686/) {
                $dirName = "UBUNTU8_64";
	    } else {
                $dirName = "UBUNTU10_64";
	    }
        }
    }

    return $dirName;
}

sub installJunixsocketNativeLib() {
    my $cmd;
    my $srcDir;
    my $srcName;
    
    my $libSrcDir = "/java/junixsocket/";
    my $libPrefix = "libjunixsocket";
    
    my $os = `uname -s`;
    chomp($os);
    
    if ($os eq "Darwin") {
        $srcDir = $THIRD_PARTY_BUILDS_DIR . "OSXx86_64" . $libSrcDir;
        $srcName = "$libPrefix-macosx-1.5-x86_64.dylib";
    } else {
        $srcDir = $THIRD_PARTY_BUILDS_DIR . "x86_64" . $libSrcDir;
        $srcName = "$libPrefix-linux-1.5-amd64.so";
    }
    
    my $srcPath = $srcDir . $srcName;
    my $destPath = $LIB_DIR . $srcName;
    
    # print(STDERR "srcPath is: $srcPath\n");
    # print(STDERR "destPath is: $destPath\n");
    
    # Remove old binaries to make sure there's no cruft.
    $cmd = "rm -rf $LIB_DIR" . "$libPrefix*";
    runCommand($cmd);
    
    # Copy file to the third party cache directory if necessary.
    my $cachedPath = "$CACHE_DIR/$srcName";
    if (! -f $cachedPath) {
        $cmd = "$P4_CMD print -o $cachedPath $srcPath";
        runCommand($cmd);
    }
    
    # Copy file from the third party cache directory to the destination 
    $cmd = "cp $cachedPath $destPath";
    runCommand($cmd);
}
