#!/usr/bin/perl
# 
# ***** BEGIN LICENSE BLOCK *****
# Zimbra Collaboration Suite Server
# Copyright (C) 2011, 2012 VMware, Inc.
# 
# The contents of this file are subject to the Zimbra Public License
# Version 1.3 ("License"); you may not use this file except in
# compliance with the License.  You may obtain a copy of the License at
# http://www.zimbra.com/license.
# 
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.
# ***** END LICENSE BLOCK *****
# 
use strict;
use lib '/opt/zimbra/zimbramon/lib';
use Net::LDAP;
use XML::Simple;
use Getopt::Long;

if ( ! -d "/opt/zimbra/openldap/etc" ) {
  print "ERROR: openldap does not appear to be installed - exiting\n";
  exit(1);
}

my $id = getpwuid($<);
chomp $id;
if ($id ne "zimbra") {
    print STDERR "Error: must be run as zimbra user\n";
    exit (1);
}
my ($help);

my $opts_good = GetOptions(
        'h|help' => \$help,
);

if (!$opts_good) {
        print STDERR "\n";
        usage();
}
if ($help) {
        usage(0);
}

my $localxml = XMLin("/opt/zimbra/conf/localconfig.xml");
my $ldap_root_password = $localxml->{key}->{ldap_root_password}->{value};
chomp($ldap_root_password);
my $ldap_is_master = $localxml->{key}->{ldap_is_master}->{value};
chomp($ldap_is_master);

if(lc($ldap_is_master) eq "true") {
  my $ldap = Net::LDAP->new('ldapi://%2fopt%2fzimbra%2fopenldap%2fvar%2frun%2fldapi/') or die "$@";
  my $mesg = $ldap->bind("cn=config", password=>"$ldap_root_password");
  $mesg->code && die "Bind: ". $mesg->error . "\n"; 

# Check to see if olcServerID is already configured.  If not, add it.

  my $dn="cn=config";
  $mesg = $ldap ->search(
                    base=>"$dn",
                    filter=>"(&(objectClass=olcGlobal)(olcServerID=*))",
                    scope=>"sub",
                    attrs => ['olcServerID'],
                );
  my $size = $mesg->count;
  if ($size == 0) {
    print "Error: Not a multi-master.\n";
    exit(1);
  }
  my $entry=$mesg->entry(0);
  my $attr=$entry->get_value("olcServerID");
  print "Server information\n";
  print "ServerID: $attr\n\n";
  my $bdn="olcDatabase={3}mdb,cn=config";
  $mesg = $ldap->search(
            base => "$bdn",
            filter => "(olcSyncrepl=*)",
            attrs => ['olcSyncrepl']
  );
  $size = $mesg->count;
  if ($size > 0) {
    $entry=$mesg->entry(0);
    print "Master replication information\n";
	my $count=1;
    foreach ($entry->get_value('olcSyncRepl')) {
	  my ($rid,$uri, $junk);
      ($junk, $rid) = split (/rid=/, $_, 2);
	  ($junk, $uri) = split (/provider=/, $rid, 2);
	  ($rid, $junk) = split (/ /, $rid, 2);
	  ($uri, $junk) = split (/ /, $uri, 2);
	  print "Master replica $count\n";
	  print "rid: $rid ";
	  print "URI: $uri\n";
	  $count++;
    }
  }
} else {
  print "Not a master.\n";
  exit(0);
}

sub usage {

        my ($msg) = (@_);

        $msg && print STDERR "\nERROR: $msg\n";
        print STDERR <<USAGE;
  zmldapquery-mmr
  
  Provides information about the MMR configuration for this LDAP host.

USAGE
        exit (1);
}

