/*
 * ***** BEGIN LICENSE BLOCK *****
 * 
 * Zimbra Collaboration Suite CSharp Client
 * Copyright (C) 2011, 2012 VMware, Inc.
 * 
 * The contents of this file are subject to the Zimbra Public License
 * Version 1.3 ("License"); you may not use this file except in
 * compliance with the License.  You may obtain a copy of the License at
 * http://www.zimbra.com/license.
 * 
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.
 * 
 * ***** END LICENSE BLOCK *****
 */
// ExchangeMigration.idl : IDL source for ExchangeMigration
//

// This file will be processed by the MIDL tool to
// produce the type library (Exchange.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";

typedef enum FolderType {
    Mail = 1,
    Contacts = 2,
    Calendar = 3,
    Task = 4,
} FolderType;

[
    object,
    uuid(C5E4267C-AE6C-4E31-956A-06D8094D0CBE),
    dual,
    nonextensible,
    pointer_default(unique)
]
interface IMapiWrapper: IDispatch {
    [id(1), helpstring("initialize source server")]
    HRESULT GlobalInit([in] BSTR pMAPITarget, [in] BSTR pAdminUser, [in] BSTR pAdminPassword, [out, retval] BSTR *pErrorText);
    [id(2), helpstring("connect to ZCS server")]
    HRESULT ConnectToServer(BSTR ServerHostName, BSTR Port, BSTR AdminID);
    [id(3), helpstring("import all options, input is the tag name for options")]
    HRESULT ImportMailOptions([in] BSTR OptionsTag);
    [id(4)] HRESULT GetProfilelist([out] VARIANT *Profiles, [out, retval]BSTR *status);
    [id(5), helpstring("retreive folder objects")]
    HRESULT GetFolderObjects([out, retval] VARIANT *vObjects);
    [id(6), helpstring("get Exchange users from object picker")]  
    HRESULT SelectExchangeUsers([out] VARIANT *Users, [out, retval] BSTR *pErrorText);
    [id(7), helpstring("disconnect from the mail server")] 
    HRESULT GlobalUninit([out, retval] BSTR *pErrorText);
    [id(8), helpstring("errors not to display")] 
    HRESULT AvoidInternalErrors([in]BSTR lpToCmp,[out, retval]LONG *lRetval);
};

[
	object,
	uuid(11C777ED-E9D0-4C32-AB64-D3B71E069D0D),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IFolderObject : IDispatch{
    [propget, id(1)] HRESULT Name([out, retval] BSTR *pVal);
    [propput, id(1)] HRESULT Name([in] BSTR newVal);
    [propget, id(2)] HRESULT Id([out, retval] LONG *pVal);
    [propput, id(2)] HRESULT Id([in] LONG newVal);
    [propget, id(3)] HRESULT FolderPath([out, retval] BSTR *pVal);
    [propput, id(3)] HRESULT FolderPath([in] BSTR newVal);
    [propput, id(4)] HRESULT FolderID([in] VARIANT newVal);
    [propget, id(4)] HRESULT FolderID([out, retval] VARIANT *newVal);
    [propget, id(5)] HRESULT ItemCount([out, retval] LONG *pVal);
    [propput, id(5)] HRESULT ItemCount([in] LONG newVal);
    [propget, id(6)] HRESULT ContainerClass([out, retval] BSTR *pVal);
    [propput, id(6)] HRESULT ContainerClass([in] BSTR newVal);
};

[
	object,
	uuid(8E14F34A-7CAC-4266-83F2-DC9AB08FBF8B),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IMapiAccessWrap : IDispatch{
    [id(1)] HRESULT UserInit([in] BSTR userName, [in] BSTR userAccount, [out] BSTR *statusMsg);
    [id(2)] HRESULT GetFolderList([out] VARIANT *folders);
    [id(3), helpstring("retreive items for folder objects")]
    HRESULT GetItemsList([in] IFolderObject *folderObj, [in] VARIANT creationDate, [out, retval] VARIANT *vItems);
    [id(4)] HRESULT GetData([in]BSTR userId, [in] VARIANT itemId, [in] FolderType type, [out, retval] VARIANT *pVal);
    [id(5)] HRESULT UserUninit();
    [id(6)] HRESULT GetOOOInfo([out] BSTR *OOOInfo);
    [id(7)] HRESULT GetRuleList([out] VARIANT *rules);
};

[
	object,
	uuid(04AB72E8-BAA2-4BF7-8E91-DCE1A2601075),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IUserObject : IDispatch{
     [id(1)] HRESULT Init([in]BSTR host, [in] BSTR location, [in] BSTR accountName, [out, retval] BSTR *pErrorText);
    [id(2), helpstring("method to retreive folder objects")]
    HRESULT GetFolders([out, retval] VARIANT *vObjects);
    [id(3), helpstring("method to retreive items in folders")]
    HRESULT GetItemsForFolder([in] IFolderObject *folderObj, [in] VARIANT creationDate, [out, retval] VARIANT *vItems);
    [id(4)] HRESULT GetMapiAccessObject(BSTR userID, [out, retval] IMapiAccessWrap **pVal);
    [id(5)] HRESULT Uninit(void);
    [id(6)] HRESULT GetOOO([out, retval] BSTR *pOOO);
    [id(7)] HRESULT GetRules([out, retval] VARIANT *vRules);
};
[
	object,
	uuid(473DAC45-B40B-4FBF-9AC0-4C584B2336AD),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IItemObject : IDispatch{
    [propget, id(1)] HRESULT ID([out, retval] BSTR *pVal);
    [propput, id(1)] HRESULT ID([in] BSTR newVal);
    [propget, id(2)] HRESULT Type([out, retval] FolderType *pVal);
    [propput, id(2)] HRESULT Type([in] FolderType newVal);
    [propget, id(3)] HRESULT CreationDate([out, retval] VARIANT *pVal);
    [propput, id(3)] HRESULT CreationDate([in] VARIANT newVal);
    [propget, id(4)] HRESULT Parentfolder([out, retval] IFolderObject **pVal);
    [propput, id(4)] HRESULT Parentfolder([in] IFolderObject *newVal);
     [propget, id(5)] HRESULT IDasString([out, retval] BSTR *pVal);
    [propput, id(5)] HRESULT IDasString([in] BSTR newVal);

    [propput, id(6)] HRESULT ItemID([in] VARIANT newVal);
    [propget, id(6)] HRESULT ItemID([out,retval] VARIANT *newVal);
    [id(7)] HRESULT GetDataForItemID([in] IUserObject *Userobj, [in] VARIANT ItemId, [in] FolderType type, [out, retval] VARIANT *pVal);
};


[
    uuid(33449EAA-8056-4D28-8D42-552B7C6C8954),
    version(1.0),
]

library Exchange {
    importlib("stdole2.tlb");
    [
	uuid(A6A12B55-AE1E-449D-A646-19E0DB020EA2)		
    ]
    coclass MapiWrapper
    {
	[default] interface IMapiWrapper;
    };
    
	[
		uuid(54CC791E-CDC9-429E-B94A-FEE4C44C45BB)		
	]
	coclass FolderObject
	{
		[default] interface IFolderObject;
	};
	[
		uuid(E85E06D6-1342-490B-9486-AFBF029143C1)		
	]
	coclass ItemObject
	{
		[default] interface IItemObject;
	};
	[
		uuid(A020CB81-231E-4349-9B05-4D262E24242C)		
	]
	coclass MapiAccessWrap
	{
		[default] interface IMapiAccessWrap;
	};
	[
		uuid(7B8D17C3-89BF-4F6C-A2EE-A3ABEA1525E6)		
	]
	coclass UserObject
	{
		[default] interface IUserObject;
	};
};
