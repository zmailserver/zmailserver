Return-Path: <xmlbeans-dev-return-331-smith=stanford.edu@xml.apache.org>
Received: from leland2.Stanford.EDU (leland2.Stanford.EDU [171.64.14.58])
	by popserver1.Stanford.EDU (8.12.10/8.12.10) with ESMTP id h93FW8LB009770
	for <smith@popserver1.stanford.edu>; Fri, 3 Oct 2003 08:32:08 -0700 (PDT)
Received: from mail.apache.org (daedalus.apache.org [208.185.179.12]) by
	leland2.Stanford.EDU (8.12.10/8.12.10) with SMTP id h93FW1wj015787 for
	<smith@stanford.edu>; Fri, 3 Oct 2003 08:32:02 -0700 (PDT)
Received: (qmail 91184 invoked by uid 500); 3 Oct 2003 15:31:57 -0000
Mailing-List: contact xmlbeans-dev-help@xml.apache.org; run by ezmlm
Precedence: bulk
X-No-Archive: yes
List-Post: <mailto:xmlbeans-dev@xml.apache.org>
List-Help: <mailto:xmlbeans-dev-help@xml.apache.org>
List-Unsubscribe: <mailto:xmlbeans-dev-unsubscribe@xml.apache.org>
List-Subscribe: <mailto:xmlbeans-dev-subscribe@xml.apache.org>
Reply-To: xmlbeans-dev@xml.apache.org
Delivered-To: mailing list xmlbeans-dev@xml.apache.org
Received: (qmail 91171 invoked from network); 3 Oct 2003 15:31:57 -0000
Message-ID: <013801c389c3$79b021c0$0fa8a8c0@lightbox>
From: "David Bau" <david.bau@bea.com>
To: <xmlbeans-dev@xml.apache.org>
References: <1065122063.14001.18.camel@zieg>
Subject: Re: builtin type conversions
Date: Fri, 3 Oct 2003 11:31:52 -0400
X-Zimbra-Received: Fri, 3 Oct 2003 11:31:52 -0400
MIME-Version: 1.0
Content-Type: text/plain; charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
X-Priority: 3
X-MSMail-Priority: Normal
X-Mailer: Microsoft Outlook Express 6.00.2800.1158
X-MimeOLE: Produced By Microsoft MimeOLE V6.00.2800.1165
X-Spam-Rating: daedalus.apache.org 1.6.2 0/1000/N
X-Evolution-Source: imap://smith@smith.pobox.stanford.edu/
X-Evolution: 00000048-0010

+1; rationalizing these seems like goodness.

For each primitive we probably need to have four functions:

(1) Lex the characters into a logical value (and note any well-formedness
error in doing so)
float lexFloat(CharSequence input, Collection errors)

  (1.1) Note that customized whitespace-collapse rules may be need to be
applied while doing (1) [strings only?]
String lexString(CharSequence input, int wsRule, Collection errors)

(2) Validate custom lexical rules for a user-defined type (patterns, length,
etc) (and note any error)
void validateFloatLex(CharSequence input, SchemaType actualType, Collection
errors)

(3) Validate custom logical rules for a user-defined type (min, max, etc)
void validateFloatValue(float value, SchemaType acutalType, Collection
errors)

(4) Write a value out to characters
String printFloat(float value)

In the fastest unmarshalling path, we'd just use (1); but full validators
would also use (2) and (3).

I _think_ the whitespace customization issue is unique to xs:string's
subtypes - can whitespace rules be customized for any other schema types?

I think we should probably parse using input from CharSequence rather than
String so that we can avoid String allocation where possible.  Strings are
CharSequences anyway, so should be no loss in power. Seem right?

A question: is there a similar strategy that can be done for the printing
side of things so we can avoid String allocation for data that is just on
its way into a character array (or even a byte array) anyway?

The parsing for the seven schema date types is currently consolidated in
GDate (and we probalby want to continue doing so), although we might
eventually consider parsing directly into a Calendar subclass instead of our
GDate waypoint (any volunteers?)

I'd be happy if we consolidated all these primitive lexing/validating
functions on one big class of static functions; or if there were one class
for each primitive, or one class for lexing and another for validating.  Any
form of cleanup there would be welcome.

In asking the Q, does this mean you're going to rationalize this stuff
Scott?  (Please do if you want to.)

David


- ---------------------------------------------------------------------
To unsubscribe, e-mail:   xmlbeans-dev-unsubscribe@xml.apache.org
For additional commands, e-mail: xmlbeans-dev-help@xml.apache.org
Apache XMLBeans Project -- URL: http://xml.apache.org/xmlbeans/

