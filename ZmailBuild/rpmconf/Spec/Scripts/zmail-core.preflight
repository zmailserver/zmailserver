#!/bin/bash
# 
# ***** BEGIN LICENSE BLOCK *****
# Zimbra Collaboration Suite Server
# Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012 VMware, Inc.
# 
# The contents of this file are subject to the Zimbra Public License
# Version 1.3 ("License"); you may not use this file except in
# compliance with the License.  You may obtain a copy of the License at
# http://www.zimbra.com/license.
# 
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.
# ***** END LICENSE BLOCK *****
# 

nifind=/usr/bin/nifind
nireport=/usr/bin/nireport
niutil=/usr/bin/niutil
dscl=/usr/bin/dscl

verifyExists() {
  EXISTS=0
  if [ -x "${nifind}" ]; then
    NM=`${nifind} /$1/$2`   
    if [ "x$NM" != "x" ]; then
     EXISTS=1
    fi
  elif [ -x "${dscl}" ]; then
    NM=`${dscl} . -list /$1/$2 2> /dev/null`
    if [ "x$NM" = "x" ]; then
     EXISTS=1
    fi
  fi
}

getVersion() {
  VERSION=`sw_vers | grep ^ProductVersion | awk '{print $NF}' | awk -F. '{print $1"."$2}'`
}

verifyAvailable() {
  verifyExists $1 $2
}

getNextGID() {
  if [ -x "${nireport}" ]; then
    GID=`${nireport} / /groups gid | sort -n | tail -1`
    GID=`expr $GID + 1`       
  elif [ -x "${dscl}" ]; then
    GID=`${dscl} . -readall /users PrimaryGroupID | grep ^PrimaryGroupID | awk '{print $NF}' | sort -n | tail -1`
    GID=`expr $GID + 1`
  fi
}

getGIDByName() {
  if [ -x "${niutil}" ]; then
    IDS=`${niutil} -read / /groups/$1 | egrep '^gid:' | sed -e 's/gid: //'`
    if [ "x$IDS" != "x" ]; then
      GID=$IDS
    fi      
  elif [ -x "${dscl}" ]; then
    IDS=`${dscl} . -read /groups/staff | egrep '^PrimaryGroupID' | awk '{print $NF}'`
    if [ "x$IDS" != "x" ]; then
      GID=$IDS
    fi
  fi
}


getNextUID() {
  if [ -x "${nireport}" ]; then
    NUID=`${nireport} / /users uid | sort -n | tail -1`
  elif [ -x "${dscl}" ]; then
    NUID=`${dscl} . -readall /users UniqueID | grep ^UniqueID | awk '{print $NF}' | sort -n | tail -1`
  fi
  NUID=`expr $NUID + 1`
}

addUser() {
  auxgroups=`echo $auxgroups | sed -e 's/,/ /g'`

  verifyAvailable "users" $name

  if [ $EXISTS -eq 1 ]; then
    return
  fi

  for g in $auxgroups; do
    verifyExists groups $g
    if [ $EXISTS = 0 ]; then
      :
    else
      if [ -x "${niutil}" ]; then
        ${niutil} -mergeprop / /groups/$g users $name 
      elif [ -x "${dscl}" ]; then
        ${dscl} . -merge /groups/$g GroupMembership $name
      fi
    fi
  done

  verifyExists groups $maingroup
  if [ $EXISTS = 1 ]; then
    getGIDByName $maingroup
    creategroup=0
  else
    getNextGID
    creategroup=1
  fi
  maingid=$GID
  getNextUID 
  mainuid=$NUID

  echo "Creating group $name with gid:$maingid"
  if [ $creategroup = 1 ]; then
    if [ -x "${niutil}" ]; then
      ${niutil} -create / /groups/$maingroup
      ${niutil} -createprop / /groups/$maingroup gid $maingid               
    elif [ -x "${dscl}" ]; then
      ${dscl} . -create /groups/$maingroup
      ${dscl} . -create /groups/$maingroup PrimaryGroupID $maingid
      ${dscl} . -merge /groups/$maingroup RecordName $maingroup
    fi
  fi
  echo "Creating user $name with uid:$mainuid"
  if [ -x "${niutil}" ]; then
    ${niutil} -mergeprop / /groups/$maingroup users $name

    ${niutil} -create / /users/$name
    ${niutil} -createprop / /users/$name realname $name
    ${niutil} -createprop / /users/$name uid $mainuid
    ${niutil} -createprop / /users/$name gid ${maingid}
    ${niutil} -createprop / /users/$name shell /bin/bash
    ${niutil} -createprop / /users/$name authentication_authority ";ShadowHash;"
    ${niutil} -createprop / /users/$name passwd '*'                          
    if [ x$homedir != "x" ]; then
      ${niutil} -createprop / /users/$name home $homedir  
    fi
  elif [ -x "${dscl}" ]; then
    ${dscl} . -merge /groups/$maingroup GroupMembership $name
    ${dscl} . -create /users/$name
    ${dscl} . -merge /users/$name RecordName $name
    ${dscl} . -create /users/$name RealName $name
    ${dscl} . -create /users/$name UniqueID $mainuid
    ${dscl} . -create /users/$name PrimaryGroupID ${maingid}
    ${dscl} . -create /users/$name UserShell /bin/bash
    ${dscl} . -create /users/$name AuthenticationAuthority ";ShadowHash;"
    ${dscl} . -create /users/$name Password '*'
    if [ x$homedir != "x" ]; then
      ${dscl} . -create /users/$name NFSHomeDirectory $homedir
    fi
  fi

}

maingroup="postfix"
homedir="/opt/zimbra/postfix"
name="postfix"
addUser

maingroup="zimbra"
auxgroups="postfix,com.apple.access_ssh"
homedir="/opt/zimbra"
name="zimbra"
addUser

if [ -f "/opt/zimbra/bin/zmcontrol" ]; then
  su - zimbra -c "/opt/zimbra/bin/zmcontrol stop" > /dev/null 2>&1
fi

rm -f /opt/zimbra/.enable_replica
if [ -f /opt/zimbra/conf/slapd.conf ]; then
  egrep -q '^overlay syncprov' /opt/zimbra/conf/slapd.conf > /dev/null
  if [ $? = 0 ]; then
    touch /opt/zimbra/.enable_replica
  else
    egrep -q 'type=refreshAndPersist' /opt/zimbra/conf/slapd.conf > /dev/null
    if [ $? = 0 ]; then
      touch /opt/zimbra/.enable_replica
    fi
  fi
fi

if [ -f /opt/zimbra/data/ldap/config/cn\=config.ldif ]; then
  if [ -f /opt/zimbra/data/ldap/config/cn\=config/olcDatabase\=\{2\}mdb/olcOverlay\=\{0\}syncprov.ldif ]; then
    touch /opt/zimbra/.enable_replica
  fi
fi

if [ ! -d "/opt/zimbra" ]; then
  mkdir /opt/zimbra
fi

if [ -f "/etc/sysctl.conf" ]; then
  egrep -q 'kern.maxfiles=' /etc/sysctl.conf >/dev/null
  if [ $? != 0 ]; then
    echo "kern.maxfiles=524289" >>/etc/sysctl.conf
    sysctl -w kern.maxfiles=524289 >/dev/null
  fi
  egrep -q 'kern.maxfilesperproc=' /etc/sysctl.conf >/dev/null
  if [ $? != 0 ]; then
    echo "kern.maxfilesperproc=524288" >>/etc/sysctl.conf
    sysctl -w kern.maxfilesperproc=524288 >/dev/null
  fi
  egrep -q 'kern.maxproc=' /etc/sysctl.conf >/dev/null
  if [ $? != 0 ]; then
    echo "kern.maxproc=2048" >>/etc/sysctl.conf
    sysctl -w kern.maxproc=2048 >/dev/null
  fi
  egrep -q 'kern.maxprocperuid=' /etc/sysctl.conf >/dev/null
  if [ $? != 0 ]; then
    echo "kern.maxprocperuid=2048" >>/etc/sysctl.conf
    sysctl -w kern.maxprocperuid=2048 >/dev/null
  fi
else
  echo "kern.maxfiles=524289" >/etc/sysctl.conf
  echo "kern.maxfilesperproc=524288" >>/etc/sysctl.conf
  echo "kern.maxproc=2048" >>/etc/sysctl.conf
  echo "kern.maxprocperuid=2048" >>/etc/sysctl.conf
  sysctl -w kern.maxfiles=524289 >/dev/null
  sysctl -w kern.maxfilesperproc=524288 >/dev/null
  sysctl -w kern.maxproc=2048 >/dev/null
  sysctl -w kern.maxprocperuid=2048 >/dev/null
fi
if [ -f "/etc/launchd.conf" ]; then
  PFIXIT=0
  FFIXIT=0
  egrep -q '^limit maxproc' /etc/launchd.conf >/dev/null
  if [ $? != 0 ]; then
    echo "limit maxproc 2048" >>/etc/launchd.conf
  else
    MAXPROC=`egrep -e '^limit maxproc' /etc/launchd.conf | awk '{print $3}'`
    if [ X$MAXPROC != "Xunlimited" ]; then
      if [ $MAXPROC -lt 2048 ]; then
        PFIXIT=1
      fi
    fi
  fi
  egrep -q '^limit maxfiles' /etc/launchd.conf >/dev/null
  if [ $? != 0 ]; then
    echo "limit maxfiles 524288" >/etc/launchd.conf
  else
    MAXFILES=`egrep -e '^limit maxfiles' /etc/launchd.conf | awk '{print $3}'`
    if [ X$MAXFILES != "Xunlimited" ]; then
      if [ $MAXFILES -lt 524288 ]; then
        FFIXIT=1
      fi
    fi
  fi
  if [ $PFIXIT -eq 1 -a $FFIXIT -eq 1 ]; then
    cat /etc/launchd.conf | egrep -v maxproc | egrep -v maxfiles >/tmp/launchd.conf
    echo "limit maxproc 2048" >>/tmp/launchd.conf
    echo "limit maxfiles 524288" >>/tmp/launchd.conf
    mv -f /tmp/launchd.conf /etc/launchd.conf
  elif [ $PFIXIT -eq 1 ]; then
    cat /etc/launchd.conf | egrep -v maxproc >/tmp/launchd.conf
    echo "limit maxproc 2048" >>/tmp/launchd.conf
    mv -f /tmp/launchd.conf /etc/launchd.conf
  elif [ $FFIXIT -eq 1 ]; then
    cat /etc/launchd.conf | egrep -v maxfiles >/tmp/launchd.conf
    echo "limit maxfiles 524288" >>/tmp/launchd.conf
    mv -f /tmp/launchd.conf /etc/launchd.conf
  fi
else
  echo "limit maxproc 2048" >/etc/launchd.conf
  echo "limit maxfiles 524288" >/etc/launchd.conf
fi

D=`date +%s`
echo "${D}: INSTALL SESSION START" >> /opt/zimbra/.install_history

exit 0
