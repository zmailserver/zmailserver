Return-Path: <xmlbeans-user-return-28-smith=stanford.edu@xml.apache.org>
Received: from leland3.Stanford.EDU (leland3.Stanford.EDU [171.64.14.90])
	by popserver1.Stanford.EDU (8.12.10/8.12.10) with ESMTP id h98HHSLB024020
	for <smith@popserver1.stanford.edu>; Wed, 8 Oct 2003 10:17:28 -0700 (PDT)
Received: from mail.apache.org (daedalus.apache.org [208.185.179.12]) by
	leland3.Stanford.EDU (8.12.10/8.12.10) with SMTP id h98HHMY3005600 for
	<smith@stanford.edu>; Wed, 8 Oct 2003 10:17:23 -0700 (PDT)
Received: (qmail 47424 invoked by uid 500); 8 Oct 2003 17:17:17 -0000
Mailing-List: contact xmlbeans-user-help@xml.apache.org; run by ezmlm
Precedence: bulk
X-No-Archive: yes
List-Post: <mailto:xmlbeans-user@xml.apache.org>
List-Help: <mailto:xmlbeans-user-help@xml.apache.org>
List-Unsubscribe: <mailto:xmlbeans-user-unsubscribe@xml.apache.org>
List-Subscribe: <mailto:xmlbeans-user-subscribe@xml.apache.org>
Reply-To: xmlbeans-user@xml.apache.org
Delivered-To: mailing list xmlbeans-user@xml.apache.org
Received: (qmail 47405 invoked from network); 8 Oct 2003 17:17:17 -0000
To: xmlbeans-user@xml.apache.org
Subject: Classloader problems
MIME-Version: 1.0
X-Mailer: Lotus Notes Release 6.0.1 February 07, 2003
Message-ID: <OFECD5C82E.6395ABBA-ON85256DB9.005D97EF-85256DB9.005EF6FE@vrtx.com>
From: Carl_Elkin@vrtx.com
Date: Wed, 8 Oct 2003 13:17:15 -0400
X-Zimbra-Received: Wed, 8 Oct 2003 13:17:15 -0400
X-MIMETrack: Serialize by Router on BOS01MAIL01/M/BOS1/VRTX(Release
	6.0.2CF2|July 23, 2003) at 10/08/2003 01:17:18 PM, Serialize complete at
	10/08/2003 01:17:18 PM, Itemize by SMTP Server on
	BOS01HUB/H/BOS1/VRTX(Release 6.0.2CF2|July 23, 2003) at 10/08/2003 01:17:18
	PM, Serialize by Router on BOS01HUB/H/BOS1/VRTX(Release 6.0.2CF2|July 23,
	2003) at 10/08/2003 01:17:20 PM, Serialize complete at 10/08/2003 01:17:20
	PM
Content-Type: multipart/alternative; boundary="=_alternative 005EF6FB85256DB9_="
X-Spam-Rating: daedalus.apache.org 1.6.2 0/1000/N
X-Evolution-Source: imap://smith@smith.pobox.stanford.edu/
X-Evolution: 0000004b-0010


--=_alternative 005EF6FB85256DB9_=
Content-Type: text/plain; charset="US-ASCII"

Hi all,

[Not sure if this is appropriate for -user or -development, but here 
goes...]

I'm using xmlbeans with sun's JavaSpaces.  With this technology, code 
(including xmlbeans in my case) is run on a remote server.  The relevant 
classes are downloaded from an RMI server, using an RMI classloader.

The first problem I encountered ocurred in places like 
SchemaTypeImpl.getJavaClass(), which, when parsing an XML file, calls 
tries to load a resource (a .xsb file) from my autogenerated jar, in order 
to determine a class name.  The problem is that class loader is unable to 
download a resource from a jar that is retrievable using RMI.  To get 
around this, I added the ugly hack of defining the class loader as a

new URLClassLoader (new URL[] {new URL 
                            ("http://10.13.4.27:8080/problem/myjar.jar")}, 

                    _typeSystem.getClassLoader());

This circumvented that problem, but obviously, hardcoding in the URL of my 
RMI server is a bad idea.  Is there a preferred way I could pass in the 
URL for an RMI class loader to load?

It turned out I had to make similar changes in several other places 
throughout the code, always because of similar issues.  The second, and 
more serious problem I encountered, is that there is a similar issue with 
one of my auto-generated classes, TypeSystemHolder.  This has a line

return 
(org.apache.xmlbeans.SchemaTypeSystem)Class.forName("org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl", 
true, TypeSystemHolder.class.getClassLoader()).getConstructor(new Class[] 
{ Class.class }).newInstance(new Object[] { TypeSystemHolder.class });

which, because its using the TypeSystemHolder class loader) returns a 
class that is not equal to the same class when loaded by a newly created 
RMI Class Loader.  I can't just use the hack I did above, because it would 
mean editing auto-generated code.

I've considered using the TypeSystemHolder.class.getClassLoader() to get 
the actual RMI loader, instead of creating my own, but this would require 
adding the auto-generated code to the class build path for building 
xbean.jar itself, which is both circular and really ugly.

Any suggestions?  Has much thought been given to how xmlbeans will work if 
used with RMI?

Thanks in advance,
Carl
--=_alternative 005EF6FB85256DB9_=
Content-Type: text/html; charset="US-ASCII"


<br><font size=2 face="sans-serif">Hi all,</font>
<br>
<br><font size=2 face="sans-serif">[Not sure if this is appropriate for
-user or -development, but here goes...]</font>
<br>
<br><font size=2 face="sans-serif">I'm using xmlbeans with sun's JavaSpaces.
&nbsp;With this technology, code (including xmlbeans in my case) is run
on a remote server. &nbsp;The relevant classes are downloaded from an RMI
server, using an RMI classloader.</font>
<br>
<br><font size=2 face="sans-serif">The first problem I encountered ocurred
in places like SchemaTypeImpl.getJavaClass(), which, when parsing an XML
file, calls tries to load a resource (a .xsb file) from my autogenerated
jar, in order to determine a class name. &nbsp;The problem is that class
loader is unable to download a resource from a jar that is retrievable
using RMI. &nbsp;To get around this, I added the ugly hack of defining
the class loader as a</font>
<br>
<br><font size=2 color=#820040 face="Courier New"><b>new</b></font><font size=2 face="Courier New">
URLClassLoader (</font><font size=2 color=#820040 face="Courier New"><b>new</b></font><font size=2 face="Courier New">
URL[] {</font><font size=2 color=#820040 face="Courier New"><b>new</b></font><font size=2 face="Courier New">
URL </font>
<br><font size=2 face="Courier New">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (</font><font size=2 color=#4200ff face="Courier New">&quot;http://10.13.4.27:8080/problem/myjar.jar&quot;</font><font size=2 face="Courier New">)},
</font>
<br><font size=2 face="Courier New">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _typeSystem.getClassLoader());</font>
<br>
<br><font size=2 face="sans-serif">This circumvented that problem, but
obviously, hardcoding in the URL of my RMI server is a bad idea. &nbsp;Is
there a preferred way I could pass in the URL for an RMI class loader to
load?</font>
<br>
<br><font size=2 face="sans-serif">It turned out I had to make similar
changes in several other places throughout the code, always because of
similar issues. &nbsp;The second, and more serious problem I encountered,
is that there is a similar issue with one of my auto-generated classes,
</font><font size=2 face="Courier New">TypeSystemHolder</font><font size=2 face="sans-serif">.
&nbsp;This has a line</font>
<br>
<br><font size=2 face="Courier New">return (org.apache.xmlbeans.SchemaTypeSystem)Class.forName(&quot;org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl&quot;,
true, TypeSystemHolder.class.getClassLoader()).getConstructor(new Class[]
{ Class.class }).newInstance(new Object[] { TypeSystemHolder.class });</font>
<br>
<br><font size=2 face="sans-serif">which, because its using the TypeSystemHolder
class loader) returns a class that is not equal to the same class when
loaded by a newly created RMI Class Loader. &nbsp;I can't just use the
hack I did above, because it would mean editing auto-generated code.</font>
<br>
<br><font size=2 face="sans-serif">I've considered using the TypeSystemHolder.class.getClassLoader()
to get the actual RMI loader, instead of creating my own, but this would
require adding the auto-generated code to the class build path for building
xbean.jar itself, which is both circular and really ugly.</font>
<br>
<br><font size=2 face="sans-serif">Any suggestions? &nbsp;Has much thought
been given to how xmlbeans will work if used with RMI?</font>
<br>
<br><font size=2 face="sans-serif">Thanks in advance,</font>
<br><font size=2 face="sans-serif">Carl</font>
--=_alternative 005EF6FB85256DB9_=--

